<#
/*
This file is part of PdfLibCore, a wrapper around the PDFium library for the .NET.
Inspired by the awesome work of PDFiumSharp by Tobias Meyer.

Copyright (C) 2021 Jan Baarsssen
License: Microsoft Reciprocal License (MS-RL)
*/
#>
<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ include file="common.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".g.cs" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Runtime.InteropServices;
using System.Runtime.ExceptionServices;
using System.Security;
using System.Threading;
using PdfLibCore.Types;
using PdfLibCore.Enums;

/*
This file is part of PdfLibCore, a wrapper around the PDFium library for the .NET.
Inspired by the awesome work of PDFiumSharp by Tobias Meyer.

Copyright (C) 2021 Jan Baarsssen
License: Microsoft Reciprocal License (MS-RL)
*/

// AUTOGENERATED FILE - <#= DateTime.Now.ToString("dd-MM-yyyy (HH:MM:ss)") #>
// DO NOT MODIFY

namespace PdfLibCore;

public static partial class Pdfium
{
<#
    foreach (var import in _imports.Where(i => !string.IsNullOrEmpty(i.Method)))
    {
#>
	/// <include file="Pdfium.xml" path="Documentation/<#= import.Name #>/*" /><#= import.Documentation.Aggregate(string.Empty, (current, doc) => current + Environment.NewLine + "\t\t/// " + doc) #>
    [HandleProcessCorruptedStateExceptions]
	<#= import.AccessModifier #> static <#= import.ReturnType #> <#= import.Name #><#= import.ArgumentList #>
	{
<#
        foreach (var helper in import.Arguments.Refs)
        {
            WriteLine($"\t\tvar {helper.Internal} = {helper.Name};");
        }

        foreach (var helper in import.Arguments.Outs)
        {
            WriteLine($"\t\t{helper.Type} {helper.Internal} = default;");
        }

        if (import.ReturnIsVoid)
        {
            WriteLine($"\t\tExecute(() => PlatformInvoke.{import.Name}({string.Join(", ", import.Arguments.Output)}));");
        }
        else if (!import.Arguments.Outs.Any())
        {
            WriteLine($"\t\treturn Execute(() => PlatformInvoke.{import.Name}({string.Join(", ", import.Arguments.Output)}));");
        }
        else
        {
            WriteLine($"\t\tvar result = Execute(() => PlatformInvoke.{import.Name}({string.Join(", ", import.Arguments.Output)}));");
        }
        foreach (var helper in import.Arguments.Outs)
        {
            WriteLine($"\t\t{helper.Name} = {helper.Internal};");
        }
        if (import.Arguments.Outs.Any() && !import.ReturnIsVoid)
        {
            WriteLine("\t\treturn result;");
        }
#>
    }

<#
    }
#>
}