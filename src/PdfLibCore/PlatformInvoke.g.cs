
using System;
using System.Runtime.InteropServices;
using System.Runtime.ExceptionServices;
using System.Security;
using PdfLibCore.Enums;
using PdfLibCore.Types;

/*
This file is part of PdfLibCore, a wrapper around the PDFium library for the .NET.
Inspired by the awesome work of PDFiumSharp by Tobias Meyer.

Copyright (C) 2023 J.C.A. Kokenberg
License: Microsoft Reciprocal License (MS-RL)
*/

// AUTOGENERATED FILE - 01-05-2023 (17:05:21)
// DO NOT MODIFY
namespace PdfLibCore;

internal static class PlatformInvoke
{
    private const string DllName = "pdfium";

    [DllImport(DllName, EntryPoint = nameof(FPDF_InitLibrary), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDF_InitLibrary();

    [DllImport(DllName, EntryPoint = nameof(FPDF_InitLibraryWithConfig), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDF_InitLibraryWithConfig(ref FPDF_LIBRARY_CONFIG config);

    [DllImport(DllName, EntryPoint = nameof(FPDF_DestroyLibrary), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDF_DestroyLibrary();

    [DllImport(DllName, EntryPoint = nameof(FPDF_SetSandBoxPolicy), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDF_SetSandBoxPolicy(int policy, bool enable);

    [DllImport(DllName, EntryPoint = nameof(FPDF_SetPrintTextWithGDI), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDF_SetPrintTextWithGDI(bool use_gdi);

    [DllImport(DllName, EntryPoint = nameof(FPDF_SetPrintMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDF_SetPrintMode(int mode);

    [DllImport(DllName, EntryPoint = nameof(FPDF_LoadDocument), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_DOCUMENT FPDF_LoadDocument([MarshalAs(UnmanagedType.LPStr)] string file_path, [MarshalAs(UnmanagedType.LPStr)] string password);

    [DllImport(DllName, EntryPoint = nameof(FPDF_LoadMemDocument), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_DOCUMENT FPDF_LoadMemDocument(ref byte data_buf, int size, [MarshalAs(UnmanagedType.LPStr)] string password);

    [DllImport(DllName, EntryPoint = nameof(FPDF_LoadCustomDocument), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_DOCUMENT FPDF_LoadCustomDocument(FPDF_FILEREAD fileRead, [MarshalAs(UnmanagedType.LPStr)] string password);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetFileVersion), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDF_GetFileVersion(FPDF_DOCUMENT doc, out int fileVersion);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetLastError), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_ERR FPDF_GetLastError();

    [DllImport(DllName, EntryPoint = nameof(FPDF_DocumentHasValidCrossReferenceTable), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDF_DocumentHasValidCrossReferenceTable(FPDF_DOCUMENT document);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetTrailerEnds), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDF_GetTrailerEnds(FPDF_DOCUMENT document, byte[] buffer, int length);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetDocPermissions), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern DocumentPermissions FPDF_GetDocPermissions(FPDF_DOCUMENT document);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetSecurityHandlerRevision), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDF_GetSecurityHandlerRevision(FPDF_DOCUMENT document);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDF_GetPageCount(FPDF_DOCUMENT document);

    [DllImport(DllName, EntryPoint = nameof(FPDF_LoadPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_PAGE FPDF_LoadPage(FPDF_DOCUMENT document, int page_index);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageWidthF), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern float FPDF_GetPageWidthF(FPDF_PAGE page);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageWidth), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern double FPDF_GetPageWidth(FPDF_PAGE page);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageHeightF), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern float FPDF_GetPageHeightF(FPDF_PAGE page);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageHeight), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern double FPDF_GetPageHeight(FPDF_PAGE page);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageBoundingBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDF_GetPageBoundingBox(FPDF_PAGE page, FS_RECTF rect);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageSizeByIndexF), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDF_GetPageSizeByIndexF(FPDF_DOCUMENT document, int index, FS_SIZEF size);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageSizeByIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDF_GetPageSizeByIndex(FPDF_DOCUMENT document, int index, out double width, out double height);

    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPageBitmap), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDF_RenderPageBitmap(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags);

    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDF_RenderPage(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags);

    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPageBitmapWithMatrix), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDF_RenderPageBitmapWithMatrix(FPDF_BITMAP bitmap, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipping, RenderingFlags flags);

    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPageSkp), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_RECORDER FPDF_RenderPageSkp(FPDF_PAGE page, int size_x, int size_y);

    [DllImport(DllName, EntryPoint = nameof(FPDF_ClosePage), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDF_ClosePage(FPDF_PAGE page);

    [DllImport(DllName, EntryPoint = nameof(FPDF_CloseDocument), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDF_CloseDocument(FPDF_DOCUMENT document);

    [DllImport(DllName, EntryPoint = nameof(FPDF_DeviceToPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDF_DeviceToPage(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, int device_x, int device_y, out double page_x, out double page_y);

    [DllImport(DllName, EntryPoint = nameof(FPDF_PageToDevice), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDF_PageToDevice(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, double page_x, double page_y, out int device_x, out int device_y);

    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_Create), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_BITMAP FPDFBitmap_Create(int width, int height, bool hasAlpha);

    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_CreateEx), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_BITMAP FPDFBitmap_CreateEx(int width, int height, BitmapFormats format, IntPtr first_scan, int stride);

    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_GetFormat), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern BitmapFormats FPDFBitmap_GetFormat(FPDF_BITMAP bitmap);

    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_FillRect), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFBitmap_FillRect(FPDF_BITMAP bitmap, int left, int top, int width, int height, FPDF_COLOR color);

    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_GetBuffer), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern IntPtr FPDFBitmap_GetBuffer(FPDF_BITMAP bitmap);

    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_GetWidth), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFBitmap_GetWidth(FPDF_BITMAP bitmap);

    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_GetHeight), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFBitmap_GetHeight(FPDF_BITMAP bitmap);

    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_GetStride), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFBitmap_GetStride(FPDF_BITMAP bitmap);

    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_Destroy), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFBitmap_Destroy(FPDF_BITMAP bitmap);

    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetPrintScaling), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDF_VIEWERREF_GetPrintScaling(FPDF_DOCUMENT document);

    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetNumCopies), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDF_VIEWERREF_GetNumCopies(FPDF_DOCUMENT document);

    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetPrintPageRange), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_PAGERANGE FPDF_VIEWERREF_GetPrintPageRange(FPDF_DOCUMENT document);

    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetPrintPageRangeCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern uint FPDF_VIEWERREF_GetPrintPageRangeCount(FPDF_PAGERANGE pagerange);

    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetPrintPageRangeElement), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDF_VIEWERREF_GetPrintPageRangeElement(FPDF_PAGERANGE pagerange, uint index);

    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetDuplex), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern DuplexTypes FPDF_VIEWERREF_GetDuplex(FPDF_DOCUMENT document);

    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetName), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern uint FPDF_VIEWERREF_GetName(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, uint length);

    [DllImport(DllName, EntryPoint = nameof(FPDF_CountNamedDests), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDF_CountNamedDests(FPDF_DOCUMENT document);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetNamedDestByName), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_DEST FPDF_GetNamedDestByName(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string name);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetNamedDest), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_DEST FPDF_GetNamedDest(FPDF_DOCUMENT document, int index, IntPtr buffer, out int buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetNamedDest), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_DEST FPDF_GetNamedDest(FPDF_DOCUMENT document, int index, ref byte buffer, ref int buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetRecommendedV8Flags), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern string FPDF_GetRecommendedV8Flags();

    [DllImport(DllName, EntryPoint = nameof(FPDFBookmark_GetFirstChild), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_BOOKMARK FPDFBookmark_GetFirstChild(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);

    [DllImport(DllName, EntryPoint = nameof(FPDFBookmark_GetNextSibling), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_BOOKMARK FPDFBookmark_GetNextSibling(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);

    [DllImport(DllName, EntryPoint = nameof(FPDFBookmark_GetTitle), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern uint FPDFBookmark_GetTitle(FPDF_BOOKMARK bookmark, ref byte buffer, uint buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDFBookmark_Find), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_BOOKMARK FPDFBookmark_Find(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPWStr)] string title);

    [DllImport(DllName, EntryPoint = nameof(FPDFBookmark_GetDest), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_DEST FPDFBookmark_GetDest(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);

    [DllImport(DllName, EntryPoint = nameof(FPDFBookmark_GetAction), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_ACTION FPDFBookmark_GetAction(FPDF_BOOKMARK bookmark);

    [DllImport(DllName, EntryPoint = nameof(FPDFAction_GetType), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern ActionTypes FPDFAction_GetType(FPDF_ACTION action);

    [DllImport(DllName, EntryPoint = nameof(FPDFAction_GetDest), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_DEST FPDFAction_GetDest(FPDF_DOCUMENT document, FPDF_ACTION action);

    [DllImport(DllName, EntryPoint = nameof(FPDFAction_GetFilePath), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern uint FPDFAction_GetFilePath(FPDF_ACTION action, ref byte buffer, uint buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDFAction_GetURIPath), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern uint FPDFAction_GetURIPath(FPDF_DOCUMENT document, FPDF_ACTION action, ref byte buffer, uint buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDFDest_GetDestPageIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFDest_GetDestPageIndex(FPDF_DOCUMENT document, FPDF_DEST dest);

    [DllImport(DllName, EntryPoint = nameof(FPDFDest_GetView), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern ZoomModes FPDFDest_GetView(FPDF_DEST dest, out uint pNumParams, float pParams);

    [DllImport(DllName, EntryPoint = nameof(FPDFDest_GetLocationInPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFDest_GetLocationInPage(FPDF_DEST dest, out bool hasXCoord, out bool hasYCoord, out bool hasZoom, out float x, out float y, out float zoom);

    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetLinkAtPoint), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_LINK FPDFLink_GetLinkAtPoint(FPDF_PAGE page, double x, double y);

    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetLinkZOrderAtPoint), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFLink_GetLinkZOrderAtPoint(FPDF_PAGE page, double x, double y);

    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetDest), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_DEST FPDFLink_GetDest(FPDF_DOCUMENT document, FPDF_LINK link);

    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetAction), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_ACTION FPDFLink_GetAction(FPDF_LINK link);

    [DllImport(DllName, EntryPoint = nameof(FPDFLink_Enumerate), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFLink_Enumerate(FPDF_PAGE page, ref int startPos, out FPDF_LINK linkAnnot);

    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetAnnotRect), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFLink_GetAnnotRect(FPDF_LINK linkAnnot, out FS_RECTF rect);

    [DllImport(DllName, EntryPoint = nameof(FPDFLink_CountQuadPoints), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFLink_CountQuadPoints(FPDF_LINK linkAnnot);

    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetQuadPoints), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFLink_GetQuadPoints(FPDF_LINK linkAnnot, int quadIndex, out FS_QUADPOINTSF quadPoints);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetMetaText), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern uint FPDF_GetMetaText(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string tag, ref byte buffer, uint buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageLabel), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern uint FPDF_GetPageLabel(FPDF_DOCUMENT document, int page_index, ref byte buffer, uint buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDF_CreateNewDocument), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_DOCUMENT FPDF_CreateNewDocument();

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_New), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_PAGE FPDFPage_New(FPDF_DOCUMENT document, int page_index, double width, double height);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_Delete), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFPage_Delete(FPDF_DOCUMENT document, int page_index);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetRotation), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern PageOrientations FPDFPage_GetRotation(FPDF_PAGE page);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_SetRotation), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFPage_SetRotation(FPDF_PAGE page, PageOrientations rotation);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_InsertObject), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFPage_InsertObject(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_RemoveObject), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPage_RemoveObject(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_CountObjects), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFPage_CountObjects(FPDF_PAGE page);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetObject), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_PAGEOBJECT FPDFPage_GetObject(FPDF_PAGE page, int index);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_HasTransparency), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPage_HasTransparency(FPDF_PAGE page);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GenerateContent), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPage_GenerateContent(FPDF_PAGE page);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_Destroy), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFPageObj_Destroy(FPDF_PAGEOBJECT page_obj);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_HasTransparency), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObj_HasTransparency(FPDF_PAGEOBJECT pageObject);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetType), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern PageObjTypes FPDFPageObj_GetType(FPDF_PAGEOBJECT page_object);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_Transform), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFPageObj_Transform(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_TransformAnnots), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFPage_TransformAnnots(FPDF_PAGE page, double a, double b, double c, double d, double e, double f);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_NewImageObj), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_PAGEOBJECT FPDFPageObj_NewImageObj(FPDF_DOCUMENT document);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_CountMarks), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFPageObj_CountMarks(FPDF_PAGEOBJECT page_object);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetMark), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_PAGEOBJECTMARK FPDFPageObj_GetMark(FPDF_PAGEOBJECT page_object, uint index);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_AddMark), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_PAGEOBJECTMARK FPDFPageObj_AddMark(FPDF_PAGEOBJECT page_object, [MarshalAs(UnmanagedType.LPStr)] string name);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_RemoveMark), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObj_RemoveMark(FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_GetName), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObjMark_GetName(FPDF_PAGEOBJECTMARK mark, ref byte buffer, uint buflen, out uint out_buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_CountParams), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFPageObjMark_CountParams(FPDF_PAGEOBJECTMARK mark);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_GetParamKey), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObjMark_GetParamKey(FPDF_PAGEOBJECTMARK mark, uint index, ref byte buffer, uint buflen, out uint out_buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_GetParamValueType), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern ObjectTypes FPDFPageObjMark_GetParamValueType(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_GetParamIntValue), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObjMark_GetParamIntValue(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, out int out_value);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_GetParamStringValue), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObjMark_GetParamStringValue(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, uint buflen, out uint out_buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_GetParamBlobValue), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObjMark_GetParamBlobValue(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, uint buflen, out uint out_buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_SetIntParam), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObjMark_SetIntParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, int value);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_SetStringParam), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObjMark_SetStringParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, [MarshalAs(UnmanagedType.LPStr)] string value);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_SetBlobParam), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObjMark_SetBlobParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte value, uint value_len);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_RemoveParam), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObjMark_RemoveParam(FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key);

    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_LoadJpegFile), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFImageObj_LoadJpegFile(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead);

    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_LoadJpegFileInline), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFImageObj_LoadJpegFileInline(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead);

    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_GetMatrix), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFImageObj_GetMatrix(FPDF_PAGEOBJECT image_object, out double a, out double b, out double c, out double d, out double e, out double f);

    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_SetMatrix), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFImageObj_SetMatrix(FPDF_PAGEOBJECT image_object, double a, double b, double c, double d, double e, double f);

    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_SetBitmap), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFImageObj_SetBitmap(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_BITMAP bitmap);

    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_GetBitmap), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_BITMAP FPDFImageObj_GetBitmap(FPDF_PAGEOBJECT image_object);

    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_GetImageDataDecoded), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern uint FPDFImageObj_GetImageDataDecoded(FPDF_PAGEOBJECT image_object, ref byte buffer, uint buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_GetImageDataRaw), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern uint FPDFImageObj_GetImageDataRaw(FPDF_PAGEOBJECT image_object, ref byte buffer, uint buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_GetImageFilterCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFImageObj_GetImageFilterCount(FPDF_PAGEOBJECT image_object);

    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_GetImageFilter), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern uint FPDFImageObj_GetImageFilter(FPDF_PAGEOBJECT image_object, int index, ref byte buffer, uint buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_GetImageMetadata), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFImageObj_GetImageMetadata(FPDF_PAGEOBJECT image_object, FPDF_PAGE page, out FPDF_IMAGEOBJ_METADATA metadata);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_CreatenewPath), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreatenewPath(float x, float y);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_CreatenewRect), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreatenewRect(float x, float y, float w, float h);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetBounds), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObj_GetBounds(FPDF_PAGEOBJECT page_object, out float left, out float bottom, out float right, out float top);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_SetBlendMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFPageObj_SetBlendMode(FPDF_PAGEOBJECT page_object, [MarshalAs(UnmanagedType.LPStr)] string blend_mode);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_SetStrokeColor), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObj_SetStrokeColor(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetStrokeColor), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObj_GetStrokeColor(FPDF_PAGEOBJECT page_object, out uint R, out uint G, out uint B, out uint A);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_SetStrokeWidth), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObj_SetStrokeWidth(FPDF_PAGEOBJECT page_object, float width);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetStrokeWidth), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObj_GetStrokeWidth(FPDF_PAGEOBJECT page_object, out float width);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetLineJoin), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFPageObj_GetLineJoin(FPDF_PAGEOBJECT page_object);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_SetLineJoin), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObj_SetLineJoin(FPDF_PAGEOBJECT page_object, int line_join);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetLineCap), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFPageObj_GetLineCap(FPDF_PAGEOBJECT page_object);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_SetLineCap), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObj_SetLineCap(FPDF_PAGEOBJECT page_object, int line_cap);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_SetFillColor), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObj_SetFillColor(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetFillColor), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPageObj_GetFillColor(FPDF_PAGEOBJECT page_object, out uint R, out uint G, out uint B, out uint A);

    [DllImport(DllName, EntryPoint = nameof(FPDFPath_CountSegments), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFPath_CountSegments(FPDF_PAGEOBJECT path);

    [DllImport(DllName, EntryPoint = nameof(FPDFPath_GetPathSegment), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_PATHSEGMENT FPDFPath_GetPathSegment(FPDF_PAGEOBJECT path, int index);

    [DllImport(DllName, EntryPoint = nameof(FPDFPathSegment_GetPoint), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPathSegment_GetPoint(FPDF_PATHSEGMENT segment, out float x, out float y);

    [DllImport(DllName, EntryPoint = nameof(FPDFPathSegment_GetType), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFPathSegment_GetType(FPDF_PATHSEGMENT segment);

    [DllImport(DllName, EntryPoint = nameof(FPDFPathSegment_GetClose), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPathSegment_GetClose(FPDF_PATHSEGMENT segment);

    [DllImport(DllName, EntryPoint = nameof(FPDFPath_MoveTo), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPath_MoveTo(FPDF_PAGEOBJECT path, float x, float y);

    [DllImport(DllName, EntryPoint = nameof(FPDFPath_LineTo), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPath_LineTo(FPDF_PAGEOBJECT path, float x, float y);

    [DllImport(DllName, EntryPoint = nameof(FPDFPath_BezierTo), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPath_BezierTo(FPDF_PAGEOBJECT path, float x1, float y1, float x2, float y2, float x3, float y3);

    [DllImport(DllName, EntryPoint = nameof(FPDFPath_Close), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPath_Close(FPDF_PAGEOBJECT path);

    [DllImport(DllName, EntryPoint = nameof(FPDFPath_SetDrawMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPath_SetDrawMode(FPDF_PAGEOBJECT path, PathFillModes fillmode, bool stroke);

    [DllImport(DllName, EntryPoint = nameof(FPDFPath_GetDrawMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPath_GetDrawMode(FPDF_PAGEOBJECT path, out PathFillModes fillmode, out bool stroke);

    [DllImport(DllName, EntryPoint = nameof(FPDFPath_GetMatrix), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPath_GetMatrix(FPDF_PAGEOBJECT path, FS_MATRIX matrix);

    [DllImport(DllName, EntryPoint = nameof(FPDFPath_SetMatrix), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPath_SetMatrix(FPDF_PAGEOBJECT path, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_NewTextObj), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_PAGEOBJECT FPDFPageObj_NewTextObj(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font, float font_size);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_SetText), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFText_SetText(FPDF_PAGEOBJECT text_object, [MarshalAs(UnmanagedType.LPWStr)] string text);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_LoadFont), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_FONT FPDFText_LoadFont(FPDF_DOCUMENT document, ref byte data, uint size, FontTypes font_type, bool cid);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_LoadStandardFont), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_FONT FPDFText_LoadStandardFont(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font);

    [DllImport(DllName, EntryPoint = nameof(FPDFTextObj_GetMatrix), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFTextObj_GetMatrix(FPDF_PAGEOBJECT text, FS_MATRIX matrix);

    [DllImport(DllName, EntryPoint = nameof(FPDFTextObj_GetFontSize), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern float FPDFTextObj_GetFontSize(FPDF_PAGEOBJECT text);

    [DllImport(DllName, EntryPoint = nameof(FPDFFont_Close), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFFont_Close(FPDF_FONT font);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_CreateTextObj), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreateTextObj(FPDF_DOCUMENT document, FPDF_FONT font, float font_size);

    [DllImport(DllName, EntryPoint = nameof(FPDFTextObj_GetTextRenderMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_TEXT_RENDERMODE FPDFTextObj_GetTextRenderMode(FPDF_PAGEOBJECT text);

    [DllImport(DllName, EntryPoint = nameof(FPDFTextObj_SetTextRenderMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFTextObj_SetTextRenderMode(FPDF_PAGEOBJECT text, FPDF_TEXT_RENDERMODE render_mode);

    [DllImport(DllName, EntryPoint = nameof(FPDFTextObj_GetFontName), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern uint FPDFTextObj_GetFontName(FPDF_PAGEOBJECT text, ref byte buffer, uint length);

    [DllImport(DllName, EntryPoint = nameof(FPDFTextObj_GetText), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern uint FPDFTextObj_GetText(FPDF_PAGEOBJECT text_object, FPDF_TEXTPAGE text_page, ref byte buffer, uint length);

    [DllImport(DllName, EntryPoint = nameof(FPDFFormObj_CountObjects), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFFormObj_CountObjects(FPDF_PAGEOBJECT form_object);

    [DllImport(DllName, EntryPoint = nameof(FPDFFormObj_GetObject), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_PAGEOBJECT FPDFFormObj_GetObject(FPDF_PAGEOBJECT form_object, uint index);

    [DllImport(DllName, EntryPoint = nameof(FPDFFormObj_GetMatrix), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFFormObj_GetMatrix(FPDF_PAGEOBJECT form_object, FS_MATRIX matrix);

    [DllImport(DllName, EntryPoint = nameof(FPDFDoc_GetPageMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern PageModes FPDFDoc_GetPageMode(FPDF_DOCUMENT document);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_Flatten), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FlattenResults FPDFPage_Flatten(FPDF_PAGE page, FlattenFlags nFlag);

    [DllImport(DllName, EntryPoint = nameof(FPDF_ImportPages), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDF_ImportPages(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, [MarshalAs(UnmanagedType.LPStr)] string pagerange, int index);

    [DllImport(DllName, EntryPoint = nameof(FPDF_ImportNPagesToOne), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_DOCUMENT FPDF_ImportNPagesToOne(FPDF_DOCUMENT src_doc, float output_width, float output_height, int num_pages_on_x_axis, int num_pages_on_y_axis);

    [DllImport(DllName, EntryPoint = nameof(FPDF_CopyViewerPreferences), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDF_CopyViewerPreferences(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc);

    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPageBitmap_Start), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern RenderingStatus FPDF_RenderPageBitmap_Start(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags, IFSDK_PAUSE pause);

    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPage_Continue), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern RenderingStatus FPDF_RenderPage_Continue(FPDF_PAGE page, IFSDK_PAUSE pause);

    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPage_Close), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDF_RenderPage_Close(FPDF_PAGE page);

    [DllImport(DllName, EntryPoint = nameof(FPDF_SaveAsCopy), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDF_SaveAsCopy(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags);

    [DllImport(DllName, EntryPoint = nameof(FPDF_SaveWithVersion), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDF_SaveWithVersion(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags, int fileVersion);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetCharIndexFromTextIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFText_GetCharIndexFromTextIndex(FPDF_TEXTPAGE text_page, int nTextIndex);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetTextIndexFromCharIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFText_GetTextIndexFromCharIndex(FPDF_TEXTPAGE text_page, int nCharIndex);

    [DllImport(DllName, EntryPoint = nameof(FPDF_StructTree_GetForPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_STRUCTTREE FPDF_StructTree_GetForPage(FPDF_PAGE page);

    [DllImport(DllName, EntryPoint = nameof(FPDF_StructTree_Close), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDF_StructTree_Close(FPDF_STRUCTTREE struct_tree);

    [DllImport(DllName, EntryPoint = nameof(FPDF_StructTree_CountChildren), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDF_StructTree_CountChildren(FPDF_STRUCTTREE struct_tree);

    [DllImport(DllName, EntryPoint = nameof(FPDF_StructTree_GetChildAtIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_STRUCTELEMENT FPDF_StructTree_GetChildAtIndex(FPDF_STRUCTTREE struct_tree, int index);

    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetAltText), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern uint FPDF_StructElement_GetAltText(FPDF_STRUCTELEMENT struct_element, ref byte buffer, uint buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetMarkedContentID), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDF_StructElement_GetMarkedContentID(FPDF_STRUCTELEMENT struct_element);

    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetType), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern uint FPDF_StructElement_GetType(FPDF_STRUCTELEMENT struct_element, ref byte buffer, uint buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetTitle), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern uint FPDF_StructElement_GetTitle(FPDF_STRUCTELEMENT struct_element, ref byte buffer, uint buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_CountChildren), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDF_StructElement_CountChildren(FPDF_STRUCTELEMENT struct_element);

	/// <summary>
	///	dsflkdsjf;lksdjf;sdlakj
	/// </summary>
	/// <param name="struct_element"></param>
	/// <param name="index"></param>
	/// <returns></returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetChildAtIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_STRUCTELEMENT FPDF_StructElement_GetChildAtIndex(FPDF_STRUCTELEMENT struct_element, int index);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_LoadPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_TEXTPAGE FPDFText_LoadPage(FPDF_PAGE page);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_ClosePage), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFText_ClosePage(FPDF_TEXTPAGE text_page);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_CountChars), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFText_CountChars(FPDF_TEXTPAGE text_page);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetUnicode), SetLastError = true), SuppressUnmanagedCodeSecurity]
			[return: MarshalAs(UnmanagedType.U4)]
	internal static extern char FPDFText_GetUnicode(FPDF_TEXTPAGE text_page, int index);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetFontSize), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern double FPDFText_GetFontSize(FPDF_TEXTPAGE text_page, int index);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetFontInfo), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern uint FPDFText_GetFontInfo(FPDF_TEXTPAGE text_page, int index, ref byte buffer, uint buflen, out int flags);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetFontWeight), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFText_GetFontWeight(FPDF_TEXTPAGE text_page, int index);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetTextRenderMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_TEXT_RENDERMODE FPDFText_GetTextRenderMode(FPDF_TEXTPAGE text_page, int index);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetFillColor), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFText_GetFillColor(FPDF_TEXTPAGE text_page, int index, out uint R, out uint G, out uint B, out uint A);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetStrokeColor), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFText_GetStrokeColor(FPDF_TEXTPAGE text_page, int index, out uint R, out uint G, out uint B, out uint A);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetCharAngle), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern float FPDFText_GetCharAngle(FPDF_TEXTPAGE text_page, int index);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetCharBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFText_GetCharBox(FPDF_TEXTPAGE text_page, int index, out double left, out double right, out double bottom, out double top);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetLooseCharBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFText_GetLooseCharBox(FPDF_TEXTPAGE text_page, int index, FS_RECTF rect);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetMatrix), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFText_GetMatrix(FPDF_TEXTPAGE text_page, int index, FS_MATRIX matrix);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetCharOrigin), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFText_GetCharOrigin(FPDF_TEXTPAGE text_page, int index, out double x, out double y);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetCharIndexAtPos), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFText_GetCharIndexAtPos(FPDF_TEXTPAGE text_page, double x, double y, double xTolerance, double yTolerance);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetText), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFText_GetText(FPDF_TEXTPAGE text_page, int start_index, int count, ref byte result);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_CountRects), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFText_CountRects(FPDF_TEXTPAGE text_page, int start_index, int count);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetRect), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFText_GetRect(FPDF_TEXTPAGE text_page, int rect_index, out double left, out double top, out double right, out double bottom);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetBoundedText), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFText_GetBoundedText(FPDF_TEXTPAGE text_page, double left, double top, double right, double bottom, ref byte buffer, int buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_FindStart), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_SCHHANDLE FPDFText_FindStart(FPDF_TEXTPAGE text_page, [MarshalAs(UnmanagedType.LPWStr)] string findwhat, SearchFlags flags, int start_index);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_FindNext), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFText_FindNext(FPDF_SCHHANDLE handle);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_FindPrev), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFText_FindPrev(FPDF_SCHHANDLE handle);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetSchResultIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFText_GetSchResultIndex(FPDF_SCHHANDLE handle);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetSchCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFText_GetSchCount(FPDF_SCHHANDLE handle);

    [DllImport(DllName, EntryPoint = nameof(FPDFText_FindClose), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFText_FindClose(FPDF_SCHHANDLE handle);

    [DllImport(DllName, EntryPoint = nameof(FPDFLink_LoadWebLinks), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_PAGELINK FPDFLink_LoadWebLinks(FPDF_TEXTPAGE text_page);

    [DllImport(DllName, EntryPoint = nameof(FPDFLink_CountWebLinks), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFLink_CountWebLinks(FPDF_PAGELINK link_page);

    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetURL), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFLink_GetURL(FPDF_PAGELINK link_page, int link_index, ref byte buffer, int buflen);

    [DllImport(DllName, EntryPoint = nameof(FPDFLink_CountRects), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFLink_CountRects(FPDF_PAGELINK link_page, int link_index);

    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetRect), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFLink_GetRect(FPDF_PAGELINK link_page, int link_index, int rect_index, out double left, out double top, out double right, out double bottom);

    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetTextRange), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFLink_GetTextRange(FPDF_PAGELINK link_page, int link_index, out int start_char_index, out int char_count);

    [DllImport(DllName, EntryPoint = nameof(FPDFLink_CloseWebLinks), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFLink_CloseWebLinks(FPDF_PAGELINK link_page);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_SetMediaBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFPage_SetMediaBox(FPDF_PAGE page, float left, float bottom, float right, float top);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_SetCropBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFPage_SetCropBox(FPDF_PAGE page, float left, float bottom, float right, float top);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_SetBleedBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFPage_SetBleedBox(FPDF_PAGE page, float left, float bottom, float right, float top);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_SetTrimBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFPage_SetTrimBox(FPDF_PAGE page, float left, float bottom, float right, float top);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_SetArtBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFPage_SetArtBox(FPDF_PAGE page, float left, float bottom, float right, float top);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetMediaBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPage_GetMediaBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetCropBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPage_GetCropBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetBleedBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPage_GetBleedBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetTrimBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPage_GetTrimBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetArtBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPage_GetArtBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_TransFormWithClip), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern bool FPDFPage_TransFormWithClip(FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipRect);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_TransformClipPath), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFPageObj_TransformClipPath(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f);

    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetClipPath), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_CLIPPATH FPDFPageObj_GetClipPath(FPDF_PAGEOBJECT page_object);

    [DllImport(DllName, EntryPoint = nameof(FPDFClipPath_CountPaths), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFClipPath_CountPaths(FPDF_CLIPPATH clip_path);

    [DllImport(DllName, EntryPoint = nameof(FPDFClipPath_CountPathSegments), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern int FPDFClipPath_CountPathSegments(FPDF_CLIPPATH clip_path, int path_index);

    [DllImport(DllName, EntryPoint = nameof(FPDFClipPath_GetPathSegment), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_PATHSEGMENT FPDFClipPath_GetPathSegment(FPDF_CLIPPATH clip_path, int path_index, int segment_index);

    [DllImport(DllName, EntryPoint = nameof(FPDF_CreateClipPath), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern FPDF_CLIPPATH FPDF_CreateClipPath(float left, float bottom, float right, float top);

    [DllImport(DllName, EntryPoint = nameof(FPDF_DestroyClipPath), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDF_DestroyClipPath(FPDF_CLIPPATH clipPath);

    [DllImport(DllName, EntryPoint = nameof(FPDFPage_InsertClipPath), SetLastError = true), SuppressUnmanagedCodeSecurity]
	internal static extern void FPDFPage_InsertClipPath(FPDF_PAGE page, FPDF_CLIPPATH clipPath);

}
