
using System;
using System.Runtime.InteropServices;
using System.Runtime.ExceptionServices;
using System.Security;
using System.Threading;
using PdfLibCore.Types;
using PdfLibCore.Enums;

/*
This file is part of PdfLibCore, a wrapper around the PDFium library for the .NET.
Inspired by the awesome work of PDFiumSharp by Tobias Meyer.

Copyright (C) 2021 Jan Baarsssen
License: Microsoft Reciprocal License (MS-RL)
*/

// AUTOGENERATED FILE - 03-05-2023 (12:05:58)
// DO NOT MODIFY

namespace PdfLibCore;

public static partial class Pdfium
{
	/// <include file="Pdfium.xml" path="Documentation/FPDF_InitLibrary/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDF_InitLibrary()
	{
		Execute(() => PlatformInvoke.FPDF_InitLibrary());
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_InitLibraryWithConfig/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDF_InitLibraryWithConfig(ref FPDF_LIBRARY_CONFIG config)
	{
		var configRef = config;
		Execute(() => PlatformInvoke.FPDF_InitLibraryWithConfig(ref configRef));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_DestroyLibrary/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDF_DestroyLibrary()
	{
		Execute(() => PlatformInvoke.FPDF_DestroyLibrary());
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_SetSandBoxPolicy/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDF_SetSandBoxPolicy(int policy, bool enable)
	{
		Execute(() => PlatformInvoke.FPDF_SetSandBoxPolicy(policy, enable));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_SetPrintTextWithGDI/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDF_SetPrintTextWithGDI(bool use_gdi)
	{
		Execute(() => PlatformInvoke.FPDF_SetPrintTextWithGDI(use_gdi));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_SetPrintMode/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDF_SetPrintMode(int mode)
	{
		return Execute(() => PlatformInvoke.FPDF_SetPrintMode(mode));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_LoadDocument/*" />
		/// <seealso cref='PdfDocument(string, string)'/>
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_DOCUMENT FPDF_LoadDocument([MarshalAs(UnmanagedType.LPStr)] string file_path, [MarshalAs(UnmanagedType.LPStr)] string password)
	{
		return Execute(() => PlatformInvoke.FPDF_LoadDocument(file_path, password));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_LoadMemDocument/*" />
		/// <seealso cref='PdfDocument(byte[], int, int, string)'/>
    [HandleProcessCorruptedStateExceptions]
	private static FPDF_DOCUMENT FPDF_LoadMemDocument(ref byte data_buf, int size, [MarshalAs(UnmanagedType.LPStr)] string password)
	{
		var data_bufRef = data_buf;
		return Execute(() => PlatformInvoke.FPDF_LoadMemDocument(ref data_bufRef, size, password));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_LoadCustomDocument/*" />
		/// <seealso cref='PdfDocument(System.IO.Stream, string)'/>
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_DOCUMENT FPDF_LoadCustomDocument(FPDF_FILEREAD fileRead, [MarshalAs(UnmanagedType.LPStr)] string password)
	{
		return Execute(() => PlatformInvoke.FPDF_LoadCustomDocument(fileRead, password));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetFileVersion/*" />
		/// <seealso cref='PdfDocument.FileVersion'/>
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDF_GetFileVersion(FPDF_DOCUMENT doc, out int fileVersion)
	{
		int fileVersionOut = default;
		var result = Execute(() => PlatformInvoke.FPDF_GetFileVersion(doc, out fileVersionOut));
		fileVersion = fileVersionOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetLastError/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_ERR FPDF_GetLastError()
	{
		return Execute(() => PlatformInvoke.FPDF_GetLastError());
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_DocumentHasValidCrossReferenceTable/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDF_DocumentHasValidCrossReferenceTable(FPDF_DOCUMENT document)
	{
		return Execute(() => PlatformInvoke.FPDF_DocumentHasValidCrossReferenceTable(document));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetTrailerEnds/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDF_GetTrailerEnds(FPDF_DOCUMENT document, byte[] buffer, int length)
	{
		return Execute(() => PlatformInvoke.FPDF_GetTrailerEnds(document, buffer, length));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetDocPermissions/*" />
		/// <seealso cref='PdfDocument.Permissions'/>
    [HandleProcessCorruptedStateExceptions]
	public static DocumentPermissions FPDF_GetDocPermissions(FPDF_DOCUMENT document)
	{
		return Execute(() => PlatformInvoke.FPDF_GetDocPermissions(document));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetSecurityHandlerRevision/*" />
		/// <seealso cref='PdfDocument.SecurityHandlerRevision'/>
    [HandleProcessCorruptedStateExceptions]
	public static int FPDF_GetSecurityHandlerRevision(FPDF_DOCUMENT document)
	{
		return Execute(() => PlatformInvoke.FPDF_GetSecurityHandlerRevision(document));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageCount/*" />
		/// <seealso cref='PdfPageCollection.Count'/>
		/// <seealso cref='PdfDocument.Pages'/>
    [HandleProcessCorruptedStateExceptions]
	public static int FPDF_GetPageCount(FPDF_DOCUMENT document)
	{
		return Execute(() => PlatformInvoke.FPDF_GetPageCount(document));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_LoadPage/*" />
		/// <seealso cref='PdfPageCollection'/>
		/// <seealso cref='PdfDocument.Pages'/>
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_PAGE FPDF_LoadPage(FPDF_DOCUMENT document, int page_index)
	{
		return Execute(() => PlatformInvoke.FPDF_LoadPage(document, page_index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageWidthF/*" />
    [HandleProcessCorruptedStateExceptions]
	public static float FPDF_GetPageWidthF(FPDF_PAGE page)
	{
		return Execute(() => PlatformInvoke.FPDF_GetPageWidthF(page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageWidth/*" />
		/// <seealso cref='PdfPage.Width'/>
    [HandleProcessCorruptedStateExceptions]
	public static double FPDF_GetPageWidth(FPDF_PAGE page)
	{
		return Execute(() => PlatformInvoke.FPDF_GetPageWidth(page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageHeightF/*" />
    [HandleProcessCorruptedStateExceptions]
	public static float FPDF_GetPageHeightF(FPDF_PAGE page)
	{
		return Execute(() => PlatformInvoke.FPDF_GetPageHeightF(page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageHeight/*" />
		/// <seealso cref='PdfPage.Height'/>
    [HandleProcessCorruptedStateExceptions]
	public static double FPDF_GetPageHeight(FPDF_PAGE page)
	{
		return Execute(() => PlatformInvoke.FPDF_GetPageHeight(page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageBoundingBox/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDF_GetPageBoundingBox(FPDF_PAGE page, FS_RECTF rect)
	{
		return Execute(() => PlatformInvoke.FPDF_GetPageBoundingBox(page, rect));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageSizeByIndexF/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDF_GetPageSizeByIndexF(FPDF_DOCUMENT document, int index, FS_SIZEF size)
	{
		return Execute(() => PlatformInvoke.FPDF_GetPageSizeByIndexF(document, index, size));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageSizeByIndex/*" />
		/// <seealso cref='PdfPage.Size'/>
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDF_GetPageSizeByIndex(FPDF_DOCUMENT document, int index, out double width, out double height)
	{
		double widthOut = default;
		double heightOut = default;
		var result = Execute(() => PlatformInvoke.FPDF_GetPageSizeByIndex(document, index, out widthOut, out heightOut));
		width = widthOut;
		height = heightOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_RenderPageBitmap/*" />
		/// <seealso cref='PdfPage.Render(PdfLibCore.PdfiumBitmap,PdfLibCore.Enums.PageOrientations,PdfLibCore.Enums.RenderingFlags)'/>
    [HandleProcessCorruptedStateExceptions]
	public static void FPDF_RenderPageBitmap(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags)
	{
		Execute(() => PlatformInvoke.FPDF_RenderPageBitmap(bitmap, page, start_x, start_y, size_x, size_y, rotate, flags));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_RenderPage/*" />
		/// <seealso cref='PdfPage.Render(PdfLibCore.PdfiumBitmap,PdfLibCore.Enums.PageOrientations,PdfLibCore.Enums.RenderingFlags)'/>
    [HandleProcessCorruptedStateExceptions]
	public static void FPDF_RenderPage(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags)
	{
		Execute(() => PlatformInvoke.FPDF_RenderPage(bitmap, page, start_x, start_y, size_x, size_y, rotate, flags));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_RenderPageBitmapWithMatrix/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDF_RenderPageBitmapWithMatrix(FPDF_BITMAP bitmap, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipping, RenderingFlags flags)
	{
		Execute(() => PlatformInvoke.FPDF_RenderPageBitmapWithMatrix(bitmap, page, matrix, clipping, flags));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_RenderPageSkp/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_RECORDER FPDF_RenderPageSkp(FPDF_PAGE page, int size_x, int size_y)
	{
		return Execute(() => PlatformInvoke.FPDF_RenderPageSkp(page, size_x, size_y));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_ClosePage/*" />
		/// <seealso cref='PdfDocument.Close'/>
    [HandleProcessCorruptedStateExceptions]
	public static void FPDF_ClosePage(FPDF_PAGE page)
	{
		Execute(() => PlatformInvoke.FPDF_ClosePage(page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_CloseDocument/*" />
		/// <seealso cref='PdfDocument.Close'/>
    [HandleProcessCorruptedStateExceptions]
	public static void FPDF_CloseDocument(FPDF_DOCUMENT document)
	{
		Execute(() => PlatformInvoke.FPDF_CloseDocument(document));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_DeviceToPage/*" />
		/// <seealso cref='PdfPage.DeviceToPage'/>
    [HandleProcessCorruptedStateExceptions]
	public static void FPDF_DeviceToPage(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, int device_x, int device_y, out double page_x, out double page_y)
	{
		double page_xOut = default;
		double page_yOut = default;
		Execute(() => PlatformInvoke.FPDF_DeviceToPage(page, start_x, start_y, size_x, size_y, rotate, device_x, device_y, out page_xOut, out page_yOut));
		page_x = page_xOut;
		page_y = page_yOut;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_PageToDevice/*" />
		/// <seealso cref='PdfPage.PageToDevice'/>
    [HandleProcessCorruptedStateExceptions]
	public static void FPDF_PageToDevice(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, double page_x, double page_y, out int device_x, out int device_y)
	{
		int device_xOut = default;
		int device_yOut = default;
		Execute(() => PlatformInvoke.FPDF_PageToDevice(page, start_x, start_y, size_x, size_y, rotate, page_x, page_y, out device_xOut, out device_yOut));
		device_x = device_xOut;
		device_y = device_yOut;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_Create/*" />
		/// <seealso cref='PdfiumBitmap(int, int, bool)'/>
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_BITMAP FPDFBitmap_Create(int width, int height, bool hasAlpha)
	{
		return Execute(() => PlatformInvoke.FPDFBitmap_Create(width, height, hasAlpha));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_CreateEx/*" />
		/// <seealso cref='PdfiumBitmap(int, int, BitmapFormats, IntPtr, int)'/>
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_BITMAP FPDFBitmap_CreateEx(int width, int height, BitmapFormats format, IntPtr first_scan, int stride)
	{
		return Execute(() => PlatformInvoke.FPDFBitmap_CreateEx(width, height, format, first_scan, stride));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_GetFormat/*" />
    [HandleProcessCorruptedStateExceptions]
	public static BitmapFormats FPDFBitmap_GetFormat(FPDF_BITMAP bitmap)
	{
		return Execute(() => PlatformInvoke.FPDFBitmap_GetFormat(bitmap));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_FillRect/*" />
		/// <seealso cref='PdfiumBitmap.FillRectangle(int, int, int, int, FPDF_COLOR)'/>
		/// <seealso cref='PdfiumBitmap.Fill(FPDF_COLOR)'/>
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFBitmap_FillRect(FPDF_BITMAP bitmap, int left, int top, int width, int height, FPDF_COLOR color)
	{
		Execute(() => PlatformInvoke.FPDFBitmap_FillRect(bitmap, left, top, width, height, color));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_GetBuffer/*" />
		/// <seealso cref='PdfiumBitmap.Scan0'/>
    [HandleProcessCorruptedStateExceptions]
	public static IntPtr FPDFBitmap_GetBuffer(FPDF_BITMAP bitmap)
	{
		return Execute(() => PlatformInvoke.FPDFBitmap_GetBuffer(bitmap));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_GetWidth/*" />
		/// <seealso cref='PdfiumBitmap.Width'/>
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFBitmap_GetWidth(FPDF_BITMAP bitmap)
	{
		return Execute(() => PlatformInvoke.FPDFBitmap_GetWidth(bitmap));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_GetHeight/*" />
		/// <seealso cref='PdfiumBitmap.Height'/>
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFBitmap_GetHeight(FPDF_BITMAP bitmap)
	{
		return Execute(() => PlatformInvoke.FPDFBitmap_GetHeight(bitmap));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_GetStride/*" />
		/// <seealso cref='PdfiumBitmap.Stride'/>
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFBitmap_GetStride(FPDF_BITMAP bitmap)
	{
		return Execute(() => PlatformInvoke.FPDFBitmap_GetStride(bitmap));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_Destroy/*" />
		/// <seealso cref='PdfiumBitmap.Dispose()'/>
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFBitmap_Destroy(FPDF_BITMAP bitmap)
	{
		Execute(() => PlatformInvoke.FPDFBitmap_Destroy(bitmap));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_VIEWERREF_GetPrintScaling/*" />
		/// <seealso cref='PdfDocument.PrintPrefersScaling'/>
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDF_VIEWERREF_GetPrintScaling(FPDF_DOCUMENT document)
	{
		return Execute(() => PlatformInvoke.FPDF_VIEWERREF_GetPrintScaling(document));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_VIEWERREF_GetNumCopies/*" />
		/// <seealso cref='PdfDocument.PrintCopyCount'/>
    [HandleProcessCorruptedStateExceptions]
	public static int FPDF_VIEWERREF_GetNumCopies(FPDF_DOCUMENT document)
	{
		return Execute(() => PlatformInvoke.FPDF_VIEWERREF_GetNumCopies(document));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_VIEWERREF_GetPrintPageRange/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_PAGERANGE FPDF_VIEWERREF_GetPrintPageRange(FPDF_DOCUMENT document)
	{
		return Execute(() => PlatformInvoke.FPDF_VIEWERREF_GetPrintPageRange(document));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_VIEWERREF_GetPrintPageRangeCount/*" />
    [HandleProcessCorruptedStateExceptions]
	public static uint FPDF_VIEWERREF_GetPrintPageRangeCount(FPDF_PAGERANGE pagerange)
	{
		return Execute(() => PlatformInvoke.FPDF_VIEWERREF_GetPrintPageRangeCount(pagerange));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_VIEWERREF_GetPrintPageRangeElement/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDF_VIEWERREF_GetPrintPageRangeElement(FPDF_PAGERANGE pagerange, uint index)
	{
		return Execute(() => PlatformInvoke.FPDF_VIEWERREF_GetPrintPageRangeElement(pagerange, index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_VIEWERREF_GetDuplex/*" />
		/// <seealso cref='PdfDocument.DuplexType'/>
    [HandleProcessCorruptedStateExceptions]
	public static DuplexTypes FPDF_VIEWERREF_GetDuplex(FPDF_DOCUMENT document)
	{
		return Execute(() => PlatformInvoke.FPDF_VIEWERREF_GetDuplex(document));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_VIEWERREF_GetName/*" />
    [HandleProcessCorruptedStateExceptions]
	private static uint FPDF_VIEWERREF_GetName(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, uint length)
	{
		var bufferRef = buffer;
		return Execute(() => PlatformInvoke.FPDF_VIEWERREF_GetName(document, key, ref bufferRef, length));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_CountNamedDests/*" />
		/// <seealso cref='PdfDestinationCollection.Count'/>
		/// <seealso cref='PdfDocument.Destinations'/>
    [HandleProcessCorruptedStateExceptions]
	public static int FPDF_CountNamedDests(FPDF_DOCUMENT document)
	{
		return Execute(() => PlatformInvoke.FPDF_CountNamedDests(document));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetNamedDestByName/*" />
		/// <seealso cref='PdfDestinationCollection'/>
		/// <seealso cref='PdfDocument.Destinations'/>
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_DEST FPDF_GetNamedDestByName(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string name)
	{
		return Execute(() => PlatformInvoke.FPDF_GetNamedDestByName(document, name));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetNamedDest/*" />
		/// <seealso cref='Pdfium.FPDF_GetNamedDest(FPDF_DOCUMENT, int)'/>
    [HandleProcessCorruptedStateExceptions]
	private static FPDF_DEST FPDF_GetNamedDest(FPDF_DOCUMENT document, int index, IntPtr buffer, out int buflen)
	{
		int buflenOut = default;
		var result = Execute(() => PlatformInvoke.FPDF_GetNamedDest(document, index, buffer, out buflenOut));
		buflen = buflenOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetNamedDest/*" />
		/// <seealso cref='Pdfium.FPDF_GetNamedDest(FPDF_DOCUMENT, int)'/>
    [HandleProcessCorruptedStateExceptions]
	private static FPDF_DEST FPDF_GetNamedDest(FPDF_DOCUMENT document, int index, ref byte buffer, ref int buflen)
	{
		var bufferRef = buffer;
		var buflenRef = buflen;
		return Execute(() => PlatformInvoke.FPDF_GetNamedDest(document, index, ref bufferRef, ref buflenRef));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetRecommendedV8Flags/*" />
    [HandleProcessCorruptedStateExceptions]
	public static string FPDF_GetRecommendedV8Flags()
	{
		return Execute(() => PlatformInvoke.FPDF_GetRecommendedV8Flags());
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFBookmark_GetFirstChild/*" />
		/// <seealso cref='PdfDocument.Bookmarks'/>
		/// <seealso cref='PdfBookmark.Children'/>
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_BOOKMARK FPDFBookmark_GetFirstChild(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark)
	{
		return Execute(() => PlatformInvoke.FPDFBookmark_GetFirstChild(document, bookmark));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFBookmark_GetNextSibling/*" />
		/// <seealso cref='PdfDocument.Bookmarks'/>
		/// <seealso cref='PdfBookmark.Children'/>
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_BOOKMARK FPDFBookmark_GetNextSibling(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark)
	{
		return Execute(() => PlatformInvoke.FPDFBookmark_GetNextSibling(document, bookmark));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFBookmark_GetTitle/*" />
		/// <seealso cref='Pdfium.FPDFBookmark_GetTitle(FPDF_BOOKMARK)'/>
    [HandleProcessCorruptedStateExceptions]
	private static uint FPDFBookmark_GetTitle(FPDF_BOOKMARK bookmark, ref byte buffer, uint buflen)
	{
		var bufferRef = buffer;
		return Execute(() => PlatformInvoke.FPDFBookmark_GetTitle(bookmark, ref bufferRef, buflen));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFBookmark_Find/*" />
		/// <seealso cref='PdfDocument.FindBookmark(string)'/>
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_BOOKMARK FPDFBookmark_Find(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPWStr)] string title)
	{
		return Execute(() => PlatformInvoke.FPDFBookmark_Find(document, title));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFBookmark_GetDest/*" />
		/// <seealso cref='PdfBookmark.Destination'/>
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_DEST FPDFBookmark_GetDest(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark)
	{
		return Execute(() => PlatformInvoke.FPDFBookmark_GetDest(document, bookmark));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFBookmark_GetAction/*" />
		/// <seealso cref='PdfBookmark.Action'/>
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_ACTION FPDFBookmark_GetAction(FPDF_BOOKMARK bookmark)
	{
		return Execute(() => PlatformInvoke.FPDFBookmark_GetAction(bookmark));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFAction_GetType/*" />
		/// <seealso cref='PdfAction.Type'/>
    [HandleProcessCorruptedStateExceptions]
	public static ActionTypes FPDFAction_GetType(FPDF_ACTION action)
	{
		return Execute(() => PlatformInvoke.FPDFAction_GetType(action));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFAction_GetDest/*" />
		/// <seealso cref='PdfAction.Destination'/>
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_DEST FPDFAction_GetDest(FPDF_DOCUMENT document, FPDF_ACTION action)
	{
		return Execute(() => PlatformInvoke.FPDFAction_GetDest(document, action));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFAction_GetFilePath/*" />
		/// <seealso cref='Pdfium.FPDFAction_GetFilePath(FPDF_ACTION)'/>
    [HandleProcessCorruptedStateExceptions]
	private static uint FPDFAction_GetFilePath(FPDF_ACTION action, ref byte buffer, uint buflen)
	{
		var bufferRef = buffer;
		return Execute(() => PlatformInvoke.FPDFAction_GetFilePath(action, ref bufferRef, buflen));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFAction_GetURIPath/*" />
		/// <seealso cref='Pdfium.FPDFAction_GetURIPath(FPDF_DOCUMENT, FPDF_ACTION)'/>
    [HandleProcessCorruptedStateExceptions]
	private static uint FPDFAction_GetURIPath(FPDF_DOCUMENT document, FPDF_ACTION action, ref byte buffer, uint buflen)
	{
		var bufferRef = buffer;
		return Execute(() => PlatformInvoke.FPDFAction_GetURIPath(document, action, ref bufferRef, buflen));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFDest_GetDestPageIndex/*" />
		/// <seealso cref='PdfDestination.PageIndex'/>
		/// <seealso cref='PdfDocument.Destinations'/>
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFDest_GetDestPageIndex(FPDF_DOCUMENT document, FPDF_DEST dest)
	{
		return Execute(() => PlatformInvoke.FPDFDest_GetDestPageIndex(document, dest));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFDest_GetView/*" />
    [HandleProcessCorruptedStateExceptions]
	public static ZoomModes FPDFDest_GetView(FPDF_DEST dest, out uint pNumParams, float pParams)
	{
		uint pNumParamsOut = default;
		var result = Execute(() => PlatformInvoke.FPDFDest_GetView(dest, out pNumParamsOut, pParams));
		pNumParams = pNumParamsOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFDest_GetLocationInPage/*" />
		/// <seealso cref='PdfDestination.LocationInPage'/>
		/// <seealso cref='PdfDocument.Destinations'/>
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFDest_GetLocationInPage(FPDF_DEST dest, out bool hasXCoord, out bool hasYCoord, out bool hasZoom, out float x, out float y, out float zoom)
	{
		bool hasXCoordOut = default;
		bool hasYCoordOut = default;
		bool hasZoomOut = default;
		float xOut = default;
		float yOut = default;
		float zoomOut = default;
		var result = Execute(() => PlatformInvoke.FPDFDest_GetLocationInPage(dest, out hasXCoordOut, out hasYCoordOut, out hasZoomOut, out xOut, out yOut, out zoomOut));
		hasXCoord = hasXCoordOut;
		hasYCoord = hasYCoordOut;
		hasZoom = hasZoomOut;
		x = xOut;
		y = yOut;
		zoom = zoomOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetLinkAtPoint/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_LINK FPDFLink_GetLinkAtPoint(FPDF_PAGE page, double x, double y)
	{
		return Execute(() => PlatformInvoke.FPDFLink_GetLinkAtPoint(page, x, y));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetLinkZOrderAtPoint/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFLink_GetLinkZOrderAtPoint(FPDF_PAGE page, double x, double y)
	{
		return Execute(() => PlatformInvoke.FPDFLink_GetLinkZOrderAtPoint(page, x, y));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetDest/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_DEST FPDFLink_GetDest(FPDF_DOCUMENT document, FPDF_LINK link)
	{
		return Execute(() => PlatformInvoke.FPDFLink_GetDest(document, link));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetAction/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_ACTION FPDFLink_GetAction(FPDF_LINK link)
	{
		return Execute(() => PlatformInvoke.FPDFLink_GetAction(link));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFLink_Enumerate/*" />
    [HandleProcessCorruptedStateExceptions]
	private static bool FPDFLink_Enumerate(FPDF_PAGE page, ref int startPos, out FPDF_LINK linkAnnot)
	{
		var startPosRef = startPos;
		FPDF_LINK linkAnnotOut = default;
		var result = Execute(() => PlatformInvoke.FPDFLink_Enumerate(page, ref startPosRef, out linkAnnotOut));
		linkAnnot = linkAnnotOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetAnnotRect/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFLink_GetAnnotRect(FPDF_LINK linkAnnot, out FS_RECTF rect)
	{
		FS_RECTF rectOut = default;
		var result = Execute(() => PlatformInvoke.FPDFLink_GetAnnotRect(linkAnnot, out rectOut));
		rect = rectOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFLink_CountQuadPoints/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFLink_CountQuadPoints(FPDF_LINK linkAnnot)
	{
		return Execute(() => PlatformInvoke.FPDFLink_CountQuadPoints(linkAnnot));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetQuadPoints/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFLink_GetQuadPoints(FPDF_LINK linkAnnot, int quadIndex, out FS_QUADPOINTSF quadPoints)
	{
		FS_QUADPOINTSF quadPointsOut = default;
		var result = Execute(() => PlatformInvoke.FPDFLink_GetQuadPoints(linkAnnot, quadIndex, out quadPointsOut));
		quadPoints = quadPointsOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetMetaText/*" />
		/// <seealso cref='Pdfium.FPDF_GetMetaText(FPDF_DOCUMENT, string)'/>
		/// <seealso cref='Pdfium.FPDF_GetMetaText(FPDF_DOCUMENT, MetadataTags)'/>
    [HandleProcessCorruptedStateExceptions]
	public static uint FPDF_GetMetaText(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string tag, ref byte buffer, uint buflen)
	{
		var bufferRef = buffer;
		return Execute(() => PlatformInvoke.FPDF_GetMetaText(document, tag, ref bufferRef, buflen));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageLabel/*" />
		/// <seealso cref='Pdfium.FPDF_GetPageLabel(FPDF_DOCUMENT, int)'/>
    [HandleProcessCorruptedStateExceptions]
	private static uint FPDF_GetPageLabel(FPDF_DOCUMENT document, int page_index, ref byte buffer, uint buflen)
	{
		var bufferRef = buffer;
		return Execute(() => PlatformInvoke.FPDF_GetPageLabel(document, page_index, ref bufferRef, buflen));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_CreateNewDocument/*" />
		/// <seealso cref='PdfDocument'/>
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_DOCUMENT FPDF_CreateNewDocument()
	{
		return Execute(() => PlatformInvoke.FPDF_CreateNewDocument());
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_New/*" />
		/// <seealso cref='PdfPageCollection.Add(double, double)'/>
		/// <seealso cref='PdfPageCollection.Insert(int, double, double)'/>
		/// <seealso cref='PdfDocument.Pages'/>
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_PAGE FPDFPage_New(FPDF_DOCUMENT document, int page_index, double width, double height)
	{
		return Execute(() => PlatformInvoke.FPDFPage_New(document, page_index, width, height));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_Delete/*" />
		/// <seealso cref='PdfPageCollection.RemoveAt(int)'/>
		/// <seealso cref='PdfDocument.Pages'/>
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFPage_Delete(FPDF_DOCUMENT document, int page_index)
	{
		Execute(() => PlatformInvoke.FPDFPage_Delete(document, page_index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_GetRotation/*" />
		/// <seealso cref='PdfPage.Orientation'/>
    [HandleProcessCorruptedStateExceptions]
	public static PageOrientations FPDFPage_GetRotation(FPDF_PAGE page)
	{
		return Execute(() => PlatformInvoke.FPDFPage_GetRotation(page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_SetRotation/*" />
		/// <seealso cref='PdfPage.Orientation'/>
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFPage_SetRotation(FPDF_PAGE page, PageOrientations rotation)
	{
		Execute(() => PlatformInvoke.FPDFPage_SetRotation(page, rotation));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_InsertObject/*" />
    [HandleProcessCorruptedStateExceptions]
	private static void FPDFPage_InsertObject(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj)
	{
		Execute(() => PlatformInvoke.FPDFPage_InsertObject(page, page_obj));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_RemoveObject/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPage_RemoveObject(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj)
	{
		return Execute(() => PlatformInvoke.FPDFPage_RemoveObject(page, page_obj));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_CountObjects/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFPage_CountObjects(FPDF_PAGE page)
	{
		return Execute(() => PlatformInvoke.FPDFPage_CountObjects(page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_GetObject/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_PAGEOBJECT FPDFPage_GetObject(FPDF_PAGE page, int index)
	{
		return Execute(() => PlatformInvoke.FPDFPage_GetObject(page, index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_HasTransparency/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPage_HasTransparency(FPDF_PAGE page)
	{
		return Execute(() => PlatformInvoke.FPDFPage_HasTransparency(page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_GenerateContent/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPage_GenerateContent(FPDF_PAGE page)
	{
		return Execute(() => PlatformInvoke.FPDFPage_GenerateContent(page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_Destroy/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFPageObj_Destroy(FPDF_PAGEOBJECT page_obj)
	{
		Execute(() => PlatformInvoke.FPDFPageObj_Destroy(page_obj));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_HasTransparency/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObj_HasTransparency(FPDF_PAGEOBJECT pageObject)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_HasTransparency(pageObject));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetType/*" />
    [HandleProcessCorruptedStateExceptions]
	public static PageObjTypes FPDFPageObj_GetType(FPDF_PAGEOBJECT page_object)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_GetType(page_object));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_Transform/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFPageObj_Transform(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f)
	{
		Execute(() => PlatformInvoke.FPDFPageObj_Transform(page_object, a, b, c, d, e, f));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_TransformAnnots/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFPage_TransformAnnots(FPDF_PAGE page, double a, double b, double c, double d, double e, double f)
	{
		Execute(() => PlatformInvoke.FPDFPage_TransformAnnots(page, a, b, c, d, e, f));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_NewImageObj/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_PAGEOBJECT FPDFPageObj_NewImageObj(FPDF_DOCUMENT document)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_NewImageObj(document));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_CountMarks/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFPageObj_CountMarks(FPDF_PAGEOBJECT page_object)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_CountMarks(page_object));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetMark/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_PAGEOBJECTMARK FPDFPageObj_GetMark(FPDF_PAGEOBJECT page_object, uint index)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_GetMark(page_object, index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_AddMark/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_PAGEOBJECTMARK FPDFPageObj_AddMark(FPDF_PAGEOBJECT page_object, [MarshalAs(UnmanagedType.LPStr)] string name)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_AddMark(page_object, name));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_RemoveMark/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObj_RemoveMark(FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_RemoveMark(page_object, mark));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_GetName/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObjMark_GetName(FPDF_PAGEOBJECTMARK mark, ref byte buffer, uint buflen, out uint out_buflen)
	{
		var bufferRef = buffer;
		uint out_buflenOut = default;
		var result = Execute(() => PlatformInvoke.FPDFPageObjMark_GetName(mark, ref bufferRef, buflen, out out_buflenOut));
		out_buflen = out_buflenOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_CountParams/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFPageObjMark_CountParams(FPDF_PAGEOBJECTMARK mark)
	{
		return Execute(() => PlatformInvoke.FPDFPageObjMark_CountParams(mark));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_GetParamKey/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObjMark_GetParamKey(FPDF_PAGEOBJECTMARK mark, uint index, ref byte buffer, uint buflen, out uint out_buflen)
	{
		var bufferRef = buffer;
		uint out_buflenOut = default;
		var result = Execute(() => PlatformInvoke.FPDFPageObjMark_GetParamKey(mark, index, ref bufferRef, buflen, out out_buflenOut));
		out_buflen = out_buflenOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_GetParamValueType/*" />
    [HandleProcessCorruptedStateExceptions]
	public static ObjectTypes FPDFPageObjMark_GetParamValueType(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key)
	{
		return Execute(() => PlatformInvoke.FPDFPageObjMark_GetParamValueType(mark, key));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_GetParamIntValue/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObjMark_GetParamIntValue(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, out int out_value)
	{
		int out_valueOut = default;
		var result = Execute(() => PlatformInvoke.FPDFPageObjMark_GetParamIntValue(mark, key, out out_valueOut));
		out_value = out_valueOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_GetParamStringValue/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObjMark_GetParamStringValue(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, uint buflen, out uint out_buflen)
	{
		var bufferRef = buffer;
		uint out_buflenOut = default;
		var result = Execute(() => PlatformInvoke.FPDFPageObjMark_GetParamStringValue(mark, key, ref bufferRef, buflen, out out_buflenOut));
		out_buflen = out_buflenOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_GetParamBlobValue/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObjMark_GetParamBlobValue(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, uint buflen, out uint out_buflen)
	{
		var bufferRef = buffer;
		uint out_buflenOut = default;
		var result = Execute(() => PlatformInvoke.FPDFPageObjMark_GetParamBlobValue(mark, key, ref bufferRef, buflen, out out_buflenOut));
		out_buflen = out_buflenOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_SetIntParam/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObjMark_SetIntParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, int value)
	{
		return Execute(() => PlatformInvoke.FPDFPageObjMark_SetIntParam(document, page_object, mark, key, value));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_SetStringParam/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObjMark_SetStringParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, [MarshalAs(UnmanagedType.LPStr)] string value)
	{
		return Execute(() => PlatformInvoke.FPDFPageObjMark_SetStringParam(document, page_object, mark, key, value));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_SetBlobParam/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObjMark_SetBlobParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte value, uint value_len)
	{
		var valueRef = value;
		return Execute(() => PlatformInvoke.FPDFPageObjMark_SetBlobParam(document, page_object, mark, key, ref valueRef, value_len));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_RemoveParam/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObjMark_RemoveParam(FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key)
	{
		return Execute(() => PlatformInvoke.FPDFPageObjMark_RemoveParam(page_object, mark, key));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_LoadJpegFile/*" />
    [HandleProcessCorruptedStateExceptions]
	private static bool FPDFImageObj_LoadJpegFile(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead)
	{
		var pagesRef = pages;
		return Execute(() => PlatformInvoke.FPDFImageObj_LoadJpegFile(ref pagesRef, nCount, image_object, fileRead));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_LoadJpegFileInline/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFImageObj_LoadJpegFileInline(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead)
	{
		var pagesRef = pages;
		return Execute(() => PlatformInvoke.FPDFImageObj_LoadJpegFileInline(ref pagesRef, nCount, image_object, fileRead));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_GetMatrix/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFImageObj_GetMatrix(FPDF_PAGEOBJECT image_object, out double a, out double b, out double c, out double d, out double e, out double f)
	{
		double aOut = default;
		double bOut = default;
		double cOut = default;
		double dOut = default;
		double eOut = default;
		double fOut = default;
		var result = Execute(() => PlatformInvoke.FPDFImageObj_GetMatrix(image_object, out aOut, out bOut, out cOut, out dOut, out eOut, out fOut));
		a = aOut;
		b = bOut;
		c = cOut;
		d = dOut;
		e = eOut;
		f = fOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_SetMatrix/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFImageObj_SetMatrix(FPDF_PAGEOBJECT image_object, double a, double b, double c, double d, double e, double f)
	{
		return Execute(() => PlatformInvoke.FPDFImageObj_SetMatrix(image_object, a, b, c, d, e, f));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_SetBitmap/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFImageObj_SetBitmap(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_BITMAP bitmap)
	{
		var pagesRef = pages;
		return Execute(() => PlatformInvoke.FPDFImageObj_SetBitmap(ref pagesRef, nCount, image_object, bitmap));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_GetBitmap/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_BITMAP FPDFImageObj_GetBitmap(FPDF_PAGEOBJECT image_object)
	{
		return Execute(() => PlatformInvoke.FPDFImageObj_GetBitmap(image_object));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_GetImageDataDecoded/*" />
    [HandleProcessCorruptedStateExceptions]
	public static uint FPDFImageObj_GetImageDataDecoded(FPDF_PAGEOBJECT image_object, ref byte buffer, uint buflen)
	{
		var bufferRef = buffer;
		return Execute(() => PlatformInvoke.FPDFImageObj_GetImageDataDecoded(image_object, ref bufferRef, buflen));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_GetImageDataRaw/*" />
    [HandleProcessCorruptedStateExceptions]
	public static uint FPDFImageObj_GetImageDataRaw(FPDF_PAGEOBJECT image_object, ref byte buffer, uint buflen)
	{
		var bufferRef = buffer;
		return Execute(() => PlatformInvoke.FPDFImageObj_GetImageDataRaw(image_object, ref bufferRef, buflen));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_GetImageFilterCount/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFImageObj_GetImageFilterCount(FPDF_PAGEOBJECT image_object)
	{
		return Execute(() => PlatformInvoke.FPDFImageObj_GetImageFilterCount(image_object));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_GetImageFilter/*" />
    [HandleProcessCorruptedStateExceptions]
	public static uint FPDFImageObj_GetImageFilter(FPDF_PAGEOBJECT image_object, int index, ref byte buffer, uint buflen)
	{
		var bufferRef = buffer;
		return Execute(() => PlatformInvoke.FPDFImageObj_GetImageFilter(image_object, index, ref bufferRef, buflen));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_GetImageMetadata/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFImageObj_GetImageMetadata(FPDF_PAGEOBJECT image_object, FPDF_PAGE page, out FPDF_IMAGEOBJ_METADATA metadata)
	{
		FPDF_IMAGEOBJ_METADATA metadataOut = default;
		var result = Execute(() => PlatformInvoke.FPDFImageObj_GetImageMetadata(image_object, page, out metadataOut));
		metadata = metadataOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_CreatenewPath/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_PAGEOBJECT FPDFPageObj_CreatenewPath(float x, float y)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_CreatenewPath(x, y));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_CreatenewRect/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_PAGEOBJECT FPDFPageObj_CreatenewRect(float x, float y, float w, float h)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_CreatenewRect(x, y, w, h));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetBounds/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObj_GetBounds(FPDF_PAGEOBJECT page_object, out float left, out float bottom, out float right, out float top)
	{
		float leftOut = default;
		float bottomOut = default;
		float rightOut = default;
		float topOut = default;
		var result = Execute(() => PlatformInvoke.FPDFPageObj_GetBounds(page_object, out leftOut, out bottomOut, out rightOut, out topOut));
		left = leftOut;
		bottom = bottomOut;
		right = rightOut;
		top = topOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_SetBlendMode/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFPageObj_SetBlendMode(FPDF_PAGEOBJECT page_object, [MarshalAs(UnmanagedType.LPStr)] string blend_mode)
	{
		Execute(() => PlatformInvoke.FPDFPageObj_SetBlendMode(page_object, blend_mode));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_SetStrokeColor/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObj_SetStrokeColor(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_SetStrokeColor(page_object, R, G, B, A));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetStrokeColor/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObj_GetStrokeColor(FPDF_PAGEOBJECT page_object, out uint R, out uint G, out uint B, out uint A)
	{
		uint ROut = default;
		uint GOut = default;
		uint BOut = default;
		uint AOut = default;
		var result = Execute(() => PlatformInvoke.FPDFPageObj_GetStrokeColor(page_object, out ROut, out GOut, out BOut, out AOut));
		R = ROut;
		G = GOut;
		B = BOut;
		A = AOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_SetStrokeWidth/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObj_SetStrokeWidth(FPDF_PAGEOBJECT page_object, float width)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_SetStrokeWidth(page_object, width));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetStrokeWidth/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObj_GetStrokeWidth(FPDF_PAGEOBJECT page_object, out float width)
	{
		float widthOut = default;
		var result = Execute(() => PlatformInvoke.FPDFPageObj_GetStrokeWidth(page_object, out widthOut));
		width = widthOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetLineJoin/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFPageObj_GetLineJoin(FPDF_PAGEOBJECT page_object)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_GetLineJoin(page_object));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_SetLineJoin/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObj_SetLineJoin(FPDF_PAGEOBJECT page_object, int line_join)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_SetLineJoin(page_object, line_join));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetLineCap/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFPageObj_GetLineCap(FPDF_PAGEOBJECT page_object)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_GetLineCap(page_object));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_SetLineCap/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObj_SetLineCap(FPDF_PAGEOBJECT page_object, int line_cap)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_SetLineCap(page_object, line_cap));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_SetFillColor/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObj_SetFillColor(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_SetFillColor(page_object, R, G, B, A));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetFillColor/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPageObj_GetFillColor(FPDF_PAGEOBJECT page_object, out uint R, out uint G, out uint B, out uint A)
	{
		uint ROut = default;
		uint GOut = default;
		uint BOut = default;
		uint AOut = default;
		var result = Execute(() => PlatformInvoke.FPDFPageObj_GetFillColor(page_object, out ROut, out GOut, out BOut, out AOut));
		R = ROut;
		G = GOut;
		B = BOut;
		A = AOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPath_CountSegments/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFPath_CountSegments(FPDF_PAGEOBJECT path)
	{
		return Execute(() => PlatformInvoke.FPDFPath_CountSegments(path));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPath_GetPathSegment/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_PATHSEGMENT FPDFPath_GetPathSegment(FPDF_PAGEOBJECT path, int index)
	{
		return Execute(() => PlatformInvoke.FPDFPath_GetPathSegment(path, index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPathSegment_GetPoint/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPathSegment_GetPoint(FPDF_PATHSEGMENT segment, out float x, out float y)
	{
		float xOut = default;
		float yOut = default;
		var result = Execute(() => PlatformInvoke.FPDFPathSegment_GetPoint(segment, out xOut, out yOut));
		x = xOut;
		y = yOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPathSegment_GetType/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFPathSegment_GetType(FPDF_PATHSEGMENT segment)
	{
		return Execute(() => PlatformInvoke.FPDFPathSegment_GetType(segment));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPathSegment_GetClose/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPathSegment_GetClose(FPDF_PATHSEGMENT segment)
	{
		return Execute(() => PlatformInvoke.FPDFPathSegment_GetClose(segment));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPath_MoveTo/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPath_MoveTo(FPDF_PAGEOBJECT path, float x, float y)
	{
		return Execute(() => PlatformInvoke.FPDFPath_MoveTo(path, x, y));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPath_LineTo/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPath_LineTo(FPDF_PAGEOBJECT path, float x, float y)
	{
		return Execute(() => PlatformInvoke.FPDFPath_LineTo(path, x, y));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPath_BezierTo/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPath_BezierTo(FPDF_PAGEOBJECT path, float x1, float y1, float x2, float y2, float x3, float y3)
	{
		return Execute(() => PlatformInvoke.FPDFPath_BezierTo(path, x1, y1, x2, y2, x3, y3));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPath_Close/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPath_Close(FPDF_PAGEOBJECT path)
	{
		return Execute(() => PlatformInvoke.FPDFPath_Close(path));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPath_SetDrawMode/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPath_SetDrawMode(FPDF_PAGEOBJECT path, PathFillModes fillmode, bool stroke)
	{
		return Execute(() => PlatformInvoke.FPDFPath_SetDrawMode(path, fillmode, stroke));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPath_GetDrawMode/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPath_GetDrawMode(FPDF_PAGEOBJECT path, out PathFillModes fillmode, out bool stroke)
	{
		PathFillModes fillmodeOut = default;
		bool strokeOut = default;
		var result = Execute(() => PlatformInvoke.FPDFPath_GetDrawMode(path, out fillmodeOut, out strokeOut));
		fillmode = fillmodeOut;
		stroke = strokeOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPath_GetMatrix/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPath_GetMatrix(FPDF_PAGEOBJECT path, FS_MATRIX matrix)
	{
		return Execute(() => PlatformInvoke.FPDFPath_GetMatrix(path, matrix));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPath_SetMatrix/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPath_SetMatrix(FPDF_PAGEOBJECT path, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix)
	{
		return Execute(() => PlatformInvoke.FPDFPath_SetMatrix(path, matrix));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_NewTextObj/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_PAGEOBJECT FPDFPageObj_NewTextObj(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font, float font_size)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_NewTextObj(document, font, font_size));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_SetText/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFText_SetText(FPDF_PAGEOBJECT text_object, [MarshalAs(UnmanagedType.LPWStr)] string text)
	{
		return Execute(() => PlatformInvoke.FPDFText_SetText(text_object, text));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_LoadFont/*" />
    [HandleProcessCorruptedStateExceptions]
	private static FPDF_FONT FPDFText_LoadFont(FPDF_DOCUMENT document, ref byte data, uint size, FontTypes font_type, bool cid)
	{
		var dataRef = data;
		return Execute(() => PlatformInvoke.FPDFText_LoadFont(document, ref dataRef, size, font_type, cid));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_LoadStandardFont/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_FONT FPDFText_LoadStandardFont(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font)
	{
		return Execute(() => PlatformInvoke.FPDFText_LoadStandardFont(document, font));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFTextObj_GetMatrix/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFTextObj_GetMatrix(FPDF_PAGEOBJECT text, FS_MATRIX matrix)
	{
		return Execute(() => PlatformInvoke.FPDFTextObj_GetMatrix(text, matrix));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFTextObj_GetFontSize/*" />
    [HandleProcessCorruptedStateExceptions]
	public static float FPDFTextObj_GetFontSize(FPDF_PAGEOBJECT text)
	{
		return Execute(() => PlatformInvoke.FPDFTextObj_GetFontSize(text));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFFont_Close/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFFont_Close(FPDF_FONT font)
	{
		Execute(() => PlatformInvoke.FPDFFont_Close(font));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_CreateTextObj/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_PAGEOBJECT FPDFPageObj_CreateTextObj(FPDF_DOCUMENT document, FPDF_FONT font, float font_size)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_CreateTextObj(document, font, font_size));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFTextObj_GetTextRenderMode/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_TEXT_RENDERMODE FPDFTextObj_GetTextRenderMode(FPDF_PAGEOBJECT text)
	{
		return Execute(() => PlatformInvoke.FPDFTextObj_GetTextRenderMode(text));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFTextObj_SetTextRenderMode/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFTextObj_SetTextRenderMode(FPDF_PAGEOBJECT text, FPDF_TEXT_RENDERMODE render_mode)
	{
		return Execute(() => PlatformInvoke.FPDFTextObj_SetTextRenderMode(text, render_mode));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFTextObj_GetFontName/*" />
    [HandleProcessCorruptedStateExceptions]
	public static uint FPDFTextObj_GetFontName(FPDF_PAGEOBJECT text, ref byte buffer, uint length)
	{
		var bufferRef = buffer;
		return Execute(() => PlatformInvoke.FPDFTextObj_GetFontName(text, ref bufferRef, length));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFTextObj_GetText/*" />
    [HandleProcessCorruptedStateExceptions]
	public static uint FPDFTextObj_GetText(FPDF_PAGEOBJECT text_object, FPDF_TEXTPAGE text_page, ref byte buffer, uint length)
	{
		var bufferRef = buffer;
		return Execute(() => PlatformInvoke.FPDFTextObj_GetText(text_object, text_page, ref bufferRef, length));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFFormObj_CountObjects/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFFormObj_CountObjects(FPDF_PAGEOBJECT form_object)
	{
		return Execute(() => PlatformInvoke.FPDFFormObj_CountObjects(form_object));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFFormObj_GetObject/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_PAGEOBJECT FPDFFormObj_GetObject(FPDF_PAGEOBJECT form_object, uint index)
	{
		return Execute(() => PlatformInvoke.FPDFFormObj_GetObject(form_object, index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFFormObj_GetMatrix/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFFormObj_GetMatrix(FPDF_PAGEOBJECT form_object, FS_MATRIX matrix)
	{
		return Execute(() => PlatformInvoke.FPDFFormObj_GetMatrix(form_object, matrix));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFDoc_GetPageMode/*" />
		/// <seealso cref='PdfDocument.PageMode'/>
    [HandleProcessCorruptedStateExceptions]
	public static PageModes FPDFDoc_GetPageMode(FPDF_DOCUMENT document)
	{
		return Execute(() => PlatformInvoke.FPDFDoc_GetPageMode(document));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_Flatten/*" />
		/// <seealso cref='PdfPage.Flatten(FlattenFlags)'/>
    [HandleProcessCorruptedStateExceptions]
	public static FlattenResults FPDFPage_Flatten(FPDF_PAGE page, FlattenFlags nFlag)
	{
		return Execute(() => PlatformInvoke.FPDFPage_Flatten(page, nFlag));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_ImportPages/*" />
		/// <seealso cref='PdfPageCollection.Insert(int, PdfDocument, int[])'/>
		/// <seealso cref='PdfPageCollection.Add(PdfDocument, int[])'/>
		/// <seealso cref='PdfDocument.Pages'/>
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDF_ImportPages(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, [MarshalAs(UnmanagedType.LPStr)] string pagerange, int index)
	{
		return Execute(() => PlatformInvoke.FPDF_ImportPages(dest_doc, src_doc, pagerange, index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_ImportNPagesToOne/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_DOCUMENT FPDF_ImportNPagesToOne(FPDF_DOCUMENT src_doc, float output_width, float output_height, int num_pages_on_x_axis, int num_pages_on_y_axis)
	{
		return Execute(() => PlatformInvoke.FPDF_ImportNPagesToOne(src_doc, output_width, output_height, num_pages_on_x_axis, num_pages_on_y_axis));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_CopyViewerPreferences/*" />
		/// <seealso cref='PdfDocument.CopyViewerPreferencesFrom(PdfDocument)'/>
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDF_CopyViewerPreferences(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc)
	{
		return Execute(() => PlatformInvoke.FPDF_CopyViewerPreferences(dest_doc, src_doc));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_RenderPageBitmap_Start/*" />
    [HandleProcessCorruptedStateExceptions]
	public static RenderingStatus FPDF_RenderPageBitmap_Start(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags, IFSDK_PAUSE pause)
	{
		return Execute(() => PlatformInvoke.FPDF_RenderPageBitmap_Start(bitmap, page, start_x, start_y, size_x, size_y, rotate, flags, pause));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_RenderPage_Continue/*" />
    [HandleProcessCorruptedStateExceptions]
	public static RenderingStatus FPDF_RenderPage_Continue(FPDF_PAGE page, IFSDK_PAUSE pause)
	{
		return Execute(() => PlatformInvoke.FPDF_RenderPage_Continue(page, pause));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_RenderPage_Close/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDF_RenderPage_Close(FPDF_PAGE page)
	{
		Execute(() => PlatformInvoke.FPDF_RenderPage_Close(page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_SaveAsCopy/*" />
		/// <seealso cref='Pdfium.FPDF_SaveAsCopy(FPDF_DOCUMENT, System.IO.Stream, SaveFlags, int)'/>
		/// <seealso cref='PdfDocument.Save(System.IO.Stream, SaveFlags, int)'/>
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDF_SaveAsCopy(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags)
	{
		return Execute(() => PlatformInvoke.FPDF_SaveAsCopy(document, fileWrite, flags));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_SaveWithVersion/*" />
		/// <seealso cref='Pdfium.FPDF_SaveAsCopy(FPDF_DOCUMENT, System.IO.Stream, SaveFlags, int)'/>
		/// <seealso cref='PdfDocument.Save(System.IO.Stream, SaveFlags, int)'/>
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDF_SaveWithVersion(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags, int fileVersion)
	{
		return Execute(() => PlatformInvoke.FPDF_SaveWithVersion(document, fileWrite, flags, fileVersion));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetCharIndexFromTextIndex/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFText_GetCharIndexFromTextIndex(FPDF_TEXTPAGE text_page, int nTextIndex)
	{
		return Execute(() => PlatformInvoke.FPDFText_GetCharIndexFromTextIndex(text_page, nTextIndex));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetTextIndexFromCharIndex/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFText_GetTextIndexFromCharIndex(FPDF_TEXTPAGE text_page, int nCharIndex)
	{
		return Execute(() => PlatformInvoke.FPDFText_GetTextIndexFromCharIndex(text_page, nCharIndex));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_StructTree_GetForPage/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_STRUCTTREE FPDF_StructTree_GetForPage(FPDF_PAGE page)
	{
		return Execute(() => PlatformInvoke.FPDF_StructTree_GetForPage(page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_StructTree_Close/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDF_StructTree_Close(FPDF_STRUCTTREE struct_tree)
	{
		Execute(() => PlatformInvoke.FPDF_StructTree_Close(struct_tree));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_StructTree_CountChildren/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDF_StructTree_CountChildren(FPDF_STRUCTTREE struct_tree)
	{
		return Execute(() => PlatformInvoke.FPDF_StructTree_CountChildren(struct_tree));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_StructTree_GetChildAtIndex/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_STRUCTELEMENT FPDF_StructTree_GetChildAtIndex(FPDF_STRUCTTREE struct_tree, int index)
	{
		return Execute(() => PlatformInvoke.FPDF_StructTree_GetChildAtIndex(struct_tree, index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_StructElement_GetAltText/*" />
    [HandleProcessCorruptedStateExceptions]
	private static uint FPDF_StructElement_GetAltText(FPDF_STRUCTELEMENT struct_element, ref byte buffer, uint buflen)
	{
		var bufferRef = buffer;
		return Execute(() => PlatformInvoke.FPDF_StructElement_GetAltText(struct_element, ref bufferRef, buflen));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_StructElement_GetMarkedContentID/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDF_StructElement_GetMarkedContentID(FPDF_STRUCTELEMENT struct_element)
	{
		return Execute(() => PlatformInvoke.FPDF_StructElement_GetMarkedContentID(struct_element));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_StructElement_GetType/*" />
    [HandleProcessCorruptedStateExceptions]
	public static uint FPDF_StructElement_GetType(FPDF_STRUCTELEMENT struct_element, ref byte buffer, uint buflen)
	{
		var bufferRef = buffer;
		return Execute(() => PlatformInvoke.FPDF_StructElement_GetType(struct_element, ref bufferRef, buflen));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_StructElement_GetTitle/*" />
    [HandleProcessCorruptedStateExceptions]
	public static uint FPDF_StructElement_GetTitle(FPDF_STRUCTELEMENT struct_element, ref byte buffer, uint buflen)
	{
		var bufferRef = buffer;
		return Execute(() => PlatformInvoke.FPDF_StructElement_GetTitle(struct_element, ref bufferRef, buflen));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_StructElement_CountChildren/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDF_StructElement_CountChildren(FPDF_STRUCTELEMENT struct_element)
	{
		return Execute(() => PlatformInvoke.FPDF_StructElement_CountChildren(struct_element));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_StructElement_GetChildAtIndex/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_STRUCTELEMENT FPDF_StructElement_GetChildAtIndex(FPDF_STRUCTELEMENT struct_element, int index)
	{
		return Execute(() => PlatformInvoke.FPDF_StructElement_GetChildAtIndex(struct_element, index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_LoadPage/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_TEXTPAGE FPDFText_LoadPage(FPDF_PAGE page)
	{
		return Execute(() => PlatformInvoke.FPDFText_LoadPage(page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_ClosePage/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFText_ClosePage(FPDF_TEXTPAGE text_page)
	{
		Execute(() => PlatformInvoke.FPDFText_ClosePage(text_page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_CountChars/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFText_CountChars(FPDF_TEXTPAGE text_page)
	{
		return Execute(() => PlatformInvoke.FPDFText_CountChars(text_page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetUnicode/*" />
    [HandleProcessCorruptedStateExceptions]
	public static char FPDFText_GetUnicode(FPDF_TEXTPAGE text_page, int index)
	{
		return Execute(() => PlatformInvoke.FPDFText_GetUnicode(text_page, index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetFontSize/*" />
    [HandleProcessCorruptedStateExceptions]
	public static double FPDFText_GetFontSize(FPDF_TEXTPAGE text_page, int index)
	{
		return Execute(() => PlatformInvoke.FPDFText_GetFontSize(text_page, index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetFontInfo/*" />
    [HandleProcessCorruptedStateExceptions]
	public static uint FPDFText_GetFontInfo(FPDF_TEXTPAGE text_page, int index, ref byte buffer, uint buflen, out int flags)
	{
		var bufferRef = buffer;
		int flagsOut = default;
		var result = Execute(() => PlatformInvoke.FPDFText_GetFontInfo(text_page, index, ref bufferRef, buflen, out flagsOut));
		flags = flagsOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetFontWeight/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFText_GetFontWeight(FPDF_TEXTPAGE text_page, int index)
	{
		return Execute(() => PlatformInvoke.FPDFText_GetFontWeight(text_page, index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetTextRenderMode/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_TEXT_RENDERMODE FPDFText_GetTextRenderMode(FPDF_TEXTPAGE text_page, int index)
	{
		return Execute(() => PlatformInvoke.FPDFText_GetTextRenderMode(text_page, index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetFillColor/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFText_GetFillColor(FPDF_TEXTPAGE text_page, int index, out uint R, out uint G, out uint B, out uint A)
	{
		uint ROut = default;
		uint GOut = default;
		uint BOut = default;
		uint AOut = default;
		var result = Execute(() => PlatformInvoke.FPDFText_GetFillColor(text_page, index, out ROut, out GOut, out BOut, out AOut));
		R = ROut;
		G = GOut;
		B = BOut;
		A = AOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetStrokeColor/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFText_GetStrokeColor(FPDF_TEXTPAGE text_page, int index, out uint R, out uint G, out uint B, out uint A)
	{
		uint ROut = default;
		uint GOut = default;
		uint BOut = default;
		uint AOut = default;
		var result = Execute(() => PlatformInvoke.FPDFText_GetStrokeColor(text_page, index, out ROut, out GOut, out BOut, out AOut));
		R = ROut;
		G = GOut;
		B = BOut;
		A = AOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetCharAngle/*" />
    [HandleProcessCorruptedStateExceptions]
	public static float FPDFText_GetCharAngle(FPDF_TEXTPAGE text_page, int index)
	{
		return Execute(() => PlatformInvoke.FPDFText_GetCharAngle(text_page, index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetCharBox/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFText_GetCharBox(FPDF_TEXTPAGE text_page, int index, out double left, out double right, out double bottom, out double top)
	{
		double leftOut = default;
		double rightOut = default;
		double bottomOut = default;
		double topOut = default;
		var result = Execute(() => PlatformInvoke.FPDFText_GetCharBox(text_page, index, out leftOut, out rightOut, out bottomOut, out topOut));
		left = leftOut;
		right = rightOut;
		bottom = bottomOut;
		top = topOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetLooseCharBox/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFText_GetLooseCharBox(FPDF_TEXTPAGE text_page, int index, FS_RECTF rect)
	{
		return Execute(() => PlatformInvoke.FPDFText_GetLooseCharBox(text_page, index, rect));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetMatrix/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFText_GetMatrix(FPDF_TEXTPAGE text_page, int index, FS_MATRIX matrix)
	{
		return Execute(() => PlatformInvoke.FPDFText_GetMatrix(text_page, index, matrix));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetCharOrigin/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFText_GetCharOrigin(FPDF_TEXTPAGE text_page, int index, out double x, out double y)
	{
		double xOut = default;
		double yOut = default;
		var result = Execute(() => PlatformInvoke.FPDFText_GetCharOrigin(text_page, index, out xOut, out yOut));
		x = xOut;
		y = yOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetCharIndexAtPos/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFText_GetCharIndexAtPos(FPDF_TEXTPAGE text_page, double x, double y, double xTolerance, double yTolerance)
	{
		return Execute(() => PlatformInvoke.FPDFText_GetCharIndexAtPos(text_page, x, y, xTolerance, yTolerance));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetText/*" />
    [HandleProcessCorruptedStateExceptions]
	private static int FPDFText_GetText(FPDF_TEXTPAGE text_page, int start_index, int count, ref byte result)
	{
		var resultRef = result;
		return Execute(() => PlatformInvoke.FPDFText_GetText(text_page, start_index, count, ref resultRef));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_CountRects/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFText_CountRects(FPDF_TEXTPAGE text_page, int start_index, int count)
	{
		return Execute(() => PlatformInvoke.FPDFText_CountRects(text_page, start_index, count));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetRect/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFText_GetRect(FPDF_TEXTPAGE text_page, int rect_index, out double left, out double top, out double right, out double bottom)
	{
		double leftOut = default;
		double topOut = default;
		double rightOut = default;
		double bottomOut = default;
		var result = Execute(() => PlatformInvoke.FPDFText_GetRect(text_page, rect_index, out leftOut, out topOut, out rightOut, out bottomOut));
		left = leftOut;
		top = topOut;
		right = rightOut;
		bottom = bottomOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetBoundedText/*" />
    [HandleProcessCorruptedStateExceptions]
	private static int FPDFText_GetBoundedText(FPDF_TEXTPAGE text_page, double left, double top, double right, double bottom, ref byte buffer, int buflen)
	{
		var bufferRef = buffer;
		return Execute(() => PlatformInvoke.FPDFText_GetBoundedText(text_page, left, top, right, bottom, ref bufferRef, buflen));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_FindStart/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_SCHHANDLE FPDFText_FindStart(FPDF_TEXTPAGE text_page, [MarshalAs(UnmanagedType.LPWStr)] string findwhat, SearchFlags flags, int start_index)
	{
		return Execute(() => PlatformInvoke.FPDFText_FindStart(text_page, findwhat, flags, start_index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_FindNext/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFText_FindNext(FPDF_SCHHANDLE handle)
	{
		return Execute(() => PlatformInvoke.FPDFText_FindNext(handle));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_FindPrev/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFText_FindPrev(FPDF_SCHHANDLE handle)
	{
		return Execute(() => PlatformInvoke.FPDFText_FindPrev(handle));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetSchResultIndex/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFText_GetSchResultIndex(FPDF_SCHHANDLE handle)
	{
		return Execute(() => PlatformInvoke.FPDFText_GetSchResultIndex(handle));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetSchCount/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFText_GetSchCount(FPDF_SCHHANDLE handle)
	{
		return Execute(() => PlatformInvoke.FPDFText_GetSchCount(handle));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFText_FindClose/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFText_FindClose(FPDF_SCHHANDLE handle)
	{
		Execute(() => PlatformInvoke.FPDFText_FindClose(handle));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFLink_LoadWebLinks/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_PAGELINK FPDFLink_LoadWebLinks(FPDF_TEXTPAGE text_page)
	{
		return Execute(() => PlatformInvoke.FPDFLink_LoadWebLinks(text_page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFLink_CountWebLinks/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFLink_CountWebLinks(FPDF_PAGELINK link_page)
	{
		return Execute(() => PlatformInvoke.FPDFLink_CountWebLinks(link_page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetURL/*" />
    [HandleProcessCorruptedStateExceptions]
	private static int FPDFLink_GetURL(FPDF_PAGELINK link_page, int link_index, ref byte buffer, int buflen)
	{
		var bufferRef = buffer;
		return Execute(() => PlatformInvoke.FPDFLink_GetURL(link_page, link_index, ref bufferRef, buflen));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFLink_CountRects/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFLink_CountRects(FPDF_PAGELINK link_page, int link_index)
	{
		return Execute(() => PlatformInvoke.FPDFLink_CountRects(link_page, link_index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetRect/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFLink_GetRect(FPDF_PAGELINK link_page, int link_index, int rect_index, out double left, out double top, out double right, out double bottom)
	{
		double leftOut = default;
		double topOut = default;
		double rightOut = default;
		double bottomOut = default;
		var result = Execute(() => PlatformInvoke.FPDFLink_GetRect(link_page, link_index, rect_index, out leftOut, out topOut, out rightOut, out bottomOut));
		left = leftOut;
		top = topOut;
		right = rightOut;
		bottom = bottomOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetTextRange/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFLink_GetTextRange(FPDF_PAGELINK link_page, int link_index, out int start_char_index, out int char_count)
	{
		int start_char_indexOut = default;
		int char_countOut = default;
		var result = Execute(() => PlatformInvoke.FPDFLink_GetTextRange(link_page, link_index, out start_char_indexOut, out char_countOut));
		start_char_index = start_char_indexOut;
		char_count = char_countOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFLink_CloseWebLinks/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFLink_CloseWebLinks(FPDF_PAGELINK link_page)
	{
		Execute(() => PlatformInvoke.FPDFLink_CloseWebLinks(link_page));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_SetMediaBox/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFPage_SetMediaBox(FPDF_PAGE page, float left, float bottom, float right, float top)
	{
		Execute(() => PlatformInvoke.FPDFPage_SetMediaBox(page, left, bottom, right, top));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_SetCropBox/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFPage_SetCropBox(FPDF_PAGE page, float left, float bottom, float right, float top)
	{
		Execute(() => PlatformInvoke.FPDFPage_SetCropBox(page, left, bottom, right, top));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_SetBleedBox/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFPage_SetBleedBox(FPDF_PAGE page, float left, float bottom, float right, float top)
	{
		Execute(() => PlatformInvoke.FPDFPage_SetBleedBox(page, left, bottom, right, top));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_SetTrimBox/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFPage_SetTrimBox(FPDF_PAGE page, float left, float bottom, float right, float top)
	{
		Execute(() => PlatformInvoke.FPDFPage_SetTrimBox(page, left, bottom, right, top));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_SetArtBox/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFPage_SetArtBox(FPDF_PAGE page, float left, float bottom, float right, float top)
	{
		Execute(() => PlatformInvoke.FPDFPage_SetArtBox(page, left, bottom, right, top));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_GetMediaBox/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPage_GetMediaBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
	{
		float leftOut = default;
		float bottomOut = default;
		float rightOut = default;
		float topOut = default;
		var result = Execute(() => PlatformInvoke.FPDFPage_GetMediaBox(page, out leftOut, out bottomOut, out rightOut, out topOut));
		left = leftOut;
		bottom = bottomOut;
		right = rightOut;
		top = topOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_GetCropBox/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPage_GetCropBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
	{
		float leftOut = default;
		float bottomOut = default;
		float rightOut = default;
		float topOut = default;
		var result = Execute(() => PlatformInvoke.FPDFPage_GetCropBox(page, out leftOut, out bottomOut, out rightOut, out topOut));
		left = leftOut;
		bottom = bottomOut;
		right = rightOut;
		top = topOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_GetBleedBox/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPage_GetBleedBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
	{
		float leftOut = default;
		float bottomOut = default;
		float rightOut = default;
		float topOut = default;
		var result = Execute(() => PlatformInvoke.FPDFPage_GetBleedBox(page, out leftOut, out bottomOut, out rightOut, out topOut));
		left = leftOut;
		bottom = bottomOut;
		right = rightOut;
		top = topOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_GetTrimBox/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPage_GetTrimBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
	{
		float leftOut = default;
		float bottomOut = default;
		float rightOut = default;
		float topOut = default;
		var result = Execute(() => PlatformInvoke.FPDFPage_GetTrimBox(page, out leftOut, out bottomOut, out rightOut, out topOut));
		left = leftOut;
		bottom = bottomOut;
		right = rightOut;
		top = topOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_GetArtBox/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPage_GetArtBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
	{
		float leftOut = default;
		float bottomOut = default;
		float rightOut = default;
		float topOut = default;
		var result = Execute(() => PlatformInvoke.FPDFPage_GetArtBox(page, out leftOut, out bottomOut, out rightOut, out topOut));
		left = leftOut;
		bottom = bottomOut;
		right = rightOut;
		top = topOut;
		return result;
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_TransFormWithClip/*" />
    [HandleProcessCorruptedStateExceptions]
	public static bool FPDFPage_TransFormWithClip(FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipRect)
	{
		return Execute(() => PlatformInvoke.FPDFPage_TransFormWithClip(page, matrix, clipRect));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_TransformClipPath/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFPageObj_TransformClipPath(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f)
	{
		Execute(() => PlatformInvoke.FPDFPageObj_TransformClipPath(page_object, a, b, c, d, e, f));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetClipPath/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_CLIPPATH FPDFPageObj_GetClipPath(FPDF_PAGEOBJECT page_object)
	{
		return Execute(() => PlatformInvoke.FPDFPageObj_GetClipPath(page_object));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFClipPath_CountPaths/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFClipPath_CountPaths(FPDF_CLIPPATH clip_path)
	{
		return Execute(() => PlatformInvoke.FPDFClipPath_CountPaths(clip_path));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFClipPath_CountPathSegments/*" />
    [HandleProcessCorruptedStateExceptions]
	public static int FPDFClipPath_CountPathSegments(FPDF_CLIPPATH clip_path, int path_index)
	{
		return Execute(() => PlatformInvoke.FPDFClipPath_CountPathSegments(clip_path, path_index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFClipPath_GetPathSegment/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_PATHSEGMENT FPDFClipPath_GetPathSegment(FPDF_CLIPPATH clip_path, int path_index, int segment_index)
	{
		return Execute(() => PlatformInvoke.FPDFClipPath_GetPathSegment(clip_path, path_index, segment_index));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_CreateClipPath/*" />
    [HandleProcessCorruptedStateExceptions]
	public static FPDF_CLIPPATH FPDF_CreateClipPath(float left, float bottom, float right, float top)
	{
		return Execute(() => PlatformInvoke.FPDF_CreateClipPath(left, bottom, right, top));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDF_DestroyClipPath/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDF_DestroyClipPath(FPDF_CLIPPATH clipPath)
	{
		Execute(() => PlatformInvoke.FPDF_DestroyClipPath(clipPath));
    }

	/// <include file="Pdfium.xml" path="Documentation/FPDFPage_InsertClipPath/*" />
    [HandleProcessCorruptedStateExceptions]
	public static void FPDFPage_InsertClipPath(FPDF_PAGE page, FPDF_CLIPPATH clipPath)
	{
		Execute(() => PlatformInvoke.FPDFPage_InsertClipPath(page, clipPath));
    }

}