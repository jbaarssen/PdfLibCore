using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using CppAst;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace PdfLibCore.Parser.Converters;

public sealed class CppConverter
{
    private readonly CppCompilation _compilation;
    private readonly List<CompiledSource> _compilationUnits = new();
    private const string PdfLibCoreNamespace = "PdfLibCore";

    public CppDiagnosticBag Diagnostics => _compilation.Diagnostics;

    public CppConverter(List<string> files)
    {
        _compilation = CppParser.ParseFiles(files);
    }

    public IEnumerable<CompiledSource> Convert()
    {
        foreach (var element in GetElements())
        {
            var converter = CppConverterFactory.GetCppConverter(element.Element);
            _compilationUnits.Add(new CompiledSource(element.Name, converter.Convert(GetCompilationUnit(element.Element))));
        }

        _compilationUnits.Add(CreateIHandleInterface());
        //_compilationUnits.Add(CreatePlatformInvoke());

        return _compilationUnits;
    }

    private IEnumerable<(string Name, CppElement Element)> GetElements()
    {
        foreach (var cppEnum in _compilation.Enums)
        {
            yield return (cppEnum.Name, cppEnum);
        }
        foreach (var cppClass in _compilation.Classes.Where(c => c.IsDefinition))
        {
            yield return (cppClass.Name, cppClass);
        }
        foreach (var cppTypedef in _compilation.Typedefs.Where(t => t.ElementType is CppPointerType { ElementType: CppClass}))
        {
            yield return (cppTypedef.Name, cppTypedef);
        }
    }

    private CompilationUnitSyntax GetCompilationUnit(CppElement? element = null)
    {
        var trivia = new List<SyntaxTrivia>
        {
            Comment($@"/*
This file is part of PdfLibCore, a wrapper around the PDFium library for the .NET.
Inspired by the awesome work of PDFiumSharp by Tobias Meyer.

Copyright (C) {DateTime.UtcNow.Year} J.C.A. Kokenberg & Jan Baarssen
License: Microsoft Reciprocal License (MS-RL)
*/"),
            Comment($"// AUTOGENERATED FILE - {DateTime.UtcNow:dd-MM-yyyy} ({DateTime.UtcNow:hh:mm:ss}) - {DateTime.UtcNow.Kind}"),
            Comment("// DO NOT MODIFY")
        };
        if (element != null)
        {
            trivia.Add(Comment($"// Sourcefile: {Path.GetFileName(element.SourceFile)}"));
        }

        return CompilationUnit()
            .AddMembers(FileScopedNamespaceDeclaration(IdentifierName(PdfLibCoreNamespace))
                .WithNamespaceKeyword(
                    Token(
                        TriviaList(trivia.ToArray()),
                        SyntaxKind.NamespaceKeyword,
                        TriviaList())));
    }


    private CompiledSource CreatePlatformInvoke()
    {
        var f = CompilationUnit();
        f = _compilation.Functions
            .Select(CppConverterFactory.GetCppConverter)
            .Aggregate(f, (current, converter) => converter.Convert(current));

        var unit = GetCompilationUnit()
            .WithUsings(
                List(new[]
                {
                    UsingDirective(
                        QualifiedName(
                            QualifiedName(
                                IdentifierName("System"),
                                IdentifierName("Runtime")),
                            IdentifierName("InteropServices"))),
                    UsingDirective(
                        QualifiedName(
                            IdentifierName("System"),
                            IdentifierName("Security")))
                }))
            .AddMembers(
                ClassDeclaration("PlatformInvoke")
                    .AddModifiers(Token(SyntaxKind.InternalKeyword), Token(SyntaxKind.StaticKeyword))
                    .AddMembers(
                        FieldDeclaration(VariableDeclaration(
                                PredefinedType(Token(SyntaxKind.StringKeyword)),
                                SeparatedList(new[]
                                {
                                    VariableDeclarator(Identifier("DllName"))
                                        .WithInitializer(
                                            EqualsValueClause(
                                                LiteralExpression(
                                                    SyntaxKind.StringLiteralExpression,
                                                    Literal("pdfium"))))
                                })
                            )
                        ).AddModifiers(Token(SyntaxKind.PrivateKeyword), Token(SyntaxKind.ConstKeyword))
                    )
                    .AddMembers(f.Members.ToArray())
            )
            .NormalizeWhitespace();

        return new CompiledSource("PlatformInvoke", unit);
    }

    private CompiledSource CreateIHandleInterface()
    {
        var unit = GetCompilationUnit()
            .AddMembers(
                InterfaceDeclaration("IHandle")
                    .AddModifiers(CppVisibility.Public.ToCSharp())
                    .AddTypeParameterListParameters(TypeParameter(Identifier("T")).WithVarianceKeyword(Token(SyntaxKind.OutKeyword)))
                    .AddMembers(
                        PropertyDeclaration(
                                PredefinedType(Token(SyntaxKind.BoolKeyword)),
                                Identifier("IsNull"))
                            .AddAccessorListAccessors(
                                AccessorDeclaration(SyntaxKind.GetAccessorDeclaration)
                                    .WithSemicolonToken(Token(SyntaxKind.SemicolonToken))),
                        MethodDeclaration(
                                IdentifierName("T"),
                                Identifier("SetToNull"))
                            .WithSemicolonToken(Token(SyntaxKind.SemicolonToken))
                    ));

        return new CompiledSource("IHandle", unit);
    }
}