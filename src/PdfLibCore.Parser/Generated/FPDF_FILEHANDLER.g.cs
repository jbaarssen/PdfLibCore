using System;
using System.Runtime.InteropServices;

/*
This file is part of PdfLibCore, a wrapper around the PDFium library for the .NET.
Inspired by the awesome work of PDFiumSharp by Tobias Meyer.

Copyright (C) 2023 J.C.A. Kokenberg & Jan Baarssen
License: Microsoft Reciprocal License (MS-RL)
*/
// AUTOGENERATED FILE - 08-05-2023 (03:41:46) - Utc
// DO NOT MODIFY
// Sourcefile: fpdfview.h
namespace PdfLibCore;
// Structure for file reading or writing (I/O).
// Note: This is a handler and should be implemented by callers,
// and is only used from XFA.
[StructLayout(LayoutKind.Sequential)]
public struct FPDF_FILEHANDLER
{
    // User-defined data.
    // Note: Callers can use this field to track controls.
    public IntPtr ClientData { get; set; }

    // Callback function to release the current file stream object.
    // Parameters:
    // clientData   -  Pointer to user-defined data.
    // Returns:
    // None.
    public IntPtr Release { get; set; }

    // Callback function to retrieve the current file stream size.
    // Parameters:
    // clientData   -  Pointer to user-defined data.
    // Returns:
    // Size of file stream.
    public uint GetSize { get; set; }

    // Callback function to read data from the current file stream.
    // Parameters:
    // clientData   -  Pointer to user-defined data.
    // offset       -  Offset position starts from the beginning of file
    // stream. This parameter indicates reading position.
    // buffer       -  Memory buffer to store data which are read from
    // file stream. This parameter should not be NULL.
    // size         -  Size of data which should be read from file stream,
    // in bytes. The buffer indicated by |buffer| must be
    // large enough to store specified data.
    // Returns:
    // 0 for success, other value for failure.
    public int ReadBlock { get; set; }

    // Callback function to write data into the current file stream.
    // Parameters:
    // clientData   -  Pointer to user-defined data.
    // offset       -  Offset position starts from the beginning of file
    // stream. This parameter indicates writing position.
    // buffer       -  Memory buffer contains data which is written into
    // file stream. This parameter should not be NULL.
    // size         -  Size of data which should be written into file
    // stream, in bytes.
    // Returns:
    // 0 for success, other value for failure.
    public int WriteBlock { get; set; }

    // Callback function to flush all internal accessing buffers.
    // Parameters:
    // clientData   -  Pointer to user-defined data.
    // Returns:
    // 0 for success, other value for failure.
    public int Flush { get; set; }

    // Callback function to change file size.
    // Description:
    // This function is called under writing mode usually. Implementer
    // can determine whether to realize it based on application requests.
    // Parameters:
    // clientData   -  Pointer to user-defined data.
    // size         -  New size of file stream, in bytes.
    // Returns:
    // 0 for success, other value for failure.
    public int Truncate { get; set; }
}