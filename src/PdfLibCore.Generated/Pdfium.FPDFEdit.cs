// Built from precompiled binaries at https://github.com/bblanchon/pdfium-binaries/releases/tag/chromium/5772
// Github release api https://api.github.com/repos/bblanchon/pdfium-binaries/releases/102934879
// PDFium version v115.0.5772.0 chromium/5772 [master]
// Built on: Wed, 17 May 2023 18:47:10 GMT

// ReSharper disable all
#pragma warning disable CS8500 // This takes the address of, gets the size of, or declares a pointer to a managed type

// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace PdfLibCore.Generated
{
    public unsafe partial class FPDF_IMAGEOBJ_METADATA : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 28)]
        public partial struct __Internal
        {
            internal uint width;
            internal uint height;
            internal float horizontal_dpi;
            internal float vertical_dpi;
            internal uint bits_per_pixel;
            internal int colorspace;
            internal int marked_content_id;

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "??0FPDF_IMAGEOBJ_METADATA@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        protected bool __ownsNativeInstance;

        internal static FPDF_IMAGEOBJ_METADATA __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new FPDF_IMAGEOBJ_METADATA(native.ToPointer(), skipVTables);
        }

        internal static FPDF_IMAGEOBJ_METADATA __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDF_IMAGEOBJ_METADATA(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDF_IMAGEOBJ_METADATA(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
        }

        protected FPDF_IMAGEOBJ_METADATA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDF_IMAGEOBJ_METADATA()
        {
            if (GetType().FullName != "PdfLibCore.Generated.FPDF_IMAGEOBJ_METADATA")
                throw new Exception("PdfLibCore.Generated.FPDF_IMAGEOBJ_METADATA: Can't inherit from classes with disabled NativeToManaged map");
            __Instance = Marshal.AllocHGlobal(sizeof(global::PdfLibCore.Generated.FPDF_IMAGEOBJ_METADATA.__Internal));
            __ownsNativeInstance = true;
        }

        public FPDF_IMAGEOBJ_METADATA(global::PdfLibCore.Generated.FPDF_IMAGEOBJ_METADATA _0)
        {
            if (GetType().FullName != "PdfLibCore.Generated.FPDF_IMAGEOBJ_METADATA")
                throw new Exception("PdfLibCore.Generated.FPDF_IMAGEOBJ_METADATA: Can't inherit from classes with disabled NativeToManaged map");
            __Instance = Marshal.AllocHGlobal(sizeof(global::PdfLibCore.Generated.FPDF_IMAGEOBJ_METADATA.__Internal));
            __ownsNativeInstance = true;
            *((global::PdfLibCore.Generated.FPDF_IMAGEOBJ_METADATA.__Internal*) __Instance) = *((global::PdfLibCore.Generated.FPDF_IMAGEOBJ_METADATA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Width
        {
            get
            {
                return ((__Internal*)__Instance)->width;
            }

            set
            {
                ((__Internal*)__Instance)->width = value;
            }
        }

        public uint Height
        {
            get
            {
                return ((__Internal*)__Instance)->height;
            }

            set
            {
                ((__Internal*)__Instance)->height = value;
            }
        }

        public float HorizontalDpi
        {
            get
            {
                return ((__Internal*)__Instance)->horizontal_dpi;
            }

            set
            {
                ((__Internal*)__Instance)->horizontal_dpi = value;
            }
        }

        public float VerticalDpi
        {
            get
            {
                return ((__Internal*)__Instance)->vertical_dpi;
            }

            set
            {
                ((__Internal*)__Instance)->vertical_dpi = value;
            }
        }

        public uint BitsPerPixel
        {
            get
            {
                return ((__Internal*)__Instance)->bits_per_pixel;
            }

            set
            {
                ((__Internal*)__Instance)->bits_per_pixel = value;
            }
        }

        public int Colorspace
        {
            get
            {
                return ((__Internal*)__Instance)->colorspace;
            }

            set
            {
                ((__Internal*)__Instance)->colorspace = value;
            }
        }

        public int MarkedContentId
        {
            get
            {
                return ((__Internal*)__Instance)->marked_content_id;
            }

            set
            {
                ((__Internal*)__Instance)->marked_content_id = value;
            }
        }
    }

    public static unsafe partial class Pdfium
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDF_CreateNewDocument", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_CreateNewDocument();

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_New", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPage_New(__IntPtr document, int page_index, double width, double height);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_Delete", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPage_Delete(__IntPtr document, int page_index);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_GetRotation", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPage_GetRotation(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_SetRotation", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPage_SetRotation(__IntPtr page, int rotate);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_InsertObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPage_InsertObject(__IntPtr page, __IntPtr page_obj);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_RemoveObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPage_RemoveObject(__IntPtr page, __IntPtr page_obj);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_CountObjects", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPage_CountObjects(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_GetObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPage_GetObject(__IntPtr page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_HasTransparency", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPage_HasTransparency(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_GenerateContent", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPage_GenerateContent(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_Destroy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageObj_Destroy(__IntPtr page_obj);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_HasTransparency", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_HasTransparency(__IntPtr page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_GetType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageObj_GetType(__IntPtr page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_Transform", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageObj_Transform(__IntPtr page_object, double a, double b, double c, double d, double e, double f);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_GetMatrix", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_GetMatrix(__IntPtr page_object, __IntPtr matrix);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_SetMatrix", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_SetMatrix(__IntPtr path, __IntPtr matrix);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_TransformAnnots", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPage_TransformAnnots(__IntPtr page, double a, double b, double c, double d, double e, double f);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_NewImageObj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageObj_NewImageObj(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_CountMarks", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageObj_CountMarks(__IntPtr page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_GetMark", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageObj_GetMark(__IntPtr page_object, uint index);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_AddMark", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageObj_AddMark(__IntPtr page_object, string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_RemoveMark", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_RemoveMark(__IntPtr page_object, __IntPtr mark);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObjMark_GetName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_GetName(__IntPtr mark, __IntPtr buffer, uint buflen, uint* out_buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObjMark_CountParams", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageObjMark_CountParams(__IntPtr mark);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObjMark_GetParamKey", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_GetParamKey(__IntPtr mark, uint index, __IntPtr buffer, uint buflen, uint* out_buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObjMark_GetParamValueType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageObjMark_GetParamValueType(__IntPtr mark, string key);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObjMark_GetParamIntValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_GetParamIntValue(__IntPtr mark, string key, int* out_value);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObjMark_GetParamStringValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_GetParamStringValue(__IntPtr mark, string key, __IntPtr buffer, uint buflen, uint* out_buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObjMark_GetParamBlobValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_GetParamBlobValue(__IntPtr mark, string key, __IntPtr buffer, uint buflen, uint* out_buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObjMark_SetIntParam", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_SetIntParam(__IntPtr document, __IntPtr page_object, __IntPtr mark, string key, int value);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObjMark_SetStringParam", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_SetStringParam(__IntPtr document, __IntPtr page_object, __IntPtr mark, string key, string value);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObjMark_SetBlobParam", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_SetBlobParam(__IntPtr document, __IntPtr page_object, __IntPtr mark, string key, __IntPtr value, uint value_len);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObjMark_RemoveParam", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_RemoveParam(__IntPtr page_object, __IntPtr mark, string key);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFImageObj_LoadJpegFile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFImageObj_LoadJpegFile(__IntPtr pages, int count, __IntPtr image_object, __IntPtr file_access);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFImageObj_LoadJpegFileInline", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFImageObj_LoadJpegFileInline(__IntPtr pages, int count, __IntPtr image_object, __IntPtr file_access);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFImageObj_SetMatrix", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFImageObj_SetMatrix(__IntPtr image_object, double a, double b, double c, double d, double e, double f);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFImageObj_SetBitmap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFImageObj_SetBitmap(__IntPtr pages, int count, __IntPtr image_object, __IntPtr bitmap);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFImageObj_GetBitmap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFImageObj_GetBitmap(__IntPtr image_object);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFImageObj_GetRenderedBitmap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFImageObj_GetRenderedBitmap(__IntPtr document, __IntPtr page, __IntPtr image_object);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFImageObj_GetImageDataDecoded", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFImageObj_GetImageDataDecoded(__IntPtr image_object, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFImageObj_GetImageDataRaw", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFImageObj_GetImageDataRaw(__IntPtr image_object, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFImageObj_GetImageFilterCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFImageObj_GetImageFilterCount(__IntPtr image_object);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFImageObj_GetImageFilter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFImageObj_GetImageFilter(__IntPtr image_object, int index, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFImageObj_GetImageMetadata", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFImageObj_GetImageMetadata(__IntPtr image_object, __IntPtr page, __IntPtr metadata);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFImageObj_GetImagePixelSize", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFImageObj_GetImagePixelSize(__IntPtr image_object, uint* width, uint* height);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_CreateNewPath", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageObj_CreateNewPath(float x, float y);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_CreateNewRect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageObj_CreateNewRect(float x, float y, float w, float h);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_GetBounds", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_GetBounds(__IntPtr page_object, float* left, float* bottom, float* right, float* top);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_GetRotatedBounds", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_GetRotatedBounds(__IntPtr page_object, __IntPtr quad_points);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_SetBlendMode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageObj_SetBlendMode(__IntPtr page_object, string blend_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_SetStrokeColor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_SetStrokeColor(__IntPtr page_object, uint R, uint G, uint B, uint A);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_GetStrokeColor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_GetStrokeColor(__IntPtr page_object, uint* R, uint* G, uint* B, uint* A);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_SetStrokeWidth", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_SetStrokeWidth(__IntPtr page_object, float width);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_GetStrokeWidth", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_GetStrokeWidth(__IntPtr page_object, float* width);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_GetLineJoin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageObj_GetLineJoin(__IntPtr page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_SetLineJoin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_SetLineJoin(__IntPtr page_object, int line_join);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_GetLineCap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageObj_GetLineCap(__IntPtr page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_SetLineCap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_SetLineCap(__IntPtr page_object, int line_cap);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_SetFillColor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_SetFillColor(__IntPtr page_object, uint R, uint G, uint B, uint A);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_GetFillColor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_GetFillColor(__IntPtr page_object, uint* R, uint* G, uint* B, uint* A);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_GetDashPhase", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_GetDashPhase(__IntPtr page_object, float* phase);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_SetDashPhase", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_SetDashPhase(__IntPtr page_object, float phase);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_GetDashCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageObj_GetDashCount(__IntPtr page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_GetDashArray", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_GetDashArray(__IntPtr page_object, float* dash_array, ulong dash_count);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_SetDashArray", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_SetDashArray(__IntPtr page_object, float* dash_array, ulong dash_count, float phase);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPath_CountSegments", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPath_CountSegments(__IntPtr path);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPath_GetPathSegment", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPath_GetPathSegment(__IntPtr path, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPathSegment_GetPoint", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPathSegment_GetPoint(__IntPtr segment, float* x, float* y);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPathSegment_GetType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPathSegment_GetType(__IntPtr segment);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPathSegment_GetClose", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPathSegment_GetClose(__IntPtr segment);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPath_MoveTo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPath_MoveTo(__IntPtr path, float x, float y);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPath_LineTo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPath_LineTo(__IntPtr path, float x, float y);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPath_BezierTo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPath_BezierTo(__IntPtr path, float x1, float y1, float x2, float y2, float x3, float y3);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPath_Close", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPath_Close(__IntPtr path);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPath_SetDrawMode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPath_SetDrawMode(__IntPtr path, int fillmode, global::PdfLibCore.Types.FPDF_BOOL stroke);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPath_GetDrawMode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPath_GetDrawMode(__IntPtr path, int* fillmode, global::PdfLibCore.Types.FPDF_BOOL* stroke);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_NewTextObj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageObj_NewTextObj(__IntPtr document, string font, float font_size);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFText_SetText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFText_SetText(__IntPtr text_object, string text);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFText_SetCharcodes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFText_SetCharcodes(__IntPtr text_object, uint* charcodes, ulong count);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFText_LoadFont", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFText_LoadFont(__IntPtr document, byte* data, uint size, int font_type, global::PdfLibCore.Types.FPDF_BOOL cid);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFText_LoadStandardFont", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFText_LoadStandardFont(__IntPtr document, string font);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFTextObj_GetFontSize", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFTextObj_GetFontSize(__IntPtr text, float* size);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFFont_Close", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFFont_Close(__IntPtr font);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPageObj_CreateTextObj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageObj_CreateTextObj(__IntPtr document, __IntPtr font, float font_size);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFTextObj_GetTextRenderMode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Generated.FPDF_TEXT_RENDERMODE FPDFTextObj_GetTextRenderMode(__IntPtr text);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFTextObj_SetTextRenderMode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFTextObj_SetTextRenderMode(__IntPtr text, global::PdfLibCore.Generated.FPDF_TEXT_RENDERMODE render_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFTextObj_GetText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFTextObj_GetText(__IntPtr text_object, __IntPtr text_page, string* buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFTextObj_GetRenderedBitmap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFTextObj_GetRenderedBitmap(__IntPtr document, __IntPtr page, __IntPtr text_object, float scale);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFTextObj_GetFont", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFTextObj_GetFont(__IntPtr text);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFFont_GetFontName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFFont_GetFontName(__IntPtr font, sbyte* buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFFont_GetFontData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFFont_GetFontData(__IntPtr font, byte* buffer, ulong buflen, ulong* out_buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFFont_GetIsEmbedded", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFFont_GetIsEmbedded(__IntPtr font);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFFont_GetFlags", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFFont_GetFlags(__IntPtr font);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFFont_GetWeight", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFFont_GetWeight(__IntPtr font);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFFont_GetItalicAngle", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFFont_GetItalicAngle(__IntPtr font, int* angle);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFFont_GetAscent", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFFont_GetAscent(__IntPtr font, float font_size, float* ascent);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFFont_GetDescent", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFFont_GetDescent(__IntPtr font, float font_size, float* descent);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFFont_GetGlyphWidth", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFFont_GetGlyphWidth(__IntPtr font, uint glyph, float font_size, float* width);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFFont_GetGlyphPath", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFFont_GetGlyphPath(__IntPtr font, uint glyph, float font_size);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFGlyphPath_CountGlyphSegments", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFGlyphPath_CountGlyphSegments(__IntPtr glyphpath);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFGlyphPath_GetGlyphPathSegment", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFGlyphPath_GetGlyphPathSegment(__IntPtr glyphpath, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFFormObj_CountObjects", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFFormObj_CountObjects(__IntPtr form_object);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFFormObj_GetObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFFormObj_GetObject(__IntPtr form_object, uint index);
        }


        public static global::PdfLibCore.Generated.FPDF_Document FPDF_CreateNewDocument()
        {
            var ___ret = __Internal.FPDF_CreateNewDocument();
            var __result0 = global::PdfLibCore.Generated.FPDF_Document.__CreateInstance(___ret, false);
            return __result0;
        }


        public static global::PdfLibCore.Generated.FPDF_Page FPDFPage_New(global::PdfLibCore.Generated.FPDF_Document document, int page_index, double width, double height)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var ___ret = __Internal.FPDFPage_New(__arg0, page_index, width, height);
            var __result0 = global::PdfLibCore.Generated.FPDF_Page.__CreateInstance(___ret, false);
            return __result0;
        }


        public static void FPDFPage_Delete(global::PdfLibCore.Generated.FPDF_Document document, int page_index)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            __Internal.FPDFPage_Delete(__arg0, page_index);
        }


        public static int FPDFPage_GetRotation(global::PdfLibCore.Generated.FPDF_Page page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FPDFPage_GetRotation(__arg0);
            return ___ret;
        }


        public static void FPDFPage_SetRotation(global::PdfLibCore.Generated.FPDF_Page page, int rotate)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FPDFPage_SetRotation(__arg0, rotate);
        }


        public static void FPDFPage_InsertObject(global::PdfLibCore.Generated.FPDF_Page page, global::PdfLibCore.Generated.FPDF_Pageobject page_obj)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = page_obj is null ? __IntPtr.Zero : page_obj.__Instance;
            __Internal.FPDFPage_InsertObject(__arg0, __arg1);
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPage_RemoveObject(global::PdfLibCore.Generated.FPDF_Page page, global::PdfLibCore.Generated.FPDF_Pageobject page_obj)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = page_obj is null ? __IntPtr.Zero : page_obj.__Instance;
            var ___ret = __Internal.FPDFPage_RemoveObject(__arg0, __arg1);
            return ___ret;
        }


        public static int FPDFPage_CountObjects(global::PdfLibCore.Generated.FPDF_Page page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FPDFPage_CountObjects(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Generated.FPDF_Pageobject FPDFPage_GetObject(global::PdfLibCore.Generated.FPDF_Page page, int index)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FPDFPage_GetObject(__arg0, index);
            var __result0 = global::PdfLibCore.Generated.FPDF_Pageobject.__CreateInstance(___ret, false);
            return __result0;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPage_HasTransparency(global::PdfLibCore.Generated.FPDF_Page page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FPDFPage_HasTransparency(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPage_GenerateContent(global::PdfLibCore.Generated.FPDF_Page page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FPDFPage_GenerateContent(__arg0);
            return ___ret;
        }


        public static void FPDFPageObj_Destroy(global::PdfLibCore.Generated.FPDF_Pageobject page_obj)
        {
            var __arg0 = page_obj is null ? __IntPtr.Zero : page_obj.__Instance;
            __Internal.FPDFPageObj_Destroy(__arg0);
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_HasTransparency(global::PdfLibCore.Generated.FPDF_Pageobject page_object)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var ___ret = __Internal.FPDFPageObj_HasTransparency(__arg0);
            return ___ret;
        }


        public static int FPDFPageObj_GetType(global::PdfLibCore.Generated.FPDF_Pageobject page_object)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var ___ret = __Internal.FPDFPageObj_GetType(__arg0);
            return ___ret;
        }


        public static void FPDFPageObj_Transform(global::PdfLibCore.Generated.FPDF_Pageobject page_object, double a, double b, double c, double d, double e, double f)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            __Internal.FPDFPageObj_Transform(__arg0, a, b, c, d, e, f);
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_GetMatrix(global::PdfLibCore.Generated.FPDF_Pageobject page_object, global::PdfLibCore.Generated.FS_MATRIX_ matrix)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __arg1 = matrix is null ? __IntPtr.Zero : matrix.__Instance;
            var ___ret = __Internal.FPDFPageObj_GetMatrix(__arg0, __arg1);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_SetMatrix(global::PdfLibCore.Generated.FPDF_Pageobject path, global::PdfLibCore.Generated.FS_MATRIX_ matrix)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            var __arg1 = matrix is null ? __IntPtr.Zero : matrix.__Instance;
            var ___ret = __Internal.FPDFPageObj_SetMatrix(__arg0, __arg1);
            return ___ret;
        }


        public static void FPDFPage_TransformAnnots(global::PdfLibCore.Generated.FPDF_Page page, double a, double b, double c, double d, double e, double f)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FPDFPage_TransformAnnots(__arg0, a, b, c, d, e, f);
        }


        public static global::PdfLibCore.Generated.FPDF_Pageobject FPDFPageObj_NewImageObj(global::PdfLibCore.Generated.FPDF_Document document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var ___ret = __Internal.FPDFPageObj_NewImageObj(__arg0);
            var __result0 = global::PdfLibCore.Generated.FPDF_Pageobject.__CreateInstance(___ret, false);
            return __result0;
        }


        public static int FPDFPageObj_CountMarks(global::PdfLibCore.Generated.FPDF_Pageobject page_object)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var ___ret = __Internal.FPDFPageObj_CountMarks(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Generated.FPDF_Pageobjectmark FPDFPageObj_GetMark(global::PdfLibCore.Generated.FPDF_Pageobject page_object, uint index)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var ___ret = __Internal.FPDFPageObj_GetMark(__arg0, index);
            var __result0 = global::PdfLibCore.Generated.FPDF_Pageobjectmark.__CreateInstance(___ret, false);
            return __result0;
        }


        public static global::PdfLibCore.Generated.FPDF_Pageobjectmark FPDFPageObj_AddMark(global::PdfLibCore.Generated.FPDF_Pageobject page_object, string name)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var ___ret = __Internal.FPDFPageObj_AddMark(__arg0, name);
            var __result0 = global::PdfLibCore.Generated.FPDF_Pageobjectmark.__CreateInstance(___ret, false);
            return __result0;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_RemoveMark(global::PdfLibCore.Generated.FPDF_Pageobject page_object, global::PdfLibCore.Generated.FPDF_Pageobjectmark mark)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __arg1 = mark is null ? __IntPtr.Zero : mark.__Instance;
            var ___ret = __Internal.FPDFPageObj_RemoveMark(__arg0, __arg1);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_GetName(global::PdfLibCore.Generated.FPDF_Pageobjectmark mark, __IntPtr buffer, uint buflen, out uint out_buflen)
        {
            var __arg0 = mark is null ? __IntPtr.Zero : mark.__Instance;
            fixed (uint* __out_buflen3 = &out_buflen)
            {
                var __arg3 = __out_buflen3;
                var ___ret = __Internal.FPDFPageObjMark_GetName(__arg0, buffer, buflen, __arg3);
                return ___ret;
            }
        }


        public static int FPDFPageObjMark_CountParams(global::PdfLibCore.Generated.FPDF_Pageobjectmark mark)
        {
            var __arg0 = mark is null ? __IntPtr.Zero : mark.__Instance;
            var ___ret = __Internal.FPDFPageObjMark_CountParams(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_GetParamKey(global::PdfLibCore.Generated.FPDF_Pageobjectmark mark, uint index, __IntPtr buffer, uint buflen, out uint out_buflen)
        {
            var __arg0 = mark is null ? __IntPtr.Zero : mark.__Instance;
            fixed (uint* __out_buflen4 = &out_buflen)
            {
                var __arg4 = __out_buflen4;
                var ___ret = __Internal.FPDFPageObjMark_GetParamKey(__arg0, index, buffer, buflen, __arg4);
                return ___ret;
            }
        }


        public static int FPDFPageObjMark_GetParamValueType(global::PdfLibCore.Generated.FPDF_Pageobjectmark mark, string key)
        {
            var __arg0 = mark is null ? __IntPtr.Zero : mark.__Instance;
            var ___ret = __Internal.FPDFPageObjMark_GetParamValueType(__arg0, key);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_GetParamIntValue(global::PdfLibCore.Generated.FPDF_Pageobjectmark mark, string key, ref int out_value)
        {
            var __arg0 = mark is null ? __IntPtr.Zero : mark.__Instance;
            fixed (int* __out_value2 = &out_value)
            {
                var __arg2 = __out_value2;
                var ___ret = __Internal.FPDFPageObjMark_GetParamIntValue(__arg0, key, __arg2);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_GetParamStringValue(global::PdfLibCore.Generated.FPDF_Pageobjectmark mark, string key, __IntPtr buffer, uint buflen, out uint out_buflen)
        {
            var __arg0 = mark is null ? __IntPtr.Zero : mark.__Instance;
            fixed (uint* __out_buflen4 = &out_buflen)
            {
                var __arg4 = __out_buflen4;
                var ___ret = __Internal.FPDFPageObjMark_GetParamStringValue(__arg0, key, buffer, buflen, __arg4);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_GetParamBlobValue(global::PdfLibCore.Generated.FPDF_Pageobjectmark mark, string key, __IntPtr buffer, uint buflen, out uint out_buflen)
        {
            var __arg0 = mark is null ? __IntPtr.Zero : mark.__Instance;
            fixed (uint* __out_buflen4 = &out_buflen)
            {
                var __arg4 = __out_buflen4;
                var ___ret = __Internal.FPDFPageObjMark_GetParamBlobValue(__arg0, key, buffer, buflen, __arg4);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_SetIntParam(global::PdfLibCore.Generated.FPDF_Document document, global::PdfLibCore.Generated.FPDF_Pageobject page_object, global::PdfLibCore.Generated.FPDF_Pageobjectmark mark, string key, int value)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __arg2 = mark is null ? __IntPtr.Zero : mark.__Instance;
            var ___ret = __Internal.FPDFPageObjMark_SetIntParam(__arg0, __arg1, __arg2, key, value);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_SetStringParam(global::PdfLibCore.Generated.FPDF_Document document, global::PdfLibCore.Generated.FPDF_Pageobject page_object, global::PdfLibCore.Generated.FPDF_Pageobjectmark mark, string key, string value)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __arg2 = mark is null ? __IntPtr.Zero : mark.__Instance;
            var ___ret = __Internal.FPDFPageObjMark_SetStringParam(__arg0, __arg1, __arg2, key, value);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_SetBlobParam(global::PdfLibCore.Generated.FPDF_Document document, global::PdfLibCore.Generated.FPDF_Pageobject page_object, global::PdfLibCore.Generated.FPDF_Pageobjectmark mark, string key, __IntPtr value, uint value_len)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __arg2 = mark is null ? __IntPtr.Zero : mark.__Instance;
            var ___ret = __Internal.FPDFPageObjMark_SetBlobParam(__arg0, __arg1, __arg2, key, value, value_len);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObjMark_RemoveParam(global::PdfLibCore.Generated.FPDF_Pageobject page_object, global::PdfLibCore.Generated.FPDF_Pageobjectmark mark, string key)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __arg1 = mark is null ? __IntPtr.Zero : mark.__Instance;
            var ___ret = __Internal.FPDFPageObjMark_RemoveParam(__arg0, __arg1, key);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFImageObj_LoadJpegFile(global::PdfLibCore.Generated.FPDF_Page pages, int count, global::PdfLibCore.Generated.FPDF_Pageobject image_object, global::PdfLibCore.Generated.FPDF_FILEACCESS file_access)
        {
            var ____arg0 = pages is null ? __IntPtr.Zero : pages.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var __arg2 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var __arg3 = file_access is null ? __IntPtr.Zero : file_access.__Instance;
            var ___ret = __Internal.FPDFImageObj_LoadJpegFile(__arg0, count, __arg2, __arg3);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFImageObj_LoadJpegFileInline(global::PdfLibCore.Generated.FPDF_Page pages, int count, global::PdfLibCore.Generated.FPDF_Pageobject image_object, global::PdfLibCore.Generated.FPDF_FILEACCESS file_access)
        {
            var ____arg0 = pages is null ? __IntPtr.Zero : pages.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var __arg2 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var __arg3 = file_access is null ? __IntPtr.Zero : file_access.__Instance;
            var ___ret = __Internal.FPDFImageObj_LoadJpegFileInline(__arg0, count, __arg2, __arg3);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFImageObj_SetMatrix(global::PdfLibCore.Generated.FPDF_Pageobject image_object, double a, double b, double c, double d, double e, double f)
        {
            var __arg0 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var ___ret = __Internal.FPDFImageObj_SetMatrix(__arg0, a, b, c, d, e, f);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFImageObj_SetBitmap(global::PdfLibCore.Generated.FPDF_Page pages, int count, global::PdfLibCore.Generated.FPDF_Pageobject image_object, global::PdfLibCore.Generated.FPDF_Bitmap bitmap)
        {
            var ____arg0 = pages is null ? __IntPtr.Zero : pages.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var __arg2 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var __arg3 = bitmap is null ? __IntPtr.Zero : bitmap.__Instance;
            var ___ret = __Internal.FPDFImageObj_SetBitmap(__arg0, count, __arg2, __arg3);
            return ___ret;
        }


        public static global::PdfLibCore.Generated.FPDF_Bitmap FPDFImageObj_GetBitmap(global::PdfLibCore.Generated.FPDF_Pageobject image_object)
        {
            var __arg0 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var ___ret = __Internal.FPDFImageObj_GetBitmap(__arg0);
            var __result0 = global::PdfLibCore.Generated.FPDF_Bitmap.__CreateInstance(___ret, false);
            return __result0;
        }


        public static global::PdfLibCore.Generated.FPDF_Bitmap FPDFImageObj_GetRenderedBitmap(global::PdfLibCore.Generated.FPDF_Document document, global::PdfLibCore.Generated.FPDF_Page page, global::PdfLibCore.Generated.FPDF_Pageobject image_object)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg2 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var ___ret = __Internal.FPDFImageObj_GetRenderedBitmap(__arg0, __arg1, __arg2);
            var __result0 = global::PdfLibCore.Generated.FPDF_Bitmap.__CreateInstance(___ret, false);
            return __result0;
        }


        public static uint FPDFImageObj_GetImageDataDecoded(global::PdfLibCore.Generated.FPDF_Pageobject image_object, __IntPtr buffer, uint buflen)
        {
            var __arg0 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var ___ret = __Internal.FPDFImageObj_GetImageDataDecoded(__arg0, buffer, buflen);
            return ___ret;
        }


        public static uint FPDFImageObj_GetImageDataRaw(global::PdfLibCore.Generated.FPDF_Pageobject image_object, __IntPtr buffer, uint buflen)
        {
            var __arg0 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var ___ret = __Internal.FPDFImageObj_GetImageDataRaw(__arg0, buffer, buflen);
            return ___ret;
        }


        public static int FPDFImageObj_GetImageFilterCount(global::PdfLibCore.Generated.FPDF_Pageobject image_object)
        {
            var __arg0 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var ___ret = __Internal.FPDFImageObj_GetImageFilterCount(__arg0);
            return ___ret;
        }


        public static uint FPDFImageObj_GetImageFilter(global::PdfLibCore.Generated.FPDF_Pageobject image_object, int index, __IntPtr buffer, uint buflen)
        {
            var __arg0 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var ___ret = __Internal.FPDFImageObj_GetImageFilter(__arg0, index, buffer, buflen);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFImageObj_GetImageMetadata(global::PdfLibCore.Generated.FPDF_Pageobject image_object, global::PdfLibCore.Generated.FPDF_Page page, out global::PdfLibCore.Generated.FPDF_IMAGEOBJ_METADATA metadata)
        {
            var __arg0 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            metadata = new global::PdfLibCore.Generated.FPDF_IMAGEOBJ_METADATA();
            var __arg2 = metadata is null ? __IntPtr.Zero : metadata.__Instance;
            var ___ret = __Internal.FPDFImageObj_GetImageMetadata(__arg0, __arg1, __arg2);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFImageObj_GetImagePixelSize(global::PdfLibCore.Generated.FPDF_Pageobject image_object, ref uint width, ref uint height)
        {
            var __arg0 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var ___ret = __Internal.FPDFImageObj_GetImagePixelSize(__arg0, __arg1, __arg2);
                    return ___ret;
                }
            }
        }


        public static global::PdfLibCore.Generated.FPDF_Pageobject FPDFPageObj_CreateNewPath(float x, float y)
        {
            var ___ret = __Internal.FPDFPageObj_CreateNewPath(x, y);
            var __result0 = global::PdfLibCore.Generated.FPDF_Pageobject.__CreateInstance(___ret, false);
            return __result0;
        }


        public static global::PdfLibCore.Generated.FPDF_Pageobject FPDFPageObj_CreateNewRect(float x, float y, float w, float h)
        {
            var ___ret = __Internal.FPDFPageObj_CreateNewRect(x, y, w, h);
            var __result0 = global::PdfLibCore.Generated.FPDF_Pageobject.__CreateInstance(___ret, false);
            return __result0;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_GetBounds(global::PdfLibCore.Generated.FPDF_Pageobject page_object, out float left, out float bottom, out float right, out float top)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            fixed (float* __left1 = &left)
            {
                var __arg1 = __left1;
                fixed (float* __bottom2 = &bottom)
                {
                    var __arg2 = __bottom2;
                    fixed (float* __right3 = &right)
                    {
                        var __arg3 = __right3;
                        fixed (float* __top4 = &top)
                        {
                            var __arg4 = __top4;
                            var ___ret = __Internal.FPDFPageObj_GetBounds(__arg0, __arg1, __arg2, __arg3, __arg4);
                            return ___ret;
                        }
                    }
                }
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_GetRotatedBounds(global::PdfLibCore.Generated.FPDF_Pageobject page_object, global::PdfLibCore.Generated.FS_QUADPOINTSF quad_points)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __arg1 = quad_points is null ? __IntPtr.Zero : quad_points.__Instance;
            var ___ret = __Internal.FPDFPageObj_GetRotatedBounds(__arg0, __arg1);
            return ___ret;
        }


        public static void FPDFPageObj_SetBlendMode(global::PdfLibCore.Generated.FPDF_Pageobject page_object, string blend_mode)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            __Internal.FPDFPageObj_SetBlendMode(__arg0, blend_mode);
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_SetStrokeColor(global::PdfLibCore.Generated.FPDF_Pageobject page_object, uint R, uint G, uint B, uint A)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var ___ret = __Internal.FPDFPageObj_SetStrokeColor(__arg0, R, G, B, A);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_GetStrokeColor(global::PdfLibCore.Generated.FPDF_Pageobject page_object, out uint R, out uint G, out uint B, out uint A)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            fixed (uint* __R1 = &R)
            {
                var __arg1 = __R1;
                fixed (uint* __G2 = &G)
                {
                    var __arg2 = __G2;
                    fixed (uint* __B3 = &B)
                    {
                        var __arg3 = __B3;
                        fixed (uint* __A4 = &A)
                        {
                            var __arg4 = __A4;
                            var ___ret = __Internal.FPDFPageObj_GetStrokeColor(__arg0, __arg1, __arg2, __arg3, __arg4);
                            return ___ret;
                        }
                    }
                }
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_SetStrokeWidth(global::PdfLibCore.Generated.FPDF_Pageobject page_object, float width)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var ___ret = __Internal.FPDFPageObj_SetStrokeWidth(__arg0, width);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_GetStrokeWidth(global::PdfLibCore.Generated.FPDF_Pageobject page_object, out float width)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            fixed (float* __width1 = &width)
            {
                var __arg1 = __width1;
                var ___ret = __Internal.FPDFPageObj_GetStrokeWidth(__arg0, __arg1);
                return ___ret;
            }
        }


        public static int FPDFPageObj_GetLineJoin(global::PdfLibCore.Generated.FPDF_Pageobject page_object)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var ___ret = __Internal.FPDFPageObj_GetLineJoin(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_SetLineJoin(global::PdfLibCore.Generated.FPDF_Pageobject page_object, int line_join)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var ___ret = __Internal.FPDFPageObj_SetLineJoin(__arg0, line_join);
            return ___ret;
        }


        public static int FPDFPageObj_GetLineCap(global::PdfLibCore.Generated.FPDF_Pageobject page_object)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var ___ret = __Internal.FPDFPageObj_GetLineCap(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_SetLineCap(global::PdfLibCore.Generated.FPDF_Pageobject page_object, int line_cap)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var ___ret = __Internal.FPDFPageObj_SetLineCap(__arg0, line_cap);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_SetFillColor(global::PdfLibCore.Generated.FPDF_Pageobject page_object, uint R, uint G, uint B, uint A)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var ___ret = __Internal.FPDFPageObj_SetFillColor(__arg0, R, G, B, A);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_GetFillColor(global::PdfLibCore.Generated.FPDF_Pageobject page_object, out uint R, out uint G, out uint B, out uint A)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            fixed (uint* __R1 = &R)
            {
                var __arg1 = __R1;
                fixed (uint* __G2 = &G)
                {
                    var __arg2 = __G2;
                    fixed (uint* __B3 = &B)
                    {
                        var __arg3 = __B3;
                        fixed (uint* __A4 = &A)
                        {
                            var __arg4 = __A4;
                            var ___ret = __Internal.FPDFPageObj_GetFillColor(__arg0, __arg1, __arg2, __arg3, __arg4);
                            return ___ret;
                        }
                    }
                }
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_GetDashPhase(global::PdfLibCore.Generated.FPDF_Pageobject page_object, ref float phase)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            fixed (float* __phase1 = &phase)
            {
                var __arg1 = __phase1;
                var ___ret = __Internal.FPDFPageObj_GetDashPhase(__arg0, __arg1);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_SetDashPhase(global::PdfLibCore.Generated.FPDF_Pageobject page_object, float phase)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var ___ret = __Internal.FPDFPageObj_SetDashPhase(__arg0, phase);
            return ___ret;
        }


        public static int FPDFPageObj_GetDashCount(global::PdfLibCore.Generated.FPDF_Pageobject page_object)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var ___ret = __Internal.FPDFPageObj_GetDashCount(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_GetDashArray(global::PdfLibCore.Generated.FPDF_Pageobject page_object, ref float dash_array, ulong dash_count)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            fixed (float* __dash_array1 = &dash_array)
            {
                var __arg1 = __dash_array1;
                var ___ret = __Internal.FPDFPageObj_GetDashArray(__arg0, __arg1, dash_count);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPageObj_SetDashArray(global::PdfLibCore.Generated.FPDF_Pageobject page_object, ref float dash_array, ulong dash_count, float phase)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            fixed (float* __dash_array1 = &dash_array)
            {
                var __arg1 = __dash_array1;
                var ___ret = __Internal.FPDFPageObj_SetDashArray(__arg0, __arg1, dash_count, phase);
                return ___ret;
            }
        }


        public static int FPDFPath_CountSegments(global::PdfLibCore.Generated.FPDF_Pageobject path)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            var ___ret = __Internal.FPDFPath_CountSegments(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Generated.FpdfPathsegmentT FPDFPath_GetPathSegment(global::PdfLibCore.Generated.FPDF_Pageobject path, int index)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            var ___ret = __Internal.FPDFPath_GetPathSegment(__arg0, index);
            var __result0 = global::PdfLibCore.Generated.FpdfPathsegmentT.__CreateInstance(___ret, false);
            return __result0;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPathSegment_GetPoint(global::PdfLibCore.Generated.FpdfPathsegmentT segment, out float x, out float y)
        {
            var __arg0 = segment is null ? __IntPtr.Zero : segment.__Instance;
            fixed (float* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (float* __y2 = &y)
                {
                    var __arg2 = __y2;
                    var ___ret = __Internal.FPDFPathSegment_GetPoint(__arg0, __arg1, __arg2);
                    return ___ret;
                }
            }
        }


        public static int FPDFPathSegment_GetType(global::PdfLibCore.Generated.FpdfPathsegmentT segment)
        {
            var __arg0 = segment is null ? __IntPtr.Zero : segment.__Instance;
            var ___ret = __Internal.FPDFPathSegment_GetType(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPathSegment_GetClose(global::PdfLibCore.Generated.FpdfPathsegmentT segment)
        {
            var __arg0 = segment is null ? __IntPtr.Zero : segment.__Instance;
            var ___ret = __Internal.FPDFPathSegment_GetClose(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPath_MoveTo(global::PdfLibCore.Generated.FPDF_Pageobject path, float x, float y)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            var ___ret = __Internal.FPDFPath_MoveTo(__arg0, x, y);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPath_LineTo(global::PdfLibCore.Generated.FPDF_Pageobject path, float x, float y)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            var ___ret = __Internal.FPDFPath_LineTo(__arg0, x, y);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPath_BezierTo(global::PdfLibCore.Generated.FPDF_Pageobject path, float x1, float y1, float x2, float y2, float x3, float y3)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            var ___ret = __Internal.FPDFPath_BezierTo(__arg0, x1, y1, x2, y2, x3, y3);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPath_Close(global::PdfLibCore.Generated.FPDF_Pageobject path)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            var ___ret = __Internal.FPDFPath_Close(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPath_SetDrawMode(global::PdfLibCore.Generated.FPDF_Pageobject path, int fillmode, global::PdfLibCore.Types.FPDF_BOOL stroke)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            var ___ret = __Internal.FPDFPath_SetDrawMode(__arg0, fillmode, stroke);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPath_GetDrawMode(global::PdfLibCore.Generated.FPDF_Pageobject path, ref int fillmode, out global::PdfLibCore.Types.FPDF_BOOL stroke)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            fixed (int* __fillmode1 = &fillmode)
            {
                var __arg1 = __fillmode1;
                fixed (global::PdfLibCore.Types.FPDF_BOOL* __stroke2 = &stroke)
                {
                    var __arg2 = __stroke2;
                    var ___ret = __Internal.FPDFPath_GetDrawMode(__arg0, __arg1, __arg2);
                    return ___ret;
                }
            }
        }


        public static global::PdfLibCore.Generated.FPDF_Pageobject FPDFPageObj_NewTextObj(global::PdfLibCore.Generated.FPDF_Document document, string font, float font_size)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var ___ret = __Internal.FPDFPageObj_NewTextObj(__arg0, font, font_size);
            var __result0 = global::PdfLibCore.Generated.FPDF_Pageobject.__CreateInstance(___ret, false);
            return __result0;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFText_SetText(global::PdfLibCore.Generated.FPDF_Pageobject text_object, ref string text)
        {
            var __arg0 = text_object is null ? __IntPtr.Zero : text_object.__Instance;
            var ___ret = __Internal.FPDFText_SetText(__arg0, text);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFText_SetCharcodes(global::PdfLibCore.Generated.FPDF_Pageobject text_object, ref uint charcodes, ulong count)
        {
            var __arg0 = text_object is null ? __IntPtr.Zero : text_object.__Instance;
            fixed (uint* __charcodes1 = &charcodes)
            {
                var __arg1 = __charcodes1;
                var ___ret = __Internal.FPDFText_SetCharcodes(__arg0, __arg1, count);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Generated.FPDF_Font FPDFText_LoadFont(global::PdfLibCore.Generated.FPDF_Document document, byte* data, uint size, int font_type, global::PdfLibCore.Types.FPDF_BOOL cid)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var ___ret = __Internal.FPDFText_LoadFont(__arg0, data, size, font_type, cid);
            var __result0 = global::PdfLibCore.Generated.FPDF_Font.__CreateInstance(___ret, false);
            return __result0;
        }


        public static global::PdfLibCore.Generated.FPDF_Font FPDFText_LoadStandardFont(global::PdfLibCore.Generated.FPDF_Document document, string font)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var ___ret = __Internal.FPDFText_LoadStandardFont(__arg0, font);
            var __result0 = global::PdfLibCore.Generated.FPDF_Font.__CreateInstance(___ret, false);
            return __result0;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFTextObj_GetFontSize(global::PdfLibCore.Generated.FPDF_Pageobject text, ref float size)
        {
            var __arg0 = text is null ? __IntPtr.Zero : text.__Instance;
            fixed (float* __size1 = &size)
            {
                var __arg1 = __size1;
                var ___ret = __Internal.FPDFTextObj_GetFontSize(__arg0, __arg1);
                return ___ret;
            }
        }


        public static void FPDFFont_Close(global::PdfLibCore.Generated.FPDF_Font font)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            __Internal.FPDFFont_Close(__arg0);
        }


        public static global::PdfLibCore.Generated.FPDF_Pageobject FPDFPageObj_CreateTextObj(global::PdfLibCore.Generated.FPDF_Document document, global::PdfLibCore.Generated.FPDF_Font font, float font_size)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = font is null ? __IntPtr.Zero : font.__Instance;
            var ___ret = __Internal.FPDFPageObj_CreateTextObj(__arg0, __arg1, font_size);
            var __result0 = global::PdfLibCore.Generated.FPDF_Pageobject.__CreateInstance(___ret, false);
            return __result0;
        }


        public static global::PdfLibCore.Generated.FPDF_TEXT_RENDERMODE FPDFTextObj_GetTextRenderMode(global::PdfLibCore.Generated.FPDF_Pageobject text)
        {
            var __arg0 = text is null ? __IntPtr.Zero : text.__Instance;
            var ___ret = __Internal.FPDFTextObj_GetTextRenderMode(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFTextObj_SetTextRenderMode(global::PdfLibCore.Generated.FPDF_Pageobject text, global::PdfLibCore.Generated.FPDF_TEXT_RENDERMODE render_mode)
        {
            var __arg0 = text is null ? __IntPtr.Zero : text.__Instance;
            var ___ret = __Internal.FPDFTextObj_SetTextRenderMode(__arg0, render_mode);
            return ___ret;
        }


        public static uint FPDFTextObj_GetText(global::PdfLibCore.Generated.FPDF_Pageobject text_object, global::PdfLibCore.Generated.FPDF_Textpage text_page, ref string buffer, uint length)
        {
            var __arg0 = text_object is null ? __IntPtr.Zero : text_object.__Instance;
            var __arg1 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            fixed (string* __buffer2 = &buffer)
            {
                var __arg2 = __buffer2;
                var ___ret = __Internal.FPDFTextObj_GetText(__arg0, __arg1, __arg2, length);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Generated.FPDF_Bitmap FPDFTextObj_GetRenderedBitmap(global::PdfLibCore.Generated.FPDF_Document document, global::PdfLibCore.Generated.FPDF_Page page, global::PdfLibCore.Generated.FPDF_Pageobject text_object, float scale)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg2 = text_object is null ? __IntPtr.Zero : text_object.__Instance;
            var ___ret = __Internal.FPDFTextObj_GetRenderedBitmap(__arg0, __arg1, __arg2, scale);
            var __result0 = global::PdfLibCore.Generated.FPDF_Bitmap.__CreateInstance(___ret, false);
            return __result0;
        }


        public static global::PdfLibCore.Generated.FPDF_Font FPDFTextObj_GetFont(global::PdfLibCore.Generated.FPDF_Pageobject text)
        {
            var __arg0 = text is null ? __IntPtr.Zero : text.__Instance;
            var ___ret = __Internal.FPDFTextObj_GetFont(__arg0);
            var __result0 = global::PdfLibCore.Generated.FPDF_Font.__CreateInstance(___ret, false);
            return __result0;
        }


        public static uint FPDFFont_GetFontName(global::PdfLibCore.Generated.FPDF_Font font, sbyte* buffer, uint length)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            var ___ret = __Internal.FPDFFont_GetFontName(__arg0, buffer, length);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFFont_GetFontData(global::PdfLibCore.Generated.FPDF_Font font, byte* buffer, ulong buflen, ref ulong out_buflen)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            fixed (ulong* __out_buflen3 = &out_buflen)
            {
                var __arg3 = __out_buflen3;
                var ___ret = __Internal.FPDFFont_GetFontData(__arg0, buffer, buflen, __arg3);
                return ___ret;
            }
        }


        public static int FPDFFont_GetIsEmbedded(global::PdfLibCore.Generated.FPDF_Font font)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            var ___ret = __Internal.FPDFFont_GetIsEmbedded(__arg0);
            return ___ret;
        }


        public static int FPDFFont_GetFlags(global::PdfLibCore.Generated.FPDF_Font font)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            var ___ret = __Internal.FPDFFont_GetFlags(__arg0);
            return ___ret;
        }


        public static int FPDFFont_GetWeight(global::PdfLibCore.Generated.FPDF_Font font)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            var ___ret = __Internal.FPDFFont_GetWeight(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFFont_GetItalicAngle(global::PdfLibCore.Generated.FPDF_Font font, ref int angle)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            fixed (int* __angle1 = &angle)
            {
                var __arg1 = __angle1;
                var ___ret = __Internal.FPDFFont_GetItalicAngle(__arg0, __arg1);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFFont_GetAscent(global::PdfLibCore.Generated.FPDF_Font font, float font_size, ref float ascent)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            fixed (float* __ascent2 = &ascent)
            {
                var __arg2 = __ascent2;
                var ___ret = __Internal.FPDFFont_GetAscent(__arg0, font_size, __arg2);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFFont_GetDescent(global::PdfLibCore.Generated.FPDF_Font font, float font_size, ref float descent)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            fixed (float* __descent2 = &descent)
            {
                var __arg2 = __descent2;
                var ___ret = __Internal.FPDFFont_GetDescent(__arg0, font_size, __arg2);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFFont_GetGlyphWidth(global::PdfLibCore.Generated.FPDF_Font font, uint glyph, float font_size, ref float width)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            fixed (float* __width3 = &width)
            {
                var __arg3 = __width3;
                var ___ret = __Internal.FPDFFont_GetGlyphWidth(__arg0, glyph, font_size, __arg3);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Generated.FPDF_Glyphpath FPDFFont_GetGlyphPath(global::PdfLibCore.Generated.FPDF_Font font, uint glyph, float font_size)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            var ___ret = __Internal.FPDFFont_GetGlyphPath(__arg0, glyph, font_size);
            var __result0 = global::PdfLibCore.Generated.FPDF_Glyphpath.__CreateInstance(___ret, false);
            return __result0;
        }


        public static int FPDFGlyphPath_CountGlyphSegments(global::PdfLibCore.Generated.FPDF_Glyphpath glyphpath)
        {
            var __arg0 = glyphpath is null ? __IntPtr.Zero : glyphpath.__Instance;
            var ___ret = __Internal.FPDFGlyphPath_CountGlyphSegments(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Generated.FpdfPathsegmentT FPDFGlyphPath_GetGlyphPathSegment(global::PdfLibCore.Generated.FPDF_Glyphpath glyphpath, int index)
        {
            var __arg0 = glyphpath is null ? __IntPtr.Zero : glyphpath.__Instance;
            var ___ret = __Internal.FPDFGlyphPath_GetGlyphPathSegment(__arg0, index);
            var __result0 = global::PdfLibCore.Generated.FpdfPathsegmentT.__CreateInstance(___ret, false);
            return __result0;
        }


        public static int FPDFFormObj_CountObjects(global::PdfLibCore.Generated.FPDF_Pageobject form_object)
        {
            var __arg0 = form_object is null ? __IntPtr.Zero : form_object.__Instance;
            var ___ret = __Internal.FPDFFormObj_CountObjects(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Generated.FPDF_Pageobject FPDFFormObj_GetObject(global::PdfLibCore.Generated.FPDF_Pageobject form_object, uint index)
        {
            var __arg0 = form_object is null ? __IntPtr.Zero : form_object.__Instance;
            var ___ret = __Internal.FPDFFormObj_GetObject(__arg0, index);
            var __result0 = global::PdfLibCore.Generated.FPDF_Pageobject.__CreateInstance(___ret, false);
            return __result0;
        }
    }
}
