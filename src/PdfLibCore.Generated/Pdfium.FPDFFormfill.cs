// Built from precompiled binaries at https://github.com/bblanchon/pdfium-binaries/releases/tag/chromium/5772
// Github release api https://api.github.com/repos/bblanchon/pdfium-binaries/releases/102934879
// PDFium version v115.0.5772.0 chromium/5772 [master]
// Built on: Wed, 17 May 2023 14:53:10 GMT

// ReSharper disable all
#pragma warning disable CS8500 // This takes the address of, gets the size of, or declares a pointer to a managed type

// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace PdfLibCore.Generated
{
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void TimerCallback(int idEvent);

    public unsafe partial class IPDF_JsPlatform : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 104)]
        public partial struct __Internal
        {
            internal int version;
            internal __IntPtr app_alert;
            internal __IntPtr app_beep;
            internal __IntPtr app_response;
            internal __IntPtr Doc_getFilePath;
            internal __IntPtr Doc_mail;
            internal __IntPtr Doc_print;
            internal __IntPtr Doc_submitForm;
            internal __IntPtr Doc_gotoPage;
            internal __IntPtr Field_browse;
            internal __IntPtr m_pFormfillinfo;
            internal __IntPtr m_isolate;
            internal uint m_v8EmbedderSlot;

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "??0_IPDF_JsPlatform@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        protected bool __ownsNativeInstance;

        internal static IPDF_JsPlatform __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IPDF_JsPlatform(native.ToPointer(), skipVTables);
        }

        internal static IPDF_JsPlatform __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IPDF_JsPlatform(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IPDF_JsPlatform(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
        }

        protected IPDF_JsPlatform(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public IPDF_JsPlatform()
        {
            if (GetType().FullName != "PdfLibCore.Generated.IPDF_JsPlatform")
                throw new Exception("PdfLibCore.Generated.IPDF_JsPlatform: Can't inherit from classes with disabled NativeToManaged map");
            __Instance = Marshal.AllocHGlobal(sizeof(global::PdfLibCore.Generated.IPDF_JsPlatform.__Internal));
            __ownsNativeInstance = true;
        }

        public IPDF_JsPlatform(global::PdfLibCore.Generated.IPDF_JsPlatform _0)
        {
            if (GetType().FullName != "PdfLibCore.Generated.IPDF_JsPlatform")
                throw new Exception("PdfLibCore.Generated.IPDF_JsPlatform: Can't inherit from classes with disabled NativeToManaged map");
            __Instance = Marshal.AllocHGlobal(sizeof(global::PdfLibCore.Generated.IPDF_JsPlatform.__Internal));
            __ownsNativeInstance = true;
            *((global::PdfLibCore.Generated.IPDF_JsPlatform.__Internal*) __Instance) = *((global::PdfLibCore.Generated.IPDF_JsPlatform.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Version
        {
            get
            {
                return ((__Internal*)__Instance)->version;
            }

            set
            {
                ((__Internal*)__Instance)->version = value;
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func_int___IntPtr_string_string_int_int AppAlert
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->app_alert;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func_int___IntPtr_string_string_int_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func_int___IntPtr_string_string_int_int));
            }

            set
            {
                ((__Internal*)__Instance)->app_alert = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr_int AppBeep
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->app_beep;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->app_beep = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func_int___IntPtr_string_string_string_string_PdfLibCore_Types_FPDF_BOOL___IntPtr_int AppResponse
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->app_response;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func_int___IntPtr_string_string_string_string_PdfLibCore_Types_FPDF_BOOL___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func_int___IntPtr_string_string_string_string_PdfLibCore_Types_FPDF_BOOL___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->app_response = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr_int Doc_getFilePath
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Doc_getFilePath;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->Doc_getFilePath = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_int_PdfLibCore_Types_FPDF_BOOL_string_string_string_string_string Doc_mail
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Doc_mail;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_int_PdfLibCore_Types_FPDF_BOOL_string_string_string_string_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_int_PdfLibCore_Types_FPDF_BOOL_string_string_string_string_string));
            }

            set
            {
                ((__Internal*)__Instance)->Doc_mail = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr_PdfLibCore_Types_FPDF_BOOL_int_int_PdfLibCore_Types_FPDF_BOOL_PdfLibCore_Types_FPDF_BOOL_PdfLibCore_Types_FPDF_BOOL_PdfLibCore_Types_FPDF_BOOL_PdfLibCore_Types_FPDF_BOOL Doc_print
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Doc_print;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr_PdfLibCore_Types_FPDF_BOOL_int_int_PdfLibCore_Types_FPDF_BOOL_PdfLibCore_Types_FPDF_BOOL_PdfLibCore_Types_FPDF_BOOL_PdfLibCore_Types_FPDF_BOOL_PdfLibCore_Types_FPDF_BOOL) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr_PdfLibCore_Types_FPDF_BOOL_int_int_PdfLibCore_Types_FPDF_BOOL_PdfLibCore_Types_FPDF_BOOL_PdfLibCore_Types_FPDF_BOOL_PdfLibCore_Types_FPDF_BOOL_PdfLibCore_Types_FPDF_BOOL));
            }

            set
            {
                ((__Internal*)__Instance)->Doc_print = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_int_string Doc_submitForm
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Doc_submitForm;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_int_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_int_string));
            }

            set
            {
                ((__Internal*)__Instance)->Doc_submitForm = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr_int Doc_gotoPage
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Doc_gotoPage;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->Doc_gotoPage = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr_int Field_browse
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Field_browse;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->Field_browse = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public __IntPtr MPFormfillinfo
        {
            get
            {
                return ((__Internal*)__Instance)->m_pFormfillinfo;
            }

            set
            {
                ((__Internal*)__Instance)->m_pFormfillinfo = (__IntPtr) value;
            }
        }

        public __IntPtr MIsolate
        {
            get
            {
                return ((__Internal*)__Instance)->m_isolate;
            }

            set
            {
                ((__Internal*)__Instance)->m_isolate = (__IntPtr) value;
            }
        }

        public uint MV8EmbedderSlot
        {
            get
            {
                return ((__Internal*)__Instance)->m_v8EmbedderSlot;
            }

            set
            {
                ((__Internal*)__Instance)->m_v8EmbedderSlot = value;
            }
        }
    }

    public unsafe partial class FPDF_SYSTEMTIME : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal ushort wYear;
            internal ushort wMonth;
            internal ushort wDayOfWeek;
            internal ushort wDay;
            internal ushort wHour;
            internal ushort wMinute;
            internal ushort wSecond;
            internal ushort wMilliseconds;

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "??0_FPDF_SYSTEMTIME@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        protected bool __ownsNativeInstance;

        internal static FPDF_SYSTEMTIME __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new FPDF_SYSTEMTIME(native.ToPointer(), skipVTables);
        }

        internal static FPDF_SYSTEMTIME __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDF_SYSTEMTIME(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDF_SYSTEMTIME(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
        }

        protected FPDF_SYSTEMTIME(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDF_SYSTEMTIME()
        {
            if (GetType().FullName != "PdfLibCore.Generated.FPDF_SYSTEMTIME")
                throw new Exception("PdfLibCore.Generated.FPDF_SYSTEMTIME: Can't inherit from classes with disabled NativeToManaged map");
            __Instance = Marshal.AllocHGlobal(sizeof(global::PdfLibCore.Generated.FPDF_SYSTEMTIME.__Internal));
            __ownsNativeInstance = true;
        }

        public FPDF_SYSTEMTIME(global::PdfLibCore.Generated.FPDF_SYSTEMTIME _0)
        {
            if (GetType().FullName != "PdfLibCore.Generated.FPDF_SYSTEMTIME")
                throw new Exception("PdfLibCore.Generated.FPDF_SYSTEMTIME: Can't inherit from classes with disabled NativeToManaged map");
            __Instance = Marshal.AllocHGlobal(sizeof(global::PdfLibCore.Generated.FPDF_SYSTEMTIME.__Internal));
            __ownsNativeInstance = true;
            *((global::PdfLibCore.Generated.FPDF_SYSTEMTIME.__Internal*) __Instance) = *((global::PdfLibCore.Generated.FPDF_SYSTEMTIME.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort WYear
        {
            get
            {
                return ((__Internal*)__Instance)->wYear;
            }

            set
            {
                ((__Internal*)__Instance)->wYear = value;
            }
        }

        public ushort WMonth
        {
            get
            {
                return ((__Internal*)__Instance)->wMonth;
            }

            set
            {
                ((__Internal*)__Instance)->wMonth = value;
            }
        }

        public ushort WDayOfWeek
        {
            get
            {
                return ((__Internal*)__Instance)->wDayOfWeek;
            }

            set
            {
                ((__Internal*)__Instance)->wDayOfWeek = value;
            }
        }

        public ushort WDay
        {
            get
            {
                return ((__Internal*)__Instance)->wDay;
            }

            set
            {
                ((__Internal*)__Instance)->wDay = value;
            }
        }

        public ushort WHour
        {
            get
            {
                return ((__Internal*)__Instance)->wHour;
            }

            set
            {
                ((__Internal*)__Instance)->wHour = value;
            }
        }

        public ushort WMinute
        {
            get
            {
                return ((__Internal*)__Instance)->wMinute;
            }

            set
            {
                ((__Internal*)__Instance)->wMinute = value;
            }
        }

        public ushort WSecond
        {
            get
            {
                return ((__Internal*)__Instance)->wSecond;
            }

            set
            {
                ((__Internal*)__Instance)->wSecond = value;
            }
        }

        public ushort WMilliseconds
        {
            get
            {
                return ((__Internal*)__Instance)->wMilliseconds;
            }

            set
            {
                ((__Internal*)__Instance)->wMilliseconds = value;
            }
        }
    }

    public unsafe partial class FPDF_FORMFILLINFO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 280)]
        public partial struct __Internal
        {
            internal int version;
            internal __IntPtr Release;
            internal __IntPtr FFI_Invalidate;
            internal __IntPtr FFI_OutputSelectedRect;
            internal __IntPtr FFI_SetCursor;
            internal __IntPtr FFI_SetTimer;
            internal __IntPtr FFI_KillTimer;
            internal __IntPtr FFI_GetLocalTime;
            internal __IntPtr FFI_OnChange;
            internal __IntPtr FFI_GetPage;
            internal __IntPtr FFI_GetCurrentPage;
            internal __IntPtr FFI_GetRotation;
            internal __IntPtr FFI_ExecuteNamedAction;
            internal __IntPtr FFI_SetTextFieldFocus;
            internal __IntPtr FFI_DoURIAction;
            internal __IntPtr FFI_DoGoToAction;
            internal __IntPtr m_pJsPlatform;
            internal global::PdfLibCore.Types.FPDF_BOOL xfa_disabled;
            internal __IntPtr FFI_DisplayCaret;
            internal __IntPtr FFI_GetCurrentPageIndex;
            internal __IntPtr FFI_SetCurrentPage;
            internal __IntPtr FFI_GotoURL;
            internal __IntPtr FFI_GetPageViewRect;
            internal __IntPtr FFI_PageEvent;
            internal __IntPtr FFI_PopupMenu;
            internal __IntPtr FFI_OpenFile;
            internal __IntPtr FFI_EmailTo;
            internal __IntPtr FFI_UploadTo;
            internal __IntPtr FFI_GetPlatform;
            internal __IntPtr FFI_GetLanguage;
            internal __IntPtr FFI_DownloadFromURL;
            internal __IntPtr FFI_PostRequestURL;
            internal __IntPtr FFI_PutRequestURL;
            internal __IntPtr FFI_OnFocusChange;
            internal __IntPtr FFI_DoURIActionWithKeyboardModifier;

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "??0_FPDF_FORMFILLINFO@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        protected bool __ownsNativeInstance;

        internal static FPDF_FORMFILLINFO __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new FPDF_FORMFILLINFO(native.ToPointer(), skipVTables);
        }

        internal static FPDF_FORMFILLINFO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDF_FORMFILLINFO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDF_FORMFILLINFO(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
        }

        protected FPDF_FORMFILLINFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDF_FORMFILLINFO()
        {
            if (GetType().FullName != "PdfLibCore.Generated.FPDF_FORMFILLINFO")
                throw new Exception("PdfLibCore.Generated.FPDF_FORMFILLINFO: Can't inherit from classes with disabled NativeToManaged map");
            __Instance = Marshal.AllocHGlobal(sizeof(global::PdfLibCore.Generated.FPDF_FORMFILLINFO.__Internal));
            __ownsNativeInstance = true;
        }

        public FPDF_FORMFILLINFO(global::PdfLibCore.Generated.FPDF_FORMFILLINFO _0)
        {
            if (GetType().FullName != "PdfLibCore.Generated.FPDF_FORMFILLINFO")
                throw new Exception("PdfLibCore.Generated.FPDF_FORMFILLINFO: Can't inherit from classes with disabled NativeToManaged map");
            __Instance = Marshal.AllocHGlobal(sizeof(global::PdfLibCore.Generated.FPDF_FORMFILLINFO.__Internal));
            __ownsNativeInstance = true;
            *((global::PdfLibCore.Generated.FPDF_FORMFILLINFO.__Internal*) __Instance) = *((global::PdfLibCore.Generated.FPDF_FORMFILLINFO.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Version
        {
            get
            {
                return ((__Internal*)__Instance)->version;
            }

            set
            {
                ((__Internal*)__Instance)->version = value;
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr Release
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Release;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Release = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_double_double_double_double FFI_Invalidate
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_Invalidate;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_double_double_double_double) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_double_double_double_double));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_Invalidate = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_double_double_double_double FFI_OutputSelectedRect
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_OutputSelectedRect;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_double_double_double_double) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_double_double_double_double));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_OutputSelectedRect = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr_int FFI_SetCursor
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_SetCursor;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_SetCursor = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func_int___IntPtr_int_PdfLibCore_Generated_TimerCallback FFI_SetTimer
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_SetTimer;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func_int___IntPtr_int_PdfLibCore_Generated_TimerCallback) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func_int___IntPtr_int_PdfLibCore_Generated_TimerCallback));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_SetTimer = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr_int FFI_KillTimer
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_KillTimer;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_KillTimer = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func_PdfLibCore_Generated__FPDF_SYSTEMTIME___Internal___IntPtr FFI_GetLocalTime
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GetLocalTime;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func_PdfLibCore_Generated__FPDF_SYSTEMTIME___Internal___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func_PdfLibCore_Generated__FPDF_SYSTEMTIME___Internal___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GetLocalTime = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr FFI_OnChange
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_OnChange;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_OnChange = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr___IntPtr_int FFI_GetPage
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GetPage;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GetPage = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr___IntPtr FFI_GetCurrentPage
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GetCurrentPage;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GetCurrentPage = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr FFI_GetRotation
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GetRotation;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GetRotation = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr_string FFI_ExecuteNamedAction
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_ExecuteNamedAction;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr_string));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_ExecuteNamedAction = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr_string_long_PdfLibCore_Types_FPDF_BOOL FFI_SetTextFieldFocus
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_SetTextFieldFocus;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr_string_long_PdfLibCore_Types_FPDF_BOOL) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr_string_long_PdfLibCore_Types_FPDF_BOOL));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_SetTextFieldFocus = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr_string FFI_DoURIAction
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_DoURIAction;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr_string));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_DoURIAction = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr_int_int_floatPtr_int FFI_DoGoToAction
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_DoGoToAction;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr_int_int_floatPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr_int_int_floatPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_DoGoToAction = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.IPDF_JsPlatform MPJsPlatform
        {
            get
            {
                var __result0 = global::PdfLibCore.Generated.IPDF_JsPlatform.__CreateInstance(((__Internal*)__Instance)->m_pJsPlatform, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pJsPlatform = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::PdfLibCore.Types.FPDF_BOOL XfaDisabled
        {
            get
            {
                return ((__Internal*)__Instance)->xfa_disabled;
            }

            set
            {
                ((__Internal*)__Instance)->xfa_disabled = value;
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_PdfLibCore_Types_FPDF_BOOL_double_double_double_double FFI_DisplayCaret
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_DisplayCaret;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_PdfLibCore_Types_FPDF_BOOL_double_double_double_double) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_PdfLibCore_Types_FPDF_BOOL_double_double_double_double));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_DisplayCaret = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr FFI_GetCurrentPageIndex
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GetCurrentPageIndex;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GetCurrentPageIndex = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_int FFI_SetCurrentPage
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_SetCurrentPage;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_SetCurrentPage = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_string FFI_GotoURL
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GotoURL;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_string));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GotoURL = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_doublePtr_doublePtr_doublePtr_doublePtr FFI_GetPageViewRect
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GetPageViewRect;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_doublePtr_doublePtr_doublePtr_doublePtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_doublePtr_doublePtr_doublePtr_doublePtr));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GetPageViewRect = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr_int_long FFI_PageEvent
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_PageEvent;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr_int_long) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr_int_long));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_PageEvent = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func_PdfLibCore_Types_FPDF_BOOL___IntPtr___IntPtr___IntPtr_int_float_float FFI_PopupMenu
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_PopupMenu;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func_PdfLibCore_Types_FPDF_BOOL___IntPtr___IntPtr___IntPtr_int_float_float) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func_PdfLibCore_Types_FPDF_BOOL___IntPtr___IntPtr___IntPtr_int_float_float));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_PopupMenu = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr_int_string_string8 FFI_OpenFile
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_OpenFile;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr_int_string_string8) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr_int_string_string8));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_OpenFile = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_string_string_string_string_string FFI_EmailTo
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_EmailTo;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_string_string_string_string_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_string_string_string_string_string));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_EmailTo = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_int_string FFI_UploadTo
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_UploadTo;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_int_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_int_string));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_UploadTo = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr_int FFI_GetPlatform
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GetPlatform;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GetPlatform = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr_int FFI_GetLanguage
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GetLanguage;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GetLanguage = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr_string FFI_DownloadFromURL
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_DownloadFromURL;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr_string));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_DownloadFromURL = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func_PdfLibCore_Types_FPDF_BOOL___IntPtr_string_string_string_string_string___IntPtr FFI_PostRequestURL
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_PostRequestURL;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func_PdfLibCore_Types_FPDF_BOOL___IntPtr_string_string_string_string_string___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func_PdfLibCore_Types_FPDF_BOOL___IntPtr_string_string_string_string_string___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_PostRequestURL = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func_PdfLibCore_Types_FPDF_BOOL___IntPtr_string_string_string FFI_PutRequestURL
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_PutRequestURL;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func_PdfLibCore_Types_FPDF_BOOL___IntPtr_string_string_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func_PdfLibCore_Types_FPDF_BOOL___IntPtr_string_string_string));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_PutRequestURL = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_int FFI_OnFocusChange
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_OnFocusChange;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_OnFocusChange = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>
        /// <para>Method: FFI_DoURIActionWithKeyboardModifier</para>
        /// <para>Ask the implementation to navigate to a uniform resource identifier</para>
        /// <para>with the specified modifiers.</para>
        /// <para>Interface Version:</para>
        /// <para>Ignored if |version|&lt;2.</para>
        /// <para>Implementation Required:</para>
        /// <para>No</para>
        /// <para>Parameters:</para>
        /// <para>param           -   Pointer to the interface structure itself.</para>
        /// <para>uri             -   A byte string which indicates the uniform</para>
        /// <para>resource identifier, terminated by 0.</para>
        /// <para>modifiers       -   Keyboard modifier that indicates which of</para>
        /// <para>the virtual keys are down, if any.</para>
        /// <para>Return value:</para>
        /// <para>None.</para>
        /// <para>Comments:</para>
        /// <para>If the embedder who is version 2 and does not implement this API,</para>
        /// <para>then a call will be redirected to FFI_DoURIAction.</para>
        /// <para>See the URI actions description of&lt;Reference, version 1.7&gt;&gt;</para>
        /// <para>for more details.</para>
        /// </summary>
        public global::PdfLibCore.Generated.Delegates.Action___IntPtr_string_int FFI_DoURIActionWithKeyboardModifier
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_DoURIActionWithKeyboardModifier;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr_string_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr_string_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_DoURIActionWithKeyboardModifier = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public static unsafe partial class Pdfium
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFDOC_InitFormFillEnvironment", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFDOC_InitFormFillEnvironment(__IntPtr document, __IntPtr formInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFDOC_ExitFormFillEnvironment", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFDOC_ExitFormFillEnvironment(__IntPtr hHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_OnAfterLoadPage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FORM_OnAfterLoadPage(__IntPtr page, __IntPtr hHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_OnBeforeClosePage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FORM_OnBeforeClosePage(__IntPtr page, __IntPtr hHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_DoDocumentJSAction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FORM_DoDocumentJSAction(__IntPtr hHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_DoDocumentOpenAction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FORM_DoDocumentOpenAction(__IntPtr hHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_DoDocumentAAction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FORM_DoDocumentAAction(__IntPtr hHandle, int aaType);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_DoPageAAction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FORM_DoPageAAction(__IntPtr page, __IntPtr hHandle, int aaType);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_OnMouseMove", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_OnMouseMove(__IntPtr hHandle, __IntPtr page, int modifier, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_OnMouseWheel", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_OnMouseWheel(__IntPtr hHandle, __IntPtr page, int modifier, __IntPtr page_coord, int delta_x, int delta_y);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_OnFocus", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_OnFocus(__IntPtr hHandle, __IntPtr page, int modifier, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_OnLButtonDown", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_OnLButtonDown(__IntPtr hHandle, __IntPtr page, int modifier, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_OnRButtonDown", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_OnRButtonDown(__IntPtr hHandle, __IntPtr page, int modifier, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_OnLButtonUp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_OnLButtonUp(__IntPtr hHandle, __IntPtr page, int modifier, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_OnRButtonUp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_OnRButtonUp(__IntPtr hHandle, __IntPtr page, int modifier, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_OnLButtonDoubleClick", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_OnLButtonDoubleClick(__IntPtr hHandle, __IntPtr page, int modifier, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_OnKeyDown", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_OnKeyDown(__IntPtr hHandle, __IntPtr page, int nKeyCode, int modifier);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_OnKeyUp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_OnKeyUp(__IntPtr hHandle, __IntPtr page, int nKeyCode, int modifier);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_OnChar", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_OnChar(__IntPtr hHandle, __IntPtr page, int nChar, int modifier);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_GetFocusedText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FORM_GetFocusedText(__IntPtr hHandle, __IntPtr page, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_GetSelectedText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FORM_GetSelectedText(__IntPtr hHandle, __IntPtr page, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_ReplaceAndKeepSelection", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FORM_ReplaceAndKeepSelection(__IntPtr hHandle, __IntPtr page, string wsText);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_ReplaceSelection", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FORM_ReplaceSelection(__IntPtr hHandle, __IntPtr page, string wsText);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_SelectAllText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_SelectAllText(__IntPtr hHandle, __IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_CanUndo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_CanUndo(__IntPtr hHandle, __IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_CanRedo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_CanRedo(__IntPtr hHandle, __IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_Undo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_Undo(__IntPtr hHandle, __IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_Redo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_Redo(__IntPtr hHandle, __IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_ForceToKillFocus", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_ForceToKillFocus(__IntPtr hHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_GetFocusedAnnot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_GetFocusedAnnot(__IntPtr handle, int* page_index, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_SetFocusedAnnot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_SetFocusedAnnot(__IntPtr handle, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_HasFormFieldAtPoint", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPage_HasFormFieldAtPoint(__IntPtr hHandle, __IntPtr page, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_FormFieldZOrderAtPoint", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPage_FormFieldZOrderAtPoint(__IntPtr hHandle, __IntPtr page, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDF_SetFormFieldHighlightColor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_SetFormFieldHighlightColor(__IntPtr hHandle, int fieldType, uint color);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDF_SetFormFieldHighlightAlpha", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_SetFormFieldHighlightAlpha(__IntPtr hHandle, byte alpha);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDF_RemoveFormFieldHighlight", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_RemoveFormFieldHighlight(__IntPtr hHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDF_FFLDraw", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_FFLDraw(__IntPtr hHandle, __IntPtr bitmap, __IntPtr page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDF_GetFormType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDF_GetFormType(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_SetIndexSelected", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_SetIndexSelected(__IntPtr hHandle, __IntPtr page, int index, global::PdfLibCore.Types.FPDF_BOOL selected);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FORM_IsIndexSelected", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FORM_IsIndexSelected(__IntPtr hHandle, __IntPtr page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDF_LoadXFA", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDF_LoadXFA(__IntPtr document);
        }

        /// <summary>Initialize form fill environment.</summary>
        /// <param name="document">Handle to document from FPDF_LoadDocument().</param>
        /// <param name="formInfo">Pointer to a FPDF_FORMFILLINFO structure.</param>
        /// <remarks>
        /// This function should be called before any form fill operation.
        /// The FPDF_FORMFILLINFO passed in via |formInfo| must remain valid until
        /// the returned FPDF_FORMHANDLE is closed.
        /// /
        /// </remarks>
        /// <returns>Handle to the form fill module, or NULL on failure.</returns>
        public static global::PdfLibCore.Generated.FPDF_Form_handle FPDFDOC_InitFormFillEnvironment(global::PdfLibCore.Generated.FPDF_Document document, global::PdfLibCore.Generated.FPDF_FORMFILLINFO formInfo)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = formInfo is null ? __IntPtr.Zero : formInfo.__Instance;
            var ___ret = __Internal.FPDFDOC_InitFormFillEnvironment(__arg0, __arg1);
            var __result0 = global::PdfLibCore.Generated.FPDF_Form_handle.__CreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>Take ownership of |hHandle| and exit form fill environment.</summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <remarks>This function is a no-op when |hHandle| is null. /</remarks>
        public static void FPDFDOC_ExitFormFillEnvironment(global::PdfLibCore.Generated.FPDF_Form_handle hHandle)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FPDFDOC_ExitFormFillEnvironment(__arg0);
        }

        /// <summary>
        /// This method is required for implementing all the form related
        /// functions. Should be invoked after user successfully loaded a
        /// PDF page, and FPDFDOC_InitFormFillEnvironment() has been invoked.
        /// </summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <returns>None. /</returns>
        public static void FORM_OnAfterLoadPage(global::PdfLibCore.Generated.FPDF_Page page, global::PdfLibCore.Generated.FPDF_Form_handle hHandle)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FORM_OnAfterLoadPage(__arg0, __arg1);
        }

        /// <summary>
        /// This method is required for implementing all the form related
        /// functions. Should be invoked before user closes the PDF page.
        /// </summary>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <returns>None. /</returns>
        public static void FORM_OnBeforeClosePage(global::PdfLibCore.Generated.FPDF_Page page, global::PdfLibCore.Generated.FPDF_Form_handle hHandle)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FORM_OnBeforeClosePage(__arg0, __arg1);
        }

        /// <summary>
        /// This method is required for performing document-level JavaScript
        /// actions. It should be invoked after the PDF document has been loaded.
        /// </summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <remarks>
        /// If there is document-level JavaScript action embedded in the
        /// document, this method will execute the JavaScript action. Otherwise,
        /// the method will do nothing.
        /// /
        /// </remarks>
        public static void FORM_DoDocumentJSAction(global::PdfLibCore.Generated.FPDF_Form_handle hHandle)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FORM_DoDocumentJSAction(__arg0);
        }

        /// <summary>This method is required for performing open-action when the document is opened.</summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <remarks>
        /// This method will do nothing if there are no open-actions embedded
        /// in the document.
        /// /
        /// </remarks>
        public static void FORM_DoDocumentOpenAction(global::PdfLibCore.Generated.FPDF_Form_handle hHandle)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FORM_DoDocumentOpenAction(__arg0);
        }

        /// <summary>This method is required for performing the document's additional-action.</summary>
        /// <param name="hHandle">Handle to the form fill module. Returned by FPDFDOC_InitFormFillEnvironment.</param>
        /// <param name="aaType">The type of the additional-actions which defined above.</param>
        /// <remarks>
        /// This method will do nothing if there is no document
        /// additional-action corresponding to the specified |aaType|.
        /// /
        /// </remarks>
        public static void FORM_DoDocumentAAction(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, int aaType)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FORM_DoDocumentAAction(__arg0, aaType);
        }

        /// <summary>This method is required for performing the page object's additional-action when opened or closed.</summary>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="aaType">The type of the page object's additional-actions which defined above.</param>
        /// <remarks>
        /// This method will do nothing if no additional-action corresponding
        /// to the specified |aaType| exists.
        /// /
        /// </remarks>
        public static void FORM_DoPageAAction(global::PdfLibCore.Generated.FPDF_Page page, global::PdfLibCore.Generated.FPDF_Form_handle hHandle, int aaType)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FORM_DoPageAAction(__arg0, __arg1, aaType);
        }

        /// <summary>Call this member function when the mouse cursor moves.</summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <param name="modifier">Indicates whether various virtual keys are down.</param>
        /// <param name="page_x">Specifies the x-coordinate of the cursor in PDF user space.</param>
        /// <param name="page_y">Specifies the y-coordinate of the cursor in PDF user space.</param>
        /// <returns>True indicates success; otherwise false. /</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_OnMouseMove(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, int modifier, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_OnMouseMove(__arg0, __arg1, modifier, page_x, page_y);
            return ___ret;
        }

        /// <summary>Call this member function when the user scrolls the mouse wheel.</summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <param name="modifier">Indicates whether various virtual keys are down.</param>
        /// <param name="page_coord">Specifies the coordinates of the cursor in PDF user space.</param>
        /// <param name="delta_x">
        /// Specifies the amount of wheel movement on the x-axis,
        /// in units of platform-agnostic wheel deltas. Negative
        /// values mean left.
        /// </param>
        /// <param name="delta_y">
        /// Specifies the amount of wheel movement on the y-axis,
        /// in units of platform-agnostic wheel deltas. Negative
        /// values mean down.
        /// </param>
        /// <remarks>
        /// For |delta_x| and |delta_y|, the caller must normalize
        /// platform-specific wheel deltas. e.g. On Windows, a delta value of 240
        /// for a WM_MOUSEWHEEL event normalizes to 2, since Windows defines
        /// WHEEL_DELTA as 120.
        /// /
        /// </remarks>
        /// <returns>True indicates success; otherwise false.</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_OnMouseWheel(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, int modifier, global::PdfLibCore.Generated.FS_POINTF_ page_coord, int delta_x, int delta_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg3 = page_coord is null ? __IntPtr.Zero : page_coord.__Instance;
            var ___ret = __Internal.FORM_OnMouseWheel(__arg0, __arg1, modifier, __arg3, delta_x, delta_y);
            return ___ret;
        }

        /// <summary>
        /// This function focuses the form annotation at a given point. If the
        /// annotation at the point already has focus, nothing happens. If there
        /// is no annotation at the point, removes form focus.
        /// </summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <param name="modifier">Indicates whether various virtual keys are down.</param>
        /// <param name="page_x">Specifies the x-coordinate of the cursor in PDF user space.</param>
        /// <param name="page_y">Specifies the y-coordinate of the cursor in PDF user space.</param>
        /// <returns>True if there is an annotation at the given point and it has focus. /</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_OnFocus(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, int modifier, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_OnFocus(__arg0, __arg1, modifier, page_x, page_y);
            return ___ret;
        }

        /// <summary>Call this member function when the user presses the left mouse button.</summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <param name="modifier">Indicates whether various virtual keys are down.</param>
        /// <param name="page_x">Specifies the x-coordinate of the cursor in PDF user space.</param>
        /// <param name="page_y">Specifies the y-coordinate of the cursor in PDF user space.</param>
        /// <returns>True indicates success; otherwise false. /</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_OnLButtonDown(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, int modifier, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_OnLButtonDown(__arg0, __arg1, modifier, page_x, page_y);
            return ___ret;
        }

        /// <summary>Same as above, execpt for the right mouse button.</summary>
        /// <remarks>
        /// At the present time, has no effect except in XFA builds, but is
        /// included for the sake of symmetry.
        /// /
        /// </remarks>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_OnRButtonDown(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, int modifier, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_OnRButtonDown(__arg0, __arg1, modifier, page_x, page_y);
            return ___ret;
        }

        /// <summary>
        /// Same as above, execpt for the right mouse button.
        /// Call this member function when the user releases the left
        /// mouse button.
        /// </summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <param name="modifier">Indicates whether various virtual keys are down.</param>
        /// <param name="page_x">Specifies the x-coordinate of the cursor in device.</param>
        /// <param name="page_y">Specifies the y-coordinate of the cursor in device.</param>
        /// <remarks>
        /// At the present time, has no effect except in XFA builds, but is
        /// included for the sake of symmetry.
        /// /
        /// DF_EXPORT FPDF_BOOL FPDF_CALLCONV FORM_OnRButtonDown(FPDF_FORMHANDLE hHandle,
        /// FPDF_PAGE page,
        /// int modifier,
        /// double page_x,
        /// double page_y);
        /// </remarks>
        /// <returns>True indicates success; otherwise false. /</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_OnLButtonUp(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, int modifier, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_OnLButtonUp(__arg0, __arg1, modifier, page_x, page_y);
            return ___ret;
        }

        /// <summary>Same as above, execpt for the right mouse button.</summary>
        /// <remarks>
        /// At the present time, has no effect except in XFA builds, but is
        /// included for the sake of symmetry.
        /// /
        /// </remarks>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_OnRButtonUp(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, int modifier, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_OnRButtonUp(__arg0, __arg1, modifier, page_x, page_y);
            return ___ret;
        }

        /// <summary>Call this member function when the user double clicks the left mouse button.</summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <param name="modifier">Indicates whether various virtual keys are down.</param>
        /// <param name="page_x">Specifies the x-coordinate of the cursor in PDF user space.</param>
        /// <param name="page_y">Specifies the y-coordinate of the cursor in PDF user space.</param>
        /// <returns>True indicates success; otherwise false. /</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_OnLButtonDoubleClick(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, int modifier, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_OnLButtonDoubleClick(__arg0, __arg1, modifier, page_x, page_y);
            return ___ret;
        }

        /// <summary>Call this member function when a nonsystem key is pressed.</summary>
        /// <param name="hHandle">Handle to the form fill module, aseturned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <param name="nKeyCode">The virtual-key code of the given key (see fpdf_fwlevent.h for virtual key codes).</param>
        /// <param name="modifier">Mask of key flags (see fpdf_fwlevent.h for key flag values).</param>
        /// <returns>True indicates success; otherwise false. /</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_OnKeyDown(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, int nKeyCode, int modifier)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_OnKeyDown(__arg0, __arg1, nKeyCode, modifier);
            return ___ret;
        }

        /// <summary>Call this member function when a nonsystem key is released.</summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <param name="nKeyCode">The virtual-key code of the given key (see fpdf_fwlevent.h for virtual key codes).</param>
        /// <param name="modifier">Mask of key flags (see fpdf_fwlevent.h for key flag values).</param>
        /// <remarks>
        /// Currently unimplemented and always returns false. PDFium reserves this
        /// API and may implement it in the future on an as-needed basis.
        /// /
        /// </remarks>
        /// <returns>True indicates success; otherwise false.</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_OnKeyUp(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, int nKeyCode, int modifier)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_OnKeyUp(__arg0, __arg1, nKeyCode, modifier);
            return ___ret;
        }

        /// <summary>Call this member function when a keystroke translates to a nonsystem character.</summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <param name="nChar">The character code value itself.</param>
        /// <param name="modifier">Mask of key flags (see fpdf_fwlevent.h for key flag values).</param>
        /// <returns>True indicates success; otherwise false. /</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_OnChar(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, int nChar, int modifier)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_OnChar(__arg0, __arg1, nChar, modifier);
            return ___ret;
        }

        /// <summary>Call this function to obtain the text within the current focused field, if any.</summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <param name="buffer">Buffer for holding the form text, encoded in UTF-16LE. If NULL, |buffer| is not modified.</param>
        /// <param name="buflen">
        /// Length of |buffer| in bytes. If |buflen| is less
        /// than the length of the form text string, |buffer| is
        /// not modified.
        /// </param>
        /// <returns>Length in bytes for the text in the focused field. /</returns>
        public static uint FORM_GetFocusedText(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, __IntPtr buffer, uint buflen)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_GetFocusedText(__arg0, __arg1, buffer, buflen);
            return ___ret;
        }

        /// <summary>Call this function to obtain selected text within a form text field or form combobox text field.</summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <param name="buffer">Buffer for holding the selected text, encoded in UTF-16LE. If NULL, |buffer| is not modified.</param>
        /// <param name="buflen">
        /// Length of |buffer| in bytes. If |buflen| is less
        /// than the length of the selected text string,
        /// |buffer| is not modified.
        /// </param>
        /// <returns>
        /// Length in bytes of selected text in form text field or form combobox
        /// text field.
        /// /
        /// </returns>
        public static uint FORM_GetSelectedText(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, __IntPtr buffer, uint buflen)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_GetSelectedText(__arg0, __arg1, buffer, buflen);
            return ___ret;
        }

        /// <summary>
        /// Call this function to replace the selected text in a form
        /// text field or user-editable form combobox text field with another
        /// text string (which can be empty or non-empty). If there is no
        /// selected text, this function will append the replacement text after
        /// the current caret position. After the insertion, the inserted text
        /// will be selected.
        /// </summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as Returned by FPDF_LoadPage().</param>
        /// <param name="wsText">The text to be inserted, in UTF-16LE format.</param>
        /// <returns>None. /</returns>
        public static void FORM_ReplaceAndKeepSelection(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, ref string wsText)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FORM_ReplaceAndKeepSelection(__arg0, __arg1, wsText);
        }

        /// <summary>
        /// Call this function to replace the selected text in a form
        /// text field or user-editable form combobox text field with another
        /// text string (which can be empty or non-empty). If there is no
        /// selected text, this function will append the replacement text after
        /// the current caret position. After the insertion, the selection range
        /// will be set to empty.
        /// </summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as Returned by FPDF_LoadPage().</param>
        /// <param name="wsText">The text to be inserted, in UTF-16LE format.</param>
        /// <returns>None. /</returns>
        public static void FORM_ReplaceSelection(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, ref string wsText)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FORM_ReplaceSelection(__arg0, __arg1, wsText);
        }

        /// <summary>
        /// Call this function to select all the text within the currently focused
        /// form text field or form combobox text field.
        /// </summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <returns>Whether the operation succeeded or not. /</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_SelectAllText(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_SelectAllText(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>
        /// Find out if it is possible for the current focused widget in a given
        /// form to perform an undo operation.
        /// </summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <returns>True if it is possible to undo. /</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_CanUndo(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_CanUndo(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>
        /// Find out if it is possible for the current focused widget in a given
        /// form to perform a redo operation.
        /// </summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <returns>True if it is possible to redo. /</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_CanRedo(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_CanRedo(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>Make the current focussed widget perform an undo operation.</summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <returns>True if the undo operation succeeded. /</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_Undo(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_Undo(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>Make the current focussed widget perform a redo operation.</summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <returns>True if the redo operation succeeded. /</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_Redo(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_Redo(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>
        /// Call this member function to force to kill the focus of the form
        /// field which has focus. If it would kill the focus of a form field,
        /// save the value of form field if was changed by theuser.
        /// </summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <returns>True indicates success; otherwise false. /</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_ForceToKillFocus(global::PdfLibCore.Generated.FPDF_Form_handle hHandle)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var ___ret = __Internal.FORM_ForceToKillFocus(__arg0);
            return ___ret;
        }

        /// <summary>Call this member function to get the currently focused annotation.</summary>
        /// <param name="handle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page_index">
        /// Buffer to hold the index number of the page which
        /// contains the focused annotation. 0 for the first page.
        /// Can't be NULL.
        /// </param>
        /// <param name="annot">Buffer to hold the focused annotation. Can't be NULL.</param>
        /// <remarks>
        /// Not currently supported for XFA forms - will report no focused
        /// annotation.
        /// Must call FPDFPage_CloseAnnot() when the annotation returned in |annot|
        /// by this function is no longer needed.
        /// This will return true and set |page_index| to -1 and |annot| to NULL, if
        /// there is no focused annotation.
        /// /
        /// </remarks>
        /// <returns>
        /// On success, return true and write to the out parameters. Otherwise return
        /// false and leave the out parameters unmodified.
        /// </returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_GetFocusedAnnot(global::PdfLibCore.Generated.FPDF_Form_handle handle, ref int page_index, global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = handle is null ? __IntPtr.Zero : handle.__Instance;
            fixed (int* __page_index1 = &page_index)
            {
                var __arg1 = __page_index1;
                var ____arg2 = annot is null ? __IntPtr.Zero : annot.__Instance;
                var __arg2 = new __IntPtr(&____arg2);
                var ___ret = __Internal.FORM_GetFocusedAnnot(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>Call this member function to set the currently focused annotation.</summary>
        /// <param name="handle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="annot">Handle to an annotation.</param>
        /// <remarks>
        /// |annot| can't be NULL. To kill focus, use FORM_ForceToKillFocus()
        /// instead.
        /// /
        /// </remarks>
        /// <returns>True indicates success; otherwise false.</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_SetFocusedAnnot(global::PdfLibCore.Generated.FPDF_Form_handle handle, global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = handle is null ? __IntPtr.Zero : handle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FORM_SetFocusedAnnot(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>Get the form field type by point.</summary>
        /// <param name="hHandle">Handle to the form fill module. Returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page. Returned by FPDF_LoadPage().</param>
        /// <param name="page_x">X position in PDF &quot;user space&quot;.</param>
        /// <param name="page_y">Y position in PDF &quot;user space&quot;.</param>
        /// <returns>
        /// Return the type of the form field; -1 indicates no field.
        /// See field types above.
        /// /
        /// </returns>
        public static int FPDFPage_HasFormFieldAtPoint(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FPDFPage_HasFormFieldAtPoint(__arg0, __arg1, page_x, page_y);
            return ___ret;
        }

        /// <summary>Get the form field z-order by point.</summary>
        /// <param name="hHandle">Handle to the form fill module. Returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="page">Handle to the page. Returned by FPDF_LoadPage().</param>
        /// <param name="page_x">X position in PDF &quot;user space&quot;.</param>
        /// <param name="page_y">Y position in PDF &quot;user space&quot;.</param>
        /// <returns>
        /// Return the z-order of the form field; -1 indicates no field.
        /// Higher numbers are closer to the front.
        /// /
        /// </returns>
        public static int FPDFPage_FormFieldZOrderAtPoint(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FPDFPage_FormFieldZOrderAtPoint(__arg0, __arg1, page_x, page_y);
            return ___ret;
        }

        /// <summary>Set the highlight color of the specified (or all) form fields in the document.</summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="doc">Handle to the document, as returned by FPDF_LoadDocument().</param>
        /// <param name="fieldType">A 32-bit integer indicating the type of a form field (defined above).</param>
        /// <param name="color">The highlight color of the form field. Constructed by 0xxxrrggbb.</param>
        /// <remarks>
        /// When the parameter fieldType is set to FPDF_FORMFIELD_UNKNOWN, the
        /// highlight color will be applied to all the form fields in the
        /// document.
        /// Please refresh the client window to show the highlight immediately
        /// if necessary.
        /// /
        /// </remarks>
        public static void FPDF_SetFormFieldHighlightColor(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, int fieldType, uint color)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FPDF_SetFormFieldHighlightColor(__arg0, fieldType, color);
        }

        /// <summary>Set the transparency of the form field highlight color in the document.</summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="doc">Handle to the document, as returaned by FPDF_LoadDocument().</param>
        /// <param name="alpha">The transparency of the form field highlight color, between 0-255.</param>
        /// <returns>None. /</returns>
        public static void FPDF_SetFormFieldHighlightAlpha(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, byte alpha)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FPDF_SetFormFieldHighlightAlpha(__arg0, alpha);
        }

        /// <summary>Remove the form field highlight color in the document.</summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <remarks>
        /// Please refresh the client window to remove the highlight immediately
        /// if necessary.
        /// /
        /// </remarks>
        public static void FPDF_RemoveFormFieldHighlight(global::PdfLibCore.Generated.FPDF_Form_handle hHandle)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FPDF_RemoveFormFieldHighlight(__arg0);
        }

        /// <summary>Render FormFields and popup window on a page to a device independent bitmap.</summary>
        /// <param name="hHandle">Handle to the form fill module, as returned by FPDFDOC_InitFormFillEnvironment().</param>
        /// <param name="bitmap">
        /// Handle to the device independent bitmap (as the
        /// output buffer). Bitmap handles can be created by
        /// FPDFBitmap_Create().
        /// </param>
        /// <param name="page">Handle to the page, as returned by FPDF_LoadPage().</param>
        /// <param name="start_x">Left pixel position of the display area in the device coordinates.</param>
        /// <param name="start_y">Top pixel position of the display area in the device coordinates.</param>
        /// <param name="size_x">Horizontal size (in pixels) for displaying the page.</param>
        /// <param name="size_y">Vertical size (in pixels) for displaying the page.</param>
        /// <param name="rotate">
        /// Page orientation: 0 (normal), 1 (rotated 90 degrees
        /// clockwise), 2 (rotated 180 degrees), 3 (rotated 90
        /// degrees counter-clockwise).
        /// </param>
        /// <param name="flags">0 for normal display, or combination of flags defined above.</param>
        /// <remarks>
        /// This function is designed to render annotations that are
        /// user-interactive, which are widget annotations (for FormFields) and
        /// popup annotations.
        /// With the FPDF_ANNOT flag, this function will render a popup annotation
        /// when users mouse-hover on a non-widget annotation. Regardless of
        /// FPDF_ANNOT flag, this function will always render widget annotations
        /// for FormFields.
        /// In order to implement the FormFill functions, implementation should
        /// call this function after rendering functions, such as
        /// FPDF_RenderPageBitmap() or FPDF_RenderPageBitmap_Start(), have
        /// finished rendering the page contents.
        /// </remarks>
        public static void FPDF_FFLDraw(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Bitmap bitmap, global::PdfLibCore.Generated.FPDF_Page page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = bitmap is null ? __IntPtr.Zero : bitmap.__Instance;
            var __arg2 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FPDF_FFLDraw(__arg0, __arg1, __arg2, start_x, start_y, size_x, size_y, rotate, flags);
        }

        /// <summary>Returns the type of form contained in the PDF document.</summary>
        /// <param name="document">Handle to document.</param>
        /// <remarks>If |document| is NULL, then the return value is FORMTYPE_NONE. /</remarks>
        /// <returns>Integer value representing one of the FORMTYPE_ values.</returns>
        public static int FPDF_GetFormType(global::PdfLibCore.Generated.FPDF_Document document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var ___ret = __Internal.FPDF_GetFormType(__arg0);
            return ___ret;
        }

        /// <summary>Selects/deselects the value at the given |index| of the focused annotation.</summary>
        /// <param name="hHandle">Handle to the form fill module. Returned by FPDFDOC_InitFormFillEnvironment.</param>
        /// <param name="page">Handle to the page. Returned by FPDF_LoadPage</param>
        /// <param name="index">0-based index of value to be set as selected/unselected</param>
        /// <param name="selected">true to select, false to deselect</param>
        /// <remarks>
        /// Intended for use with listbox/combobox widget types. Comboboxes
        /// have at most a single value selected at a time which cannot be
        /// deselected. Deselect on a combobox is a no-op that returns false.
        /// Default implementation is a no-op that will return false for
        /// other types.
        /// Not currently supported for XFA forms - will return false.
        /// /
        /// </remarks>
        /// <returns>TRUE if the operation succeeded. FALSE if the operation failed or widget is not a supported type.</returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_SetIndexSelected(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, int index, global::PdfLibCore.Types.FPDF_BOOL selected)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_SetIndexSelected(__arg0, __arg1, index, selected);
            return ___ret;
        }

        /// <summary>Returns whether or not the value at |index| of the focused annotation is currently selected.</summary>
        /// <param name="hHandle">Handle to the form fill module. Returned by FPDFDOC_InitFormFillEnvironment.</param>
        /// <param name="page">Handle to the page. Returned by FPDF_LoadPage</param>
        /// <param name="index">0-based Index of value to check</param>
        /// <remarks>
        /// Intended for use with listbox/combobox widget types. Default
        /// implementation is a no-op that will return false for other types.
        /// Not currently supported for XFA forms - will return false.
        /// /
        /// </remarks>
        /// <returns>
        /// TRUE if value at |index| is currently selected.
        /// FALSE if value at |index| is not selected or widget is not a
        /// supported type.
        /// </returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FORM_IsIndexSelected(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, int index)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FORM_IsIndexSelected(__arg0, __arg1, index);
            return ___ret;
        }

        /// <summary>If the document consists of XFA fields, call this method to attempt to load XFA fields.</summary>
        /// <param name="document">Handle to document from FPDF_LoadDocument().</param>
        /// <returns>
        /// TRUE upon success, otherwise FALSE. If XFA support is not built
        /// into PDFium, performs no action and always returns FALSE.
        /// /
        /// </returns>
        public static global::PdfLibCore.Types.FPDF_BOOL FPDF_LoadXFA(global::PdfLibCore.Generated.FPDF_Document document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var ___ret = __Internal.FPDF_LoadXFA(__arg0);
            return ___ret;
        }
    }
}
