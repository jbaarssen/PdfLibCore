// Built from precompiled binaries at https://github.com/bblanchon/pdfium-binaries/releases/tag/chromium/5772
// Github release api https://api.github.com/repos/bblanchon/pdfium-binaries/releases/102934879
// PDFium version v115.0.5772.0 chromium/5772 [master]
// Built on: Wed, 17 May 2023 14:53:10 GMT

// ReSharper disable all
#pragma warning disable CS8500 // This takes the address of, gets the size of, or declares a pointer to a managed type

// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace PdfLibCore.Generated
{
    public unsafe partial class FPDF_SYSFONTINFO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 72)]
        public partial struct __Internal
        {
            internal int version;
            internal __IntPtr Release;
            internal __IntPtr EnumFonts;
            internal __IntPtr MapFont;
            internal __IntPtr GetFont;
            internal __IntPtr GetFontData;
            internal __IntPtr GetFaceName;
            internal __IntPtr GetFontCharset;
            internal __IntPtr DeleteFont;

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "??0_FPDF_SYSFONTINFO@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        protected bool __ownsNativeInstance;

        internal static FPDF_SYSFONTINFO __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new FPDF_SYSFONTINFO(native.ToPointer(), skipVTables);
        }

        internal static FPDF_SYSFONTINFO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDF_SYSFONTINFO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDF_SYSFONTINFO(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
        }

        protected FPDF_SYSFONTINFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDF_SYSFONTINFO()
        {
            if (GetType().FullName != "PdfLibCore.Generated.FPDF_SYSFONTINFO")
                throw new Exception("PdfLibCore.Generated.FPDF_SYSFONTINFO: Can't inherit from classes with disabled NativeToManaged map");
            __Instance = Marshal.AllocHGlobal(sizeof(global::PdfLibCore.Generated.FPDF_SYSFONTINFO.__Internal));
            __ownsNativeInstance = true;
        }

        public FPDF_SYSFONTINFO(global::PdfLibCore.Generated.FPDF_SYSFONTINFO _0)
        {
            if (GetType().FullName != "PdfLibCore.Generated.FPDF_SYSFONTINFO")
                throw new Exception("PdfLibCore.Generated.FPDF_SYSFONTINFO: Can't inherit from classes with disabled NativeToManaged map");
            __Instance = Marshal.AllocHGlobal(sizeof(global::PdfLibCore.Generated.FPDF_SYSFONTINFO.__Internal));
            __ownsNativeInstance = true;
            *((global::PdfLibCore.Generated.FPDF_SYSFONTINFO.__Internal*) __Instance) = *((global::PdfLibCore.Generated.FPDF_SYSFONTINFO.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Version
        {
            get
            {
                return ((__Internal*)__Instance)->version;
            }

            set
            {
                ((__Internal*)__Instance)->version = value;
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr Release
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Release;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Release = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr EnumFonts
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->EnumFonts;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->EnumFonts = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr_int_PdfLibCore_Types_FPDF_BOOL_int_int_string8_PdfLibCore_Types_FPDF_BOOLPtr MapFont
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->MapFont;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr_int_PdfLibCore_Types_FPDF_BOOL_int_int_string8_PdfLibCore_Types_FPDF_BOOLPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr_int_PdfLibCore_Types_FPDF_BOOL_int_int_string8_PdfLibCore_Types_FPDF_BOOLPtr));
            }

            set
            {
                ((__Internal*)__Instance)->MapFont = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr_string8 GetFont
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->GetFont;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr_string8) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func___IntPtr___IntPtr_string8));
            }

            set
            {
                ((__Internal*)__Instance)->GetFont = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func_uint___IntPtr___IntPtr_uint_bytePtr_uint GetFontData
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->GetFontData;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func_uint___IntPtr___IntPtr_uint_bytePtr_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func_uint___IntPtr___IntPtr_uint_bytePtr_uint));
            }

            set
            {
                ((__Internal*)__Instance)->GetFontData = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func_uint___IntPtr___IntPtr_sbytePtr_uint GetFaceName
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->GetFaceName;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func_uint___IntPtr___IntPtr_sbytePtr_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func_uint___IntPtr___IntPtr_sbytePtr_uint));
            }

            set
            {
                ((__Internal*)__Instance)->GetFaceName = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr GetFontCharset
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->GetFontCharset;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Func_int___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->GetFontCharset = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr DeleteFont
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->DeleteFont;
                return __ptr0 == IntPtr.Zero? null : (global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PdfLibCore.Generated.Delegates.Action___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->DeleteFont = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class FPDF_CharsetFontMap : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal int charset;
            internal __IntPtr fontname;

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "??0FPDF_CharsetFontMap_@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        private bool __fontname_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static FPDF_CharsetFontMap __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new FPDF_CharsetFontMap(native.ToPointer(), skipVTables);
        }

        internal static FPDF_CharsetFontMap __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDF_CharsetFontMap(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDF_CharsetFontMap(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
        }

        protected FPDF_CharsetFontMap(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDF_CharsetFontMap()
        {
            if (GetType().FullName != "PdfLibCore.Generated.FPDF_CharsetFontMap")
                throw new Exception("PdfLibCore.Generated.FPDF_CharsetFontMap: Can't inherit from classes with disabled NativeToManaged map");
            __Instance = Marshal.AllocHGlobal(sizeof(global::PdfLibCore.Generated.FPDF_CharsetFontMap.__Internal));
            __ownsNativeInstance = true;
        }

        public FPDF_CharsetFontMap(global::PdfLibCore.Generated.FPDF_CharsetFontMap _0)
        {
            if (GetType().FullName != "PdfLibCore.Generated.FPDF_CharsetFontMap")
                throw new Exception("PdfLibCore.Generated.FPDF_CharsetFontMap: Can't inherit from classes with disabled NativeToManaged map");
            __Instance = Marshal.AllocHGlobal(sizeof(global::PdfLibCore.Generated.FPDF_CharsetFontMap.__Internal));
            __ownsNativeInstance = true;
            *((global::PdfLibCore.Generated.FPDF_CharsetFontMap.__Internal*) __Instance) = *((global::PdfLibCore.Generated.FPDF_CharsetFontMap.__Internal*) _0.__Instance);
            if (_0.__fontname_OwnsNativeMemory)
                this.Fontname = _0.Fontname;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            DisposePartial(disposing);
            if (__fontname_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->fontname);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Charset
        {
            get
            {
                return ((__Internal*)__Instance)->charset;
            }

            set
            {
                ((__Internal*)__Instance)->charset = value;
            }
        }

        public string Fontname
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->fontname);
            }

            set
            {
                if (__fontname_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->fontname);
                __fontname_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->fontname = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->fontname = (__IntPtr) __bytePtr0;
            }
        }
    }

    public static unsafe partial class Pdfium
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDF_GetDefaultTTFMap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_GetDefaultTTFMap();

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDF_AddInstalledFont", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_AddInstalledFont(__IntPtr mapper, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string face, int charset);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDF_SetSystemFontInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_SetSystemFontInfo(__IntPtr pFontInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDF_GetDefaultSystemFontInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_GetDefaultSystemFontInfo();

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDF_FreeDefaultSystemFontInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_FreeDefaultSystemFontInfo(__IntPtr pFontInfo);
        }

        /// <summary>
        /// Returns a pointer to the default character set to TT Font name map. The
        /// map is an array of FPDF_CharsetFontMap structs, with its end indicated
        /// by a { -1, NULL } entry.
        /// </summary>
        /// <returns>Pointer to the Charset Font Map. /</returns>
        public static global::PdfLibCore.Generated.FPDF_CharsetFontMap FPDF_GetDefaultTTFMap()
        {
            var ___ret = __Internal.FPDF_GetDefaultTTFMap();
            var __result0 = global::PdfLibCore.Generated.FPDF_CharsetFontMap.__CreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>Add a system font to the list in PDFium.</summary>
        /// <param name="mapper">Opaque pointer to Foxit font mapper</param>
        /// <param name="face">The font face name</param>
        /// <param name="charset">Font character set. See above defined constants.</param>
        /// <remarks>This function is only called during the system font list building process.</remarks>
        /// <returns>None. /</returns>
        public static void FPDF_AddInstalledFont(__IntPtr mapper, string face, int charset)
        {
            __Internal.FPDF_AddInstalledFont(mapper, face, charset);
        }

        /// <summary>Set the system font info interface into PDFium</summary>
        /// <param name="pFontInfo">Pointer to a FPDF_SYSFONTINFO structure</param>
        /// <remarks>
        /// Platform support implementation should implement required methods of
        /// FFDF_SYSFONTINFO interface, then call this function during PDFium
        /// initialization process.
        /// /
        /// </remarks>
        public static void FPDF_SetSystemFontInfo(global::PdfLibCore.Generated.FPDF_SYSFONTINFO pFontInfo)
        {
            var __arg0 = pFontInfo is null ? __IntPtr.Zero : pFontInfo.__Instance;
            __Internal.FPDF_SetSystemFontInfo(__arg0);
        }

        /// <summary>Get default system font info interface for current platform</summary>
        /// <remarks>
        /// For some platforms, PDFium implements a default version of system
        /// font info interface. The default implementation can be passed to
        /// FPDF_SetSystemFontInfo().
        /// /
        /// </remarks>
        /// <returns>
        /// Pointer to a FPDF_SYSFONTINFO structure describing the default
        /// interface, or NULL if the platform doesn't have a default interface.
        /// Application should call FPDF_FreeDefaultSystemFontInfo to free the
        /// returned pointer.
        /// </returns>
        public static global::PdfLibCore.Generated.FPDF_SYSFONTINFO FPDF_GetDefaultSystemFontInfo()
        {
            var ___ret = __Internal.FPDF_GetDefaultSystemFontInfo();
            var __result0 = global::PdfLibCore.Generated.FPDF_SYSFONTINFO.__CreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>Free a default system font info interface</summary>
        /// <param name="pFontInfo">Pointer to a FPDF_SYSFONTINFO structure</param>
        /// <remarks>
        /// This function should be called on the output from
        /// FPDF_SetSystemFontInfo() once it is no longer needed.
        /// /
        /// </remarks>
        public static void FPDF_FreeDefaultSystemFontInfo(global::PdfLibCore.Generated.FPDF_SYSFONTINFO pFontInfo)
        {
            var __arg0 = pFontInfo is null ? __IntPtr.Zero : pFontInfo.__Instance;
            __Internal.FPDF_FreeDefaultSystemFontInfo(__arg0);
        }
    }
}
