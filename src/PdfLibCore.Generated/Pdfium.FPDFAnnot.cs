// Built from precompiled binaries at https://github.com/bblanchon/pdfium-binaries/releases/tag/chromium/5772
// Github release api https://api.github.com/repos/bblanchon/pdfium-binaries/releases/102934879
// PDFium version v115.0.5772.0 chromium/5772 [master]
// Built on: Wed, 17 May 2023 07:45:21 GMT

// ReSharper disable all
#pragma warning disable CS8500 // This takes the address of, gets the size of, or declares a pointer to a managed type

// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace PdfLibCore.Generated
{
    public enum FPDFANNOT_COLORTYPE
    {
        FPDFANNOT_COLORTYPE_Color = 0,
        FPDFANNOT_COLORTYPE_InteriorColor = 1
    }

    public static unsafe partial class Pdfium
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_IsSupportedSubtype", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_IsSupportedSubtype(int subtype);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_CreateAnnot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPage_CreateAnnot(__IntPtr page, int subtype);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_GetAnnotCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPage_GetAnnotCount(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_GetAnnot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPage_GetAnnot(__IntPtr page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_GetAnnotIndex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPage_GetAnnotIndex(__IntPtr page, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_CloseAnnot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPage_CloseAnnot(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFPage_RemoveAnnot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFPage_RemoveAnnot(__IntPtr page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetSubtype", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnot_GetSubtype(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_IsObjectSupportedSubtype", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_IsObjectSupportedSubtype(int subtype);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_UpdateObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_UpdateObject(__IntPtr annot, __IntPtr obj);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_AddInkStroke", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnot_AddInkStroke(__IntPtr annot, __IntPtr points, ulong point_count);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_RemoveInkList", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_RemoveInkList(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_AppendObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_AppendObject(__IntPtr annot, __IntPtr obj);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetObjectCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnot_GetObjectCount(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFAnnot_GetObject(__IntPtr annot, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_RemoveObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_RemoveObject(__IntPtr annot, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_SetColor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetColor(__IntPtr annot, global::PdfLibCore.Generated.FPDFANNOT_COLORTYPE type, uint R, uint G, uint B, uint A);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetColor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_GetColor(__IntPtr annot, global::PdfLibCore.Generated.FPDFANNOT_COLORTYPE type, uint* R, uint* G, uint* B, uint* A);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_HasAttachmentPoints", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_HasAttachmentPoints(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_SetAttachmentPoints", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetAttachmentPoints(__IntPtr annot, ulong quad_index, __IntPtr quad_points);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_AppendAttachmentPoints", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_AppendAttachmentPoints(__IntPtr annot, __IntPtr quad_points);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_CountAttachmentPoints", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong FPDFAnnot_CountAttachmentPoints(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetAttachmentPoints", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_GetAttachmentPoints(__IntPtr annot, ulong quad_index, __IntPtr quad_points);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_SetRect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetRect(__IntPtr annot, __IntPtr rect);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetRect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_GetRect(__IntPtr annot, __IntPtr rect);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetVertices", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnot_GetVertices(__IntPtr annot, __IntPtr buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetInkListCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnot_GetInkListCount(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetInkListPath", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnot_GetInkListPath(__IntPtr annot, uint path_index, __IntPtr buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetLine", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_GetLine(__IntPtr annot, __IntPtr start, __IntPtr end);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_SetBorder", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetBorder(__IntPtr annot, float horizontal_radius, float vertical_radius, float border_width);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetBorder", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_GetBorder(__IntPtr annot, float* horizontal_radius, float* vertical_radius, float* border_width);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetFormAdditionalActionJavaScript", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnot_GetFormAdditionalActionJavaScript(__IntPtr hHandle, __IntPtr annot, int @event, string* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_HasKey", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_HasKey(__IntPtr annot, string key);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetValueType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnot_GetValueType(__IntPtr annot, string key);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_SetStringValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetStringValue(__IntPtr annot, string key, string value);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetStringValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnot_GetStringValue(__IntPtr annot, string key, string* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetNumberValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_GetNumberValue(__IntPtr annot, string key, float* value);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_SetAP", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetAP(__IntPtr annot, int appearanceMode, string value);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetAP", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnot_GetAP(__IntPtr annot, int appearanceMode, string* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetLinkedAnnot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFAnnot_GetLinkedAnnot(__IntPtr annot, string key);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetFlags", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnot_GetFlags(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_SetFlags", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetFlags(__IntPtr annot, int flags);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetFormFieldFlags", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnot_GetFormFieldFlags(__IntPtr handle, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetFormFieldAtPoint", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFAnnot_GetFormFieldAtPoint(__IntPtr hHandle, __IntPtr page, __IntPtr point);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetFormFieldName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnot_GetFormFieldName(__IntPtr hHandle, __IntPtr annot, string* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetFormFieldAlternateName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnot_GetFormFieldAlternateName(__IntPtr hHandle, __IntPtr annot, string* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetFormFieldType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnot_GetFormFieldType(__IntPtr hHandle, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetFormFieldValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnot_GetFormFieldValue(__IntPtr hHandle, __IntPtr annot, string* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetOptionCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnot_GetOptionCount(__IntPtr hHandle, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetOptionLabel", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnot_GetOptionLabel(__IntPtr hHandle, __IntPtr annot, int index, string* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_IsOptionSelected", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_IsOptionSelected(__IntPtr handle, __IntPtr annot, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetFontSize", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_GetFontSize(__IntPtr hHandle, __IntPtr annot, float* value);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_IsChecked", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_IsChecked(__IntPtr hHandle, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_SetFocusableSubtypes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetFocusableSubtypes(__IntPtr hHandle, int* subtypes, ulong count);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetFocusableSubtypesCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnot_GetFocusableSubtypesCount(__IntPtr hHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetFocusableSubtypes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_GetFocusableSubtypes(__IntPtr hHandle, int* subtypes, ulong count);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetLink", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFAnnot_GetLink(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetFormControlCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnot_GetFormControlCount(__IntPtr hHandle, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetFormControlIndex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnot_GetFormControlIndex(__IntPtr hHandle, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_GetFormFieldExportValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnot_GetFormFieldExportValue(__IntPtr hHandle, __IntPtr annot, string* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFAnnot_SetURI", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetURI(__IntPtr annot, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string uri);
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_IsSupportedSubtype(int subtype)
        {
            var ___ret = __Internal.FPDFAnnot_IsSupportedSubtype(subtype);
            return ___ret;
        }


        public static global::PdfLibCore.Generated.FPDF_Annotation FPDFPage_CreateAnnot(global::PdfLibCore.Generated.FPDF_Page page, int subtype)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FPDFPage_CreateAnnot(__arg0, subtype);
            var __result0 = global::PdfLibCore.Generated.FPDF_Annotation.__CreateInstance(___ret, false);
            return __result0;
        }


        public static int FPDFPage_GetAnnotCount(global::PdfLibCore.Generated.FPDF_Page page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FPDFPage_GetAnnotCount(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Generated.FPDF_Annotation FPDFPage_GetAnnot(global::PdfLibCore.Generated.FPDF_Page page, int index)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FPDFPage_GetAnnot(__arg0, index);
            var __result0 = global::PdfLibCore.Generated.FPDF_Annotation.__CreateInstance(___ret, false);
            return __result0;
        }


        public static int FPDFPage_GetAnnotIndex(global::PdfLibCore.Generated.FPDF_Page page, global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFPage_GetAnnotIndex(__arg0, __arg1);
            return ___ret;
        }


        public static void FPDFPage_CloseAnnot(global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            __Internal.FPDFPage_CloseAnnot(__arg0);
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFPage_RemoveAnnot(global::PdfLibCore.Generated.FPDF_Page page, int index)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var ___ret = __Internal.FPDFPage_RemoveAnnot(__arg0, index);
            return ___ret;
        }


        public static int FPDFAnnot_GetSubtype(global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetSubtype(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_IsObjectSupportedSubtype(int subtype)
        {
            var ___ret = __Internal.FPDFAnnot_IsObjectSupportedSubtype(subtype);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_UpdateObject(global::PdfLibCore.Generated.FPDF_Annotation annot, global::PdfLibCore.Generated.FPDF_Pageobject obj)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg1 = obj is null ? __IntPtr.Zero : obj.__Instance;
            var ___ret = __Internal.FPDFAnnot_UpdateObject(__arg0, __arg1);
            return ___ret;
        }


        public static int FPDFAnnot_AddInkStroke(global::PdfLibCore.Generated.FPDF_Annotation annot, global::PdfLibCore.Generated.FS_POINTF_ points, ulong point_count)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg1 = points is null ? __IntPtr.Zero : points.__Instance;
            var ___ret = __Internal.FPDFAnnot_AddInkStroke(__arg0, __arg1, point_count);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_RemoveInkList(global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_RemoveInkList(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_AppendObject(global::PdfLibCore.Generated.FPDF_Annotation annot, global::PdfLibCore.Generated.FPDF_Pageobject obj)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg1 = obj is null ? __IntPtr.Zero : obj.__Instance;
            var ___ret = __Internal.FPDFAnnot_AppendObject(__arg0, __arg1);
            return ___ret;
        }


        public static int FPDFAnnot_GetObjectCount(global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetObjectCount(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Generated.FPDF_Pageobject FPDFAnnot_GetObject(global::PdfLibCore.Generated.FPDF_Annotation annot, int index)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetObject(__arg0, index);
            var __result0 = global::PdfLibCore.Generated.FPDF_Pageobject.__CreateInstance(___ret, false);
            return __result0;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_RemoveObject(global::PdfLibCore.Generated.FPDF_Annotation annot, int index)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_RemoveObject(__arg0, index);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetColor(global::PdfLibCore.Generated.FPDF_Annotation annot, global::PdfLibCore.Generated.FPDFANNOT_COLORTYPE type, uint R, uint G, uint B, uint A)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_SetColor(__arg0, type, R, G, B, A);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_GetColor(global::PdfLibCore.Generated.FPDF_Annotation annot, global::PdfLibCore.Generated.FPDFANNOT_COLORTYPE type, ref uint R, ref uint G, ref uint B, ref uint A)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            fixed (uint* __R2 = &R)
            {
                var __arg2 = __R2;
                fixed (uint* __G3 = &G)
                {
                    var __arg3 = __G3;
                    fixed (uint* __B4 = &B)
                    {
                        var __arg4 = __B4;
                        fixed (uint* __A5 = &A)
                        {
                            var __arg5 = __A5;
                            var ___ret = __Internal.FPDFAnnot_GetColor(__arg0, type, __arg2, __arg3, __arg4, __arg5);
                            return ___ret;
                        }
                    }
                }
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_HasAttachmentPoints(global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_HasAttachmentPoints(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetAttachmentPoints(global::PdfLibCore.Generated.FPDF_Annotation annot, ulong quad_index, global::PdfLibCore.Generated.FS_QUADPOINTSF quad_points)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg2 = quad_points is null ? __IntPtr.Zero : quad_points.__Instance;
            var ___ret = __Internal.FPDFAnnot_SetAttachmentPoints(__arg0, quad_index, __arg2);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_AppendAttachmentPoints(global::PdfLibCore.Generated.FPDF_Annotation annot, global::PdfLibCore.Generated.FS_QUADPOINTSF quad_points)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg1 = quad_points is null ? __IntPtr.Zero : quad_points.__Instance;
            var ___ret = __Internal.FPDFAnnot_AppendAttachmentPoints(__arg0, __arg1);
            return ___ret;
        }


        public static ulong FPDFAnnot_CountAttachmentPoints(global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_CountAttachmentPoints(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_GetAttachmentPoints(global::PdfLibCore.Generated.FPDF_Annotation annot, ulong quad_index, global::PdfLibCore.Generated.FS_QUADPOINTSF quad_points)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg2 = quad_points is null ? __IntPtr.Zero : quad_points.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetAttachmentPoints(__arg0, quad_index, __arg2);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetRect(global::PdfLibCore.Generated.FPDF_Annotation annot, global::PdfLibCore.Generated.FS_RECTF_ rect)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg1 = rect is null ? __IntPtr.Zero : rect.__Instance;
            var ___ret = __Internal.FPDFAnnot_SetRect(__arg0, __arg1);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_GetRect(global::PdfLibCore.Generated.FPDF_Annotation annot, global::PdfLibCore.Generated.FS_RECTF_ rect)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg1 = rect is null ? __IntPtr.Zero : rect.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetRect(__arg0, __arg1);
            return ___ret;
        }


        public static uint FPDFAnnot_GetVertices(global::PdfLibCore.Generated.FPDF_Annotation annot, global::PdfLibCore.Generated.FS_POINTF_ buffer, uint length)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg1 = buffer is null ? __IntPtr.Zero : buffer.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetVertices(__arg0, __arg1, length);
            return ___ret;
        }


        public static uint FPDFAnnot_GetInkListCount(global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetInkListCount(__arg0);
            return ___ret;
        }


        public static uint FPDFAnnot_GetInkListPath(global::PdfLibCore.Generated.FPDF_Annotation annot, uint path_index, global::PdfLibCore.Generated.FS_POINTF_ buffer, uint length)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg2 = buffer is null ? __IntPtr.Zero : buffer.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetInkListPath(__arg0, path_index, __arg2, length);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_GetLine(global::PdfLibCore.Generated.FPDF_Annotation annot, global::PdfLibCore.Generated.FS_POINTF_ start, global::PdfLibCore.Generated.FS_POINTF_ end)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg1 = start is null ? __IntPtr.Zero : start.__Instance;
            var __arg2 = end is null ? __IntPtr.Zero : end.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetLine(__arg0, __arg1, __arg2);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetBorder(global::PdfLibCore.Generated.FPDF_Annotation annot, float horizontal_radius, float vertical_radius, float border_width)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_SetBorder(__arg0, horizontal_radius, vertical_radius, border_width);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_GetBorder(global::PdfLibCore.Generated.FPDF_Annotation annot, ref float horizontal_radius, ref float vertical_radius, ref float border_width)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            fixed (float* __horizontal_radius1 = &horizontal_radius)
            {
                var __arg1 = __horizontal_radius1;
                fixed (float* __vertical_radius2 = &vertical_radius)
                {
                    var __arg2 = __vertical_radius2;
                    fixed (float* __border_width3 = &border_width)
                    {
                        var __arg3 = __border_width3;
                        var ___ret = __Internal.FPDFAnnot_GetBorder(__arg0, __arg1, __arg2, __arg3);
                        return ___ret;
                    }
                }
            }
        }


        public static uint FPDFAnnot_GetFormAdditionalActionJavaScript(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Annotation annot, int @event, ref string buffer, uint buflen)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            fixed (string* __buffer3 = &buffer)
            {
                var __arg3 = __buffer3;
                var ___ret = __Internal.FPDFAnnot_GetFormAdditionalActionJavaScript(__arg0, __arg1, @event, __arg3, buflen);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_HasKey(global::PdfLibCore.Generated.FPDF_Annotation annot, string key)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_HasKey(__arg0, key);
            return ___ret;
        }


        public static int FPDFAnnot_GetValueType(global::PdfLibCore.Generated.FPDF_Annotation annot, string key)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetValueType(__arg0, key);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetStringValue(global::PdfLibCore.Generated.FPDF_Annotation annot, string key, ref string value)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_SetStringValue(__arg0, key, value);
            return ___ret;
        }


        public static uint FPDFAnnot_GetStringValue(global::PdfLibCore.Generated.FPDF_Annotation annot, string key, ref string buffer, uint buflen)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            fixed (string* __buffer2 = &buffer)
            {
                var __arg2 = __buffer2;
                var ___ret = __Internal.FPDFAnnot_GetStringValue(__arg0, key, __arg2, buflen);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_GetNumberValue(global::PdfLibCore.Generated.FPDF_Annotation annot, string key, ref float value)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            fixed (float* __value2 = &value)
            {
                var __arg2 = __value2;
                var ___ret = __Internal.FPDFAnnot_GetNumberValue(__arg0, key, __arg2);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetAP(global::PdfLibCore.Generated.FPDF_Annotation annot, int appearanceMode, ref string value)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_SetAP(__arg0, appearanceMode, value);
            return ___ret;
        }


        public static uint FPDFAnnot_GetAP(global::PdfLibCore.Generated.FPDF_Annotation annot, int appearanceMode, ref string buffer, uint buflen)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            fixed (string* __buffer2 = &buffer)
            {
                var __arg2 = __buffer2;
                var ___ret = __Internal.FPDFAnnot_GetAP(__arg0, appearanceMode, __arg2, buflen);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Generated.FPDF_Annotation FPDFAnnot_GetLinkedAnnot(global::PdfLibCore.Generated.FPDF_Annotation annot, string key)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetLinkedAnnot(__arg0, key);
            var __result0 = global::PdfLibCore.Generated.FPDF_Annotation.__CreateInstance(___ret, false);
            return __result0;
        }


        public static int FPDFAnnot_GetFlags(global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetFlags(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetFlags(global::PdfLibCore.Generated.FPDF_Annotation annot, int flags)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_SetFlags(__arg0, flags);
            return ___ret;
        }


        public static int FPDFAnnot_GetFormFieldFlags(global::PdfLibCore.Generated.FPDF_Form_handle handle, global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = handle is null ? __IntPtr.Zero : handle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetFormFieldFlags(__arg0, __arg1);
            return ___ret;
        }


        public static global::PdfLibCore.Generated.FPDF_Annotation FPDFAnnot_GetFormFieldAtPoint(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Page page, global::PdfLibCore.Generated.FS_POINTF_ point)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg2 = point is null ? __IntPtr.Zero : point.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetFormFieldAtPoint(__arg0, __arg1, __arg2);
            var __result0 = global::PdfLibCore.Generated.FPDF_Annotation.__CreateInstance(___ret, false);
            return __result0;
        }


        public static uint FPDFAnnot_GetFormFieldName(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Annotation annot, ref string buffer, uint buflen)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            fixed (string* __buffer2 = &buffer)
            {
                var __arg2 = __buffer2;
                var ___ret = __Internal.FPDFAnnot_GetFormFieldName(__arg0, __arg1, __arg2, buflen);
                return ___ret;
            }
        }


        public static uint FPDFAnnot_GetFormFieldAlternateName(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Annotation annot, ref string buffer, uint buflen)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            fixed (string* __buffer2 = &buffer)
            {
                var __arg2 = __buffer2;
                var ___ret = __Internal.FPDFAnnot_GetFormFieldAlternateName(__arg0, __arg1, __arg2, buflen);
                return ___ret;
            }
        }


        public static int FPDFAnnot_GetFormFieldType(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetFormFieldType(__arg0, __arg1);
            return ___ret;
        }


        public static uint FPDFAnnot_GetFormFieldValue(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Annotation annot, ref string buffer, uint buflen)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            fixed (string* __buffer2 = &buffer)
            {
                var __arg2 = __buffer2;
                var ___ret = __Internal.FPDFAnnot_GetFormFieldValue(__arg0, __arg1, __arg2, buflen);
                return ___ret;
            }
        }


        public static int FPDFAnnot_GetOptionCount(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetOptionCount(__arg0, __arg1);
            return ___ret;
        }


        public static uint FPDFAnnot_GetOptionLabel(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Annotation annot, int index, ref string buffer, uint buflen)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            fixed (string* __buffer3 = &buffer)
            {
                var __arg3 = __buffer3;
                var ___ret = __Internal.FPDFAnnot_GetOptionLabel(__arg0, __arg1, index, __arg3, buflen);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_IsOptionSelected(global::PdfLibCore.Generated.FPDF_Form_handle handle, global::PdfLibCore.Generated.FPDF_Annotation annot, int index)
        {
            var __arg0 = handle is null ? __IntPtr.Zero : handle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_IsOptionSelected(__arg0, __arg1, index);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_GetFontSize(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Annotation annot, ref float value)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            fixed (float* __value2 = &value)
            {
                var __arg2 = __value2;
                var ___ret = __Internal.FPDFAnnot_GetFontSize(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_IsChecked(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_IsChecked(__arg0, __arg1);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetFocusableSubtypes(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, ref int subtypes, ulong count)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            fixed (int* __subtypes1 = &subtypes)
            {
                var __arg1 = __subtypes1;
                var ___ret = __Internal.FPDFAnnot_SetFocusableSubtypes(__arg0, __arg1, count);
                return ___ret;
            }
        }


        public static int FPDFAnnot_GetFocusableSubtypesCount(global::PdfLibCore.Generated.FPDF_Form_handle hHandle)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetFocusableSubtypesCount(__arg0);
            return ___ret;
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_GetFocusableSubtypes(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, ref int subtypes, ulong count)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            fixed (int* __subtypes1 = &subtypes)
            {
                var __arg1 = __subtypes1;
                var ___ret = __Internal.FPDFAnnot_GetFocusableSubtypes(__arg0, __arg1, count);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Generated.FPDF_Link FPDFAnnot_GetLink(global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetLink(__arg0);
            var __result0 = global::PdfLibCore.Generated.FPDF_Link.__CreateInstance(___ret, false);
            return __result0;
        }


        public static int FPDFAnnot_GetFormControlCount(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetFormControlCount(__arg0, __arg1);
            return ___ret;
        }


        public static int FPDFAnnot_GetFormControlIndex(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Annotation annot)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_GetFormControlIndex(__arg0, __arg1);
            return ___ret;
        }


        public static uint FPDFAnnot_GetFormFieldExportValue(global::PdfLibCore.Generated.FPDF_Form_handle hHandle, global::PdfLibCore.Generated.FPDF_Annotation annot, ref string buffer, uint buflen)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            fixed (string* __buffer2 = &buffer)
            {
                var __arg2 = __buffer2;
                var ___ret = __Internal.FPDFAnnot_GetFormFieldExportValue(__arg0, __arg1, __arg2, buflen);
                return ___ret;
            }
        }


        public static global::PdfLibCore.Types.FPDF_BOOL FPDFAnnot_SetURI(global::PdfLibCore.Generated.FPDF_Annotation annot, string uri)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var ___ret = __Internal.FPDFAnnot_SetURI(__arg0, uri);
            return ___ret;
        }
    }
}
