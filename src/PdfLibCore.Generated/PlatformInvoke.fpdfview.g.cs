using System;
using System.Security;
using System.Runtime.InteropServices;
using PdfLibCore.Generated.Enums;
using PdfLibCore.Generated.Structs;
using PdfLibCore.Generated.Types;

/*
This file is part of PdfLibCore, a wrapper around the PDFium library for the .NET.
Inspired by the awesome work of PDFiumSharp by Tobias Meyer.

Copyright (C) 2023 J.C.A. Kokenberg & Jan Baarssen
License: Microsoft Reciprocal License (MS-RL)
*/

// AUTOGENERATED FILE - 10-05-2023 (01:50:33) - Utc
// DO NOT MODIFY

namespace PdfLibCore.Generated;
public static partial class PlatformInvoke
{
    ///<summary>Initialize the FPDFSDK library</summary>
    ///<remarks>
    /// Convenience function to call FPDF_InitLibraryWithConfig() for
    /// backwards compatibility purposes. This will be deprecated in the
    /// future.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_InitLibrary), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern IntPtr FPDF_InitLibrary();
    ///<summary>Initialize the FPDFSDK library</summary>
    ///<param name = "config">configuration information as above.</param>
    ///<remarks>
    /// You have to call this function before you can call any PDF
    /// processing functions.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_InitLibraryWithConfig), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern IntPtr FPDF_InitLibraryWithConfig(ref FPDF_LIBRARY_CONFIG config);
    ///<summary>Release all resources allocated by the FPDFSDK library.</summary>
    ///<remarks>
    /// You can call this function to release all memory blocks allocated by
    /// the library.
    /// After this function is called, you should not call any PDF
    /// processing functions.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_DestroyLibrary), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern IntPtr FPDF_DestroyLibrary();
    ///<summary>Set the policy for the sandbox environment.</summary>
    ///<param name = "policy">
    /// The specified policy for setting, for example:
    /// FPDF_POLICY_MACHINETIME_ACCESS.
    ///</param>
    ///<param name = "enable">True to enable, false to disable the policy.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_SetSandBoxPolicy), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern IntPtr FPDF_SetSandBoxPolicy(uint policy, int enable);
    ///<summary>Set printing mode when printing on Windows.</summary>
    ///<param name = "mode">
    /// FPDF_PRINTMODE_EMF to output EMF (default)
    /// FPDF_PRINTMODE_TEXTONLY to output text only (for charstream
    /// devices)
    /// FPDF_PRINTMODE_POSTSCRIPT2 to output level 2 PostScript into
    /// EMF as a series of GDI comments.
    /// FPDF_PRINTMODE_POSTSCRIPT3 to output level 3 PostScript into
    /// EMF as a series of GDI comments.
    /// FPDF_PRINTMODE_POSTSCRIPT2_PASSTHROUGH to output level 2
    /// PostScript via ExtEscape() in PASSTHROUGH mode.
    /// FPDF_PRINTMODE_POSTSCRIPT3_PASSTHROUGH to output level 3
    /// PostScript via ExtEscape() in PASSTHROUGH mode.
    /// FPDF_PRINTMODE_EMF_IMAGE_MASKS to output EMF, with more
    /// efficient processing of documents containing image masks.
    /// FPDF_PRINTMODE_POSTSCRIPT3_TYPE42 to output level 3
    /// PostScript with embedded Type 42 fonts, when applicable, into
    /// EMF as a series of GDI comments.
    /// FPDF_PRINTMODE_POSTSCRIPT3_TYPE42_PASSTHROUGH to output level
    /// 3 PostScript with embedded Type 42 fonts, when applicable,
    /// via ExtEscape() in PASSTHROUGH mode.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>True if successful, false if unsuccessful (typically invalid input).</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_SetPrintMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_SetPrintMode(int mode);
    ///<summary>Open and load a PDF document.</summary>
    ///<param name = "file_path">Path to the PDF file (including extension).</param>
    ///<param name = "password">
    /// A string used as the password for the PDF file.
    /// If no password is needed, empty or NULL can be used.
    /// See comments below regarding the encoding.
    ///</param>
    ///<remarks>
    /// Loaded document can be closed by FPDF_CloseDocument().
    /// If this function fails, you can use FPDF_GetLastError() to retrieve
    /// the reason why it failed.
    /// The encoding for |password| can be either UTF-8 or Latin-1. PDFs,
    /// depending on the security handler revision, will only accept one or
    /// the other encoding. If |password|'s encoding and the PDF's expected
    /// encoding do not match, FPDF_LoadDocument() will automatically
    /// convert |password| to the other encoding.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>A handle to the loaded document, or NULL on failure.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_LoadDocument), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern FPDF_DOCUMENT FPDF_LoadDocument(FPDF_STRING file_path, FPDF_BYTESTRING password);
    ///<summary>Open and load a PDF document from memory.</summary>
    ///<param name = "data_buf">Pointer to a buffer containing the PDF document.</param>
    ///<param name = "size">Number of bytes in the PDF document.</param>
    ///<param name = "password">
    /// A string used as the password for the PDF file.
    /// If no password is needed, empty or NULL can be used.
    ///</param>
    ///<remarks>
    /// The memory buffer must remain valid when the document is open.
    /// The loaded document can be closed by FPDF_CloseDocument.
    /// If this function fails, you can use FPDF_GetLastError() to retrieve
    /// the reason why it failed.
    /// See the comments for FPDF_LoadDocument() regarding the encoding for
    /// |password|.
    /// Notes:
    /// If PDFium is built with the XFA module, the application should call
    /// FPDF_LoadXFA() function after the PDF document loaded to support XFA
    /// fields defined in the fpdfformfill.h file.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>A handle to the loaded document, or NULL on failure.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_LoadMemDocument), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern FPDF_DOCUMENT FPDF_LoadMemDocument(ref IntPtr data_buf, int size, FPDF_BYTESTRING password);
    ///<summary>Open and load a PDF document from memory.</summary>
    ///<param name = "data_buf">Pointer to a buffer containing the PDF document.</param>
    ///<param name = "size">Number of bytes in the PDF document.</param>
    ///<param name = "password">
    /// A string used as the password for the PDF file.
    /// If no password is needed, empty or NULL can be used.
    ///</param>
    ///<remarks>
    /// The memory buffer must remain valid when the document is open.
    /// The loaded document can be closed by FPDF_CloseDocument.
    /// If this function fails, you can use FPDF_GetLastError() to retrieve
    /// the reason why it failed.
    /// See the comments for FPDF_LoadDocument() regarding the encoding for
    /// |password|.
    /// Notes:
    /// If PDFium is built with the XFA module, the application should call
    /// FPDF_LoadXFA() function after the PDF document loaded to support XFA
    /// fields defined in the fpdfformfill.h file.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>A handle to the loaded document, or NULL on failure.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_LoadMemDocument64), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern FPDF_DOCUMENT FPDF_LoadMemDocument64(ref IntPtr data_buf, ulong size, FPDF_BYTESTRING password);
    ///<summary>Load PDF document from a custom access descriptor.</summary>
    ///<param name = "pFileAccess">A structure for accessing the file.</param>
    ///<param name = "password">Optional password for decrypting the PDF file.</param>
    ///<remarks>
    /// The application must keep the file resources |pFileAccess| points to
    /// valid until the returned FPDF_DOCUMENT is closed. |pFileAccess|
    /// itself does not need to outlive the FPDF_DOCUMENT.
    /// The loaded document can be closed with FPDF_CloseDocument().
    /// See the comments for FPDF_LoadDocument() regarding the encoding for
    /// |password|.
    /// Notes:
    /// If PDFium is built with the XFA module, the application should call
    /// FPDF_LoadXFA() function after the PDF document loaded to support XFA
    /// fields defined in the fpdfformfill.h file.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>A handle to the loaded document, or NULL on failure.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_LoadCustomDocument), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern FPDF_DOCUMENT FPDF_LoadCustomDocument(ref FPDF_FILEACCESS pFileAccess, FPDF_BYTESTRING password);
    ///<summary>Get the file version of the given PDF document.</summary>
    ///<param name = "doc">Handle to a document.</param>
    ///<param name = "fileVersion">
    /// The PDF file version. File version: 14 for 1.4, 15
    /// for 1.5, ...
    ///</param>
    ///<remarks>
    /// If the document was created by FPDF_CreateNewDocument,
    /// then this function will always fail.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>True if succeeds, false otherwise.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetFileVersion), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_GetFileVersion(FPDF_DOCUMENT doc, out int fileVersion);
    ///<summary>Get last error code when a function fails.</summary>
    ///<remarks>
    /// If the previous SDK call succeeded, the return value of this
    /// function is not defined.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>A 32-bit integer indicating error code as defined above.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetLastError), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDF_GetLastError();
    ///<summary>Whether the document's cross reference table is valid or not.</summary>
    ///<param name = "document">Handle to a document. Returned by FPDF_LoadDocument.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// True if the PDF parser did not encounter problems parsing the cross
    /// reference table. False if the parser could not parse the cross
    /// reference table and the table had to be rebuild from other data
    /// within the document.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_DocumentHasValidCrossReferenceTable), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_DocumentHasValidCrossReferenceTable(FPDF_DOCUMENT document);
    ///<summary>Get the byte offsets of trailer ends.</summary>
    ///<param name = "document">Handle to document. Returned by FPDF_LoadDocument().</param>
    ///<param name = "buffer">
    /// The address of a buffer that receives the
    /// byte offsets.
    ///</param>
    ///<param name = "length">The size, in ints, of |buffer|.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// Returns the number of ints in the buffer on success, 0 on error.
    /// |buffer| is an array of integers that describes the exact byte offsets of the
    /// trailer ends in the document. If |length| is less than the returned length,
    /// or |document| or |buffer| is NULL, |buffer| will not be modified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetTrailerEnds), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDF_GetTrailerEnds(FPDF_DOCUMENT document, out uint buffer, uint length);
    ///<summary>Get file permission flags of the document.</summary>
    ///<param name = "document">Handle to a document. Returned by FPDF_LoadDocument.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// A 32-bit integer indicating permission flags. Please refer to the
    /// PDF Reference for detailed descriptions. If the document is not
    /// protected, 0xffffffff will be returned.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetDocPermissions), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDF_GetDocPermissions(FPDF_DOCUMENT document);
    ///<summary>Get the revision for the security handler.</summary>
    ///<param name = "document">Handle to a document. Returned by FPDF_LoadDocument.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// The security handler revision number. Please refer to the PDF
    /// Reference for a detailed description. If the document is not
    /// protected, -1 will be returned.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetSecurityHandlerRevision), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_GetSecurityHandlerRevision(FPDF_DOCUMENT document);
    ///<summary>Get total number of pages in the document.</summary>
    ///<param name = "document">Handle to document. Returned by FPDF_LoadDocument.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>Total number of pages in the document.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_GetPageCount(FPDF_DOCUMENT document);
    ///<summary>Load a page inside the document.</summary>
    ///<param name = "document">Handle to document. Returned by FPDF_LoadDocument</param>
    ///<param name = "page_index">Index number of the page. 0 for the first page.</param>
    ///<remarks>
    /// The loaded page can be rendered to devices using FPDF_RenderPage.
    /// The loaded page can be closed using FPDF_ClosePage.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>A handle to the loaded page, or NULL if page load fails.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_LoadPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern FPDF_PAGE FPDF_LoadPage(FPDF_DOCUMENT document, int page_index);
    ///<summary>Get page width.</summary>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage().</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// Page width (excluding non-displayable area) measured in points.
    /// One point is 1/72 inch (around 0.3528 mm).
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageWidthF), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern float FPDF_GetPageWidthF(FPDF_PAGE page);
    ///<summary>Get page width.</summary>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// Page width (excluding non-displayable area) measured in points.
    /// One point is 1/72 inch (around 0.3528 mm).
    /// Note:
    /// Prefer FPDF_GetPageWidthF() above. This will be deprecated in the
    /// future.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageWidth), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern double FPDF_GetPageWidth(FPDF_PAGE page);
    ///<summary>Get page height.</summary>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage().</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// Page height (excluding non-displayable area) measured in points.
    /// One point is 1/72 inch (around 0.3528 mm)
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageHeightF), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern float FPDF_GetPageHeightF(FPDF_PAGE page);
    ///<summary>Get page height.</summary>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// Page height (excluding non-displayable area) measured in points.
    /// One point is 1/72 inch (around 0.3528 mm)
    /// Note:
    /// Prefer FPDF_GetPageHeightF() above. This will be deprecated in the
    /// future.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageHeight), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern double FPDF_GetPageHeight(FPDF_PAGE page);
    ///<summary>
    /// Get the bounding box of the page. This is the intersection between
    /// its media box and its crop box.
    ///</summary>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage.</param>
    ///<param name = "rect">
    /// Pointer to a rect to receive the page bounding box.
    /// On an error, |rect| won't be filled.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>True for success.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageBoundingBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_GetPageBoundingBox(FPDF_PAGE page, ref FS_RECTF rect);
    ///<summary>Get the size of the page at the given index.</summary>
    ///<param name = "document">Handle to document. Returned by FPDF_LoadDocument().</param>
    ///<param name = "page_index">Page index, zero for the first page.</param>
    ///<param name = "size">
    /// Pointer to a FS_SIZEF to receive the page size.
    /// (in points).
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>Non-zero for success. 0 for error (document or page not found).</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageSizeByIndexF), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_GetPageSizeByIndexF(FPDF_DOCUMENT document, int page_index, ref FS_SIZEF size);
    ///<summary>Get the size of the page at the given index.</summary>
    ///<param name = "document">Handle to document. Returned by FPDF_LoadDocument.</param>
    ///<param name = "page_index">Page index, zero for the first page.</param>
    ///<param name = "width">
    /// Pointer to a double to receive the page width
    /// (in points).
    ///</param>
    ///<param name = "height">
    /// Pointer to a double to receive the page height
    /// (in points).
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// Non-zero for success. 0 for error (document or page not found).
    /// Note:
    /// Prefer FPDF_GetPageSizeByIndexF() above. This will be deprecated in
    /// the future.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageSizeByIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_GetPageSizeByIndex(FPDF_DOCUMENT document, int page_index, out double width, out double height);
    ///<summary>
    /// Render contents of a page to a device (screen, bitmap, or printer).
    /// This function is only supported on Windows.
    ///</summary>
    ///<param name = "dc">Handle to the device context.</param>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage.</param>
    ///<param name = "start_x">
    /// Left pixel position of the display area in
    /// device coordinates.
    ///</param>
    ///<param name = "start_y">
    /// Top pixel position of the display area in device
    /// coordinates.
    ///</param>
    ///<param name = "size_x">Horizontal size (in pixels) for displaying the page.</param>
    ///<param name = "size_y">Vertical size (in pixels) for displaying the page.</param>
    ///<param name = "rotate">
    /// Page orientation:
    /// 0 (normal)
    /// 1 (rotated 90 degrees clockwise)
    /// 2 (rotated 180 degrees)
    /// 3 (rotated 90 degrees counter-clockwise)
    ///</param>
    ///<param name = "flags">
    /// 0 for normal display, or combination of flags
    /// defined above.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern IntPtr FPDF_RenderPage(FPDF_BITMAP dc, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags);
    ///<summary>Render contents of a page to a device independent bitmap.</summary>
    ///<param name = "bitmap">
    /// Handle to the device independent bitmap (as the
    /// output buffer). The bitmap handle can be created
    /// by FPDFBitmap_Create or retrieved from an image
    /// object by FPDFImageObj_GetBitmap.
    ///</param>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage</param>
    ///<param name = "start_x">
    /// Left pixel position of the display area in
    /// bitmap coordinates.
    ///</param>
    ///<param name = "start_y">
    /// Top pixel position of the display area in bitmap
    /// coordinates.
    ///</param>
    ///<param name = "size_x">Horizontal size (in pixels) for displaying the page.</param>
    ///<param name = "size_y">Vertical size (in pixels) for displaying the page.</param>
    ///<param name = "rotate">
    /// Page orientation:
    /// 0 (normal)
    /// 1 (rotated 90 degrees clockwise)
    /// 2 (rotated 180 degrees)
    /// 3 (rotated 90 degrees counter-clockwise)
    ///</param>
    ///<param name = "flags">
    /// 0 for normal display, or combination of the Page
    /// Rendering flags defined above. With the FPDF_ANNOT
    /// flag, it renders all annotations that do not require
    /// user-interaction, which are all annotations except
    /// widget and popup annotations.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPageBitmap), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern IntPtr FPDF_RenderPageBitmap(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags);
    ///<summary>Render contents of a page to a device independent bitmap.</summary>
    ///<param name = "bitmap">
    /// Handle to the device independent bitmap (as the
    /// output buffer). The bitmap handle can be created
    /// by FPDFBitmap_Create or retrieved by
    /// FPDFImageObj_GetBitmap.
    ///</param>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage.</param>
    ///<param name = "matrix">
    /// The transform matrix, which must be invertible.
    /// See PDF Reference 1.7, 4.2.2 Common Transformations.
    ///</param>
    ///<param name = "clipping">The rect to clip to in device coords.</param>
    ///<param name = "flags">
    /// 0 for normal display, or combination of the Page
    /// Rendering flags defined above. With the FPDF_ANNOT
    /// flag, it renders all annotations that do not require
    /// user-interaction, which are all annotations except
    /// widget and popup annotations.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPageBitmapWithMatrix), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern IntPtr FPDF_RenderPageBitmapWithMatrix(FPDF_BITMAP bitmap, FPDF_PAGE page, ref FS_MATRIX matrix, ref FS_RECTF clipping, int flags);
    ///<summary>Close a loaded PDF page.</summary>
    ///<param name = "page">Handle to the loaded page.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_ClosePage), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern IntPtr FPDF_ClosePage(FPDF_PAGE page);
    ///<summary>Close a loaded PDF document.</summary>
    ///<param name = "document">Handle to the loaded document.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_CloseDocument), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern IntPtr FPDF_CloseDocument(FPDF_DOCUMENT document);
    ///<summary>Convert the screen coordinates of a point to page coordinates.</summary>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage.</param>
    ///<param name = "start_x">
    /// Left pixel position of the display area in
    /// device coordinates.
    ///</param>
    ///<param name = "start_y">
    /// Top pixel position of the display area in device
    /// coordinates.
    ///</param>
    ///<param name = "size_x">Horizontal size (in pixels) for displaying the page.</param>
    ///<param name = "size_y">Vertical size (in pixels) for displaying the page.</param>
    ///<param name = "rotate">
    /// Page orientation:
    /// 0 (normal)
    /// 1 (rotated 90 degrees clockwise)
    /// 2 (rotated 180 degrees)
    /// 3 (rotated 90 degrees counter-clockwise)
    ///</param>
    ///<param name = "device_x">X value in device coordinates to be converted.</param>
    ///<param name = "device_y">Y value in device coordinates to be converted.</param>
    ///<param name = "page_x">
    /// A pointer to a double receiving the converted X
    /// value in page coordinates.
    ///</param>
    ///<param name = "page_y">
    /// A pointer to a double receiving the converted Y
    /// value in page coordinates.
    ///</param>
    ///<remarks>
    /// The page coordinate system has its origin at the left-bottom corner
    /// of the page, with the X-axis on the bottom going to the right, and
    /// the Y-axis on the left side going up.
    /// NOTE: this coordinate system can be altered when you zoom, scroll,
    /// or rotate a page, however, a point on the page should always have
    /// the same coordinate values in the page coordinate system.
    /// The device coordinate system is device dependent. For screen device,
    /// its origin is at the left-top corner of the window. However this
    /// origin can be altered by the Windows coordinate transformation
    /// utilities.
    /// You must make sure the start_x, start_y, size_x, size_y
    /// and rotate parameters have exactly same values as you used in
    /// the FPDF_RenderPage() function call.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>
    /// Returns true if the conversion succeeds, and |page_x| and |page_y|
    /// successfully receives the converted coordinates.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_DeviceToPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_DeviceToPage(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, int rotate, int device_x, int device_y, out double page_x, out double page_y);
    ///<summary>Convert the page coordinates of a point to screen coordinates.</summary>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage.</param>
    ///<param name = "start_x">
    /// Left pixel position of the display area in
    /// device coordinates.
    ///</param>
    ///<param name = "start_y">
    /// Top pixel position of the display area in device
    /// coordinates.
    ///</param>
    ///<param name = "size_x">Horizontal size (in pixels) for displaying the page.</param>
    ///<param name = "size_y">Vertical size (in pixels) for displaying the page.</param>
    ///<param name = "rotate">
    /// Page orientation:
    /// 0 (normal)
    /// 1 (rotated 90 degrees clockwise)
    /// 2 (rotated 180 degrees)
    /// 3 (rotated 90 degrees counter-clockwise)
    ///</param>
    ///<param name = "page_x">X value in page coordinates.</param>
    ///<param name = "page_y">Y value in page coordinate.</param>
    ///<param name = "device_x">
    /// A pointer to an integer receiving the result X
    /// value in device coordinates.
    ///</param>
    ///<param name = "device_y">
    /// A pointer to an integer receiving the result Y
    /// value in device coordinates.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// Returns true if the conversion succeeds, and |device_x| and
    /// |device_y| successfully receives the converted coordinates.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_PageToDevice), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_PageToDevice(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, int rotate, double page_x, double page_y, out int device_x, out int device_y);
    ///<summary>Create a device independent bitmap (FXDIB).</summary>
    ///<param name = "width">
    /// The number of pixels in width for the bitmap.
    /// Must be greater than 0.
    ///</param>
    ///<param name = "height">
    /// The number of pixels in height for the bitmap.
    /// Must be greater than 0.
    ///</param>
    ///<param name = "alpha">
    /// A flag indicating whether the alpha channel is used.
    /// Non-zero for using alpha, zero for not using.
    ///</param>
    ///<remarks>
    /// The bitmap always uses 4 bytes per pixel. The first byte is always
    /// double word aligned.
    /// The byte order is BGRx (the last byte unused if no alpha channel) or
    /// BGRA.
    /// The pixels in a horizontal line are stored side by side, with the
    /// left most pixel stored first (with lower memory address).
    /// Each line uses width * 4 bytes.
    /// Lines are stored one after another, with the top most line stored
    /// first. There is no gap between adjacent lines.
    /// This function allocates enough memory for holding all pixels in the
    /// bitmap, but it doesn't initialize the buffer. Applications can use
    /// FPDFBitmap_FillRect() to fill the bitmap using any color. If the OS
    /// allows it, this function can allocate up to 4 GB of memory.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>
    /// The created bitmap handle, or NULL if a parameter error or out of
    /// memory.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_Create), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern FPDF_BITMAP FPDFBitmap_Create(int width, int height, int alpha);
    ///<summary>Create a device independent bitmap (FXDIB)</summary>
    ///<param name = "width">
    /// The number of pixels in width for the bitmap.
    /// Must be greater than 0.
    ///</param>
    ///<param name = "height">
    /// The number of pixels in height for the bitmap.
    /// Must be greater than 0.
    ///</param>
    ///<param name = "format">
    /// A number indicating for bitmap format, as defined
    /// above.
    ///</param>
    ///<param name = "first_scan">
    /// A pointer to the first byte of the first line if
    /// using an external buffer. If this parameter is NULL,
    /// then the a new buffer will be created.
    ///</param>
    ///<param name = "stride">
    /// Number of bytes for each scan line, for external
    /// buffer only.
    ///</param>
    ///<remarks>
    /// Similar to FPDFBitmap_Create function, but allows for more formats
    /// and an external buffer is supported. The bitmap created by this
    /// function can be used in any place that a FPDF_BITMAP handle is
    /// required.
    /// If an external buffer is used, then the application should destroy
    /// the buffer by itself. FPDFBitmap_Destroy function will not destroy
    /// the buffer.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>The bitmap handle, or NULL if parameter error or out of memory.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_CreateEx), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern FPDF_BITMAP FPDFBitmap_CreateEx(int width, int height, int format, out IntPtr first_scan, int stride);
    ///<summary>Get the format of the bitmap.</summary>
    ///<param name = "bitmap">
    /// Handle to the bitmap. Returned by FPDFBitmap_Create
    /// or FPDFImageObj_GetBitmap.
    ///</param>
    ///<remarks>
    /// Only formats supported by FPDFBitmap_CreateEx are supported by this
    /// function; see the list of such formats above.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>The format of the bitmap.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_GetFormat), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDFBitmap_GetFormat(FPDF_BITMAP bitmap);
    ///<summary>Fill a rectangle in a bitmap.</summary>
    ///<param name = "bitmap">
    /// The handle to the bitmap. Returned by
    /// FPDFBitmap_Create.
    ///</param>
    ///<param name = "left">
    /// The left position. Starting from 0 at the
    /// left-most pixel.
    ///</param>
    ///<param name = "top">
    /// The top position. Starting from 0 at the
    /// top-most line.
    ///</param>
    ///<param name = "width">Width in pixels to be filled.</param>
    ///<param name = "height">Height in pixels to be filled.</param>
    ///<param name = "color">
    /// A 32-bit value specifing the color, in 8888 ARGB
    /// format.
    ///</param>
    ///<remarks>
    /// This function sets the color and (optionally) alpha value in the
    /// specified region of the bitmap.
    /// NOTE: If the alpha channel is used, this function does NOT
    /// composite the background with the source color, instead the
    /// background will be replaced by the source color and the alpha.
    /// If the alpha channel is not used, the alpha parameter is ignored.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_FillRect), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern IntPtr FPDFBitmap_FillRect(FPDF_BITMAP bitmap, int left, int top, int width, int height, uint color);
    ///<summary>Get data buffer of a bitmap.</summary>
    ///<param name = "bitmap">
    /// Handle to the bitmap. Returned by FPDFBitmap_Create
    /// or FPDFImageObj_GetBitmap.
    ///</param>
    ///<remarks>
    /// The stride may be more than width * number of bytes per pixel
    /// Applications can use this function to get the bitmap buffer pointer,
    /// then manipulate any color and/or alpha values for any pixels in the
    /// bitmap.
    /// The data is in BGRA format. Where the A maybe unused if alpha was
    /// not specified.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>The pointer to the first byte of the bitmap buffer.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_GetBuffer), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern IntPtr FPDFBitmap_GetBuffer(FPDF_BITMAP bitmap);
    ///<summary>Get width of a bitmap.</summary>
    ///<param name = "bitmap">
    /// Handle to the bitmap. Returned by FPDFBitmap_Create
    /// or FPDFImageObj_GetBitmap.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The width of the bitmap in pixels.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_GetWidth), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDFBitmap_GetWidth(FPDF_BITMAP bitmap);
    ///<summary>Get height of a bitmap.</summary>
    ///<param name = "bitmap">
    /// Handle to the bitmap. Returned by FPDFBitmap_Create
    /// or FPDFImageObj_GetBitmap.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The height of the bitmap in pixels.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_GetHeight), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDFBitmap_GetHeight(FPDF_BITMAP bitmap);
    ///<summary>Get number of bytes for each line in the bitmap buffer.</summary>
    ///<param name = "bitmap">
    /// Handle to the bitmap. Returned by FPDFBitmap_Create
    /// or FPDFImageObj_GetBitmap.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The number of bytes for each line in the bitmap buffer.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_GetStride), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDFBitmap_GetStride(FPDF_BITMAP bitmap);
    ///<summary>Destroy a bitmap and release all related buffers.</summary>
    ///<param name = "bitmap">
    /// Handle to the bitmap. Returned by FPDFBitmap_Create
    /// or FPDFImageObj_GetBitmap.
    ///</param>
    ///<remarks>
    /// This function will not destroy any external buffers provided when
    /// the bitmap was created.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_Destroy), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern IntPtr FPDFBitmap_Destroy(FPDF_BITMAP bitmap);
    ///<summary>Whether the PDF document prefers to be scaled or not.</summary>
    ///<param name = "document">Handle to the loaded document.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetPrintScaling), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_VIEWERREF_GetPrintScaling(FPDF_DOCUMENT document);
    ///<summary>Returns the number of copies to be printed.</summary>
    ///<param name = "document">Handle to the loaded document.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The number of copies to be printed.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetNumCopies), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_VIEWERREF_GetNumCopies(FPDF_DOCUMENT document);
    ///<summary>Page numbers to initialize print dialog box when file is printed.</summary>
    ///<param name = "document">Handle to the loaded document.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The print page range to be used for printing.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetPrintPageRange), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern FPDF_PAGERANGE FPDF_VIEWERREF_GetPrintPageRange(FPDF_DOCUMENT document);
    ///<summary>Returns the number of elements in a FPDF_PAGERANGE.</summary>
    ///<param name = "pagerange">Handle to the page range.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The number of elements in the page range. Returns 0 on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetPrintPageRangeCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern ulong FPDF_VIEWERREF_GetPrintPageRangeCount(FPDF_PAGERANGE pagerange);
    ///<summary>Returns an element from a FPDF_PAGERANGE.</summary>
    ///<param name = "pagerange">Handle to the page range.</param>
    ///<param name = "index">Index of the element.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// The value of the element in the page range at a given index.
    /// Returns -1 on error.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetPrintPageRangeElement), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_VIEWERREF_GetPrintPageRangeElement(FPDF_PAGERANGE pagerange, ulong index);
    ///<summary>
    /// Returns the paper handling option to be used when printing from
    /// the print dialog.
    ///</summary>
    ///<param name = "document">Handle to the loaded document.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The paper handling option to be used when printing.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetDuplex), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern FPDF_DUPLEXTYPE FPDF_VIEWERREF_GetDuplex(FPDF_DOCUMENT document);
    ///<summary>
    /// Gets the contents for a viewer ref, with a given key. The value must
    /// be of type "name".
    ///</summary>
    ///<param name = "document">Handle to the loaded document.</param>
    ///<param name = "key">
    /// Name of the key in the viewer pref dictionary,
    /// encoded in UTF-8.
    ///</param>
    ///<param name = "buffer">A string to write the contents of the key to.</param>
    ///<param name = "length">Length of the buffer.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// The number of bytes in the contents, including the NULL terminator.
    /// Thus if the return value is 0, then that indicates an error, such
    /// as when |document| is invalid or |buffer| is NULL. If |length| is
    /// less than the returned length, or |buffer| is NULL, |buffer| will
    /// not be modified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetName), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDF_VIEWERREF_GetName(FPDF_DOCUMENT document, FPDF_BYTESTRING key, out string buffer, uint length);
    ///<summary>Get the count of named destinations in the PDF document.</summary>
    ///<param name = "document">Handle to a document</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The count of named destinations.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_CountNamedDests), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDF_CountNamedDests(FPDF_DOCUMENT document);
    ///<summary>Get a the destination handle for the given name.</summary>
    ///<param name = "document">Handle to the loaded document.</param>
    ///<param name = "name">The name of a destination.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The handle to the destination.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetNamedDestByName), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern FPDF_DEST FPDF_GetNamedDestByName(FPDF_DOCUMENT document, FPDF_BYTESTRING name);
    ///<summary>Get the named destination by index.</summary>
    ///<param name = "document">Handle to a document</param>
    ///<param name = "index">The index of a named destination.</param>
    ///<param name = "buffer">
    /// The buffer to store the destination name,
    /// used as wchar_t*.
    ///</param>
    ///<param name = "buflen [in/out]">
    /// Size of the buffer in bytes on input,
    /// length of the result in bytes on output
    /// or -1 if the buffer is too small.
    ///</param>
    ///<remarks>
    /// Call this function twice to get the name of the named destination:
    /// 1) First time pass in |buffer| as NULL and get buflen.
    /// 2) Second time pass in allocated |buffer| and buflen to retrieve
    /// |buffer|, which should be used as wchar_t*.
    /// If buflen is not sufficiently large, it will be set to -1 upon
    /// return.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>
    /// The destination handle for a given index, or NULL if there is no
    /// named destination corresponding to |index|.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetNamedDest), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern FPDF_DEST FPDF_GetNamedDest(FPDF_DOCUMENT document, int index, out IntPtr buffer, out int buflen);
    ///<summary>Get the number of valid packets in the XFA entry.</summary>
    ///<param name = "document">Handle to the document.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The number of valid packets, or -1 on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetXFAPacketCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_GetXFAPacketCount(FPDF_DOCUMENT document);
    ///<summary>Get the name of a packet in the XFA array.</summary>
    ///<param name = "document">Handle to the document.</param>
    ///<param name = "index">Index number of the packet. 0 for the first packet.</param>
    ///<param name = "buffer">Buffer for holding the name of the XFA packet.</param>
    ///<param name = "buflen">Length of |buffer| in bytes.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// The length of the packet name in bytes, or 0 on error.
    /// |document| must be valid and |index| must be in the range [0, N), where N is
    /// the value returned by FPDF_GetXFAPacketCount().
    /// |buffer| is only modified if it is non-NULL and |buflen| is greater than or
    /// equal to the length of the packet name. The packet name includes a
    /// terminating NUL character. |buffer| is unmodified on error.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetXFAPacketName), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDF_GetXFAPacketName(FPDF_DOCUMENT document, int index, out IntPtr buffer, uint buflen);
    ///<summary>Get the content of a packet in the XFA array.</summary>
    ///<param name = "document">Handle to the document.</param>
    ///<param name = "index">Index number of the packet. 0 for the first packet.</param>
    ///<param name = "buffer">Buffer for holding the content of the XFA packet.</param>
    ///<param name = "buflen">Length of |buffer| in bytes.</param>
    ///<param name = "out_buflen">
    /// Pointer to the variable that will receive the minimum
    /// buffer size needed to contain the content of the XFA
    /// packet.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// Whether the operation succeeded or not.
    /// |document| must be valid and |index| must be in the range [0, N), where N is
    /// the value returned by FPDF_GetXFAPacketCount(). |out_buflen| must not be
    /// NULL. When the aforementioned arguments are valid, the operation succeeds,
    /// and |out_buflen| receives the content size. |buffer| is only modified if
    /// |buffer| is non-null and long enough to contain the content. Callers must
    /// check both the return value and the input |buflen| is no less than the
    /// returned |out_buflen| before using the data in |buffer|.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetXFAPacketContent), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_GetXFAPacketContent(FPDF_DOCUMENT document, int index, out IntPtr buffer, uint buflen, out uint out_buflen);
}