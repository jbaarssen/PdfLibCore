using System;
using System.Security;
using System.Runtime.InteropServices;
using PdfLibCore.Generated.Enums;
using PdfLibCore.Generated.Structs;
using PdfLibCore.Generated.Types;

/*
This file is part of PdfLibCore, a wrapper around the PDFium library for the .NET.
Inspired by the awesome work of PDFiumSharp by Tobias Meyer.

Copyright (C) 2023 J.C.A. Kokenberg & Jan Baarssen
License: Microsoft Reciprocal License (MS-RL)
*/

// AUTOGENERATED FILE - 10-05-2023 (01:50:33) - Utc
// DO NOT MODIFY

namespace PdfLibCore.Generated;
public static partial class PlatformInvoke
{
    ///<summary>
    /// Start to render page contents to a device independent bitmap
    /// progressively with a specified color scheme for the content.
    ///</summary>
    ///<param name = "bitmap">
    /// Handle to the device independent bitmap (as the
    /// output buffer). Bitmap handle can be created by
    /// FPDFBitmap_Create function.
    ///</param>
    ///<param name = "page">
    /// Handle to the page as returned by FPDF_LoadPage
    /// function.
    ///</param>
    ///<param name = "start_x">
    /// Left pixel position of the display area in the
    /// bitmap coordinate.
    ///</param>
    ///<param name = "start_y">
    /// Top pixel position of the display area in the
    /// bitmap coordinate.
    ///</param>
    ///<param name = "size_x">
    /// Horizontal size (in pixels) for displaying the
    /// page.
    ///</param>
    ///<param name = "size_y">Vertical size (in pixels) for displaying the page.</param>
    ///<param name = "rotate">
    /// Page orientation: 0 (normal), 1 (rotated 90
    /// degrees clockwise), 2 (rotated 180 degrees),
    /// 3 (rotated 90 degrees counter-clockwise).
    ///</param>
    ///<param name = "flags">
    /// 0 for normal display, or combination of flags
    /// defined in fpdfview.h. With FPDF_ANNOT flag, it
    /// renders all annotations that does not require
    /// user-interaction, which are all annotations except
    /// widget and popup annotations.
    ///</param>
    ///<param name = "color_scheme">
    /// Color scheme to be used in rendering the |page|.
    /// If null, this function will work similar to
    /// FPDF_RenderPageBitmap_Start().
    ///</param>
    ///<param name = "pause">
    /// The IFSDK_PAUSE interface. A callback mechanism
    /// allowing the page rendering process.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_progressive.h.</remarks>
    ///<returns>
    /// Rendering Status. See flags for progressive process status for the
    /// details.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPageBitmapWithColorScheme_Start), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_RenderPageBitmapWithColorScheme_Start(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags, ref FPDF_COLORSCHEME color_scheme, ref IFSDK_PAUSE pause);
    ///<summary>
    /// Start to render page contents to a device independent bitmap
    /// progressively.
    ///</summary>
    ///<param name = "bitmap">
    /// Handle to the device independent bitmap (as the
    /// output buffer). Bitmap handle can be created by
    /// FPDFBitmap_Create().
    ///</param>
    ///<param name = "page">Handle to the page, as returned by FPDF_LoadPage().</param>
    ///<param name = "start_x">
    /// Left pixel position of the display area in the
    /// bitmap coordinates.
    ///</param>
    ///<param name = "start_y">
    /// Top pixel position of the display area in the bitmap
    /// coordinates.
    ///</param>
    ///<param name = "size_x">Horizontal size (in pixels) for displaying the page.</param>
    ///<param name = "size_y">Vertical size (in pixels) for displaying the page.</param>
    ///<param name = "rotate">
    /// Page orientation: 0 (normal), 1 (rotated 90 degrees
    /// clockwise), 2 (rotated 180 degrees), 3 (rotated 90
    /// degrees counter-clockwise).
    ///</param>
    ///<param name = "flags">
    /// 0 for normal display, or combination of flags
    /// defined in fpdfview.h. With FPDF_ANNOT flag, it
    /// renders all annotations that does not require
    /// user-interaction, which are all annotations except
    /// widget and popup annotations.
    ///</param>
    ///<param name = "pause">
    /// The IFSDK_PAUSE interface.A callback mechanism
    /// allowing the page rendering process
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_progressive.h.</remarks>
    ///<returns>
    /// Rendering Status. See flags for progressive process status for the
    /// details.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPageBitmap_Start), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_RenderPageBitmap_Start(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags, ref IFSDK_PAUSE pause);
    ///<summary>Continue rendering a PDF page.</summary>
    ///<param name = "page">Handle to the page, as returned by FPDF_LoadPage().</param>
    ///<param name = "pause">
    /// The IFSDK_PAUSE interface (a callback mechanism
    /// allowing the page rendering process to be paused
    /// before it's finished). This can be NULL if you
    /// don't want to pause.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_progressive.h.</remarks>
    ///<returns>
    /// The rendering status. See flags for progressive process status for
    /// the details.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPage_Continue), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_RenderPage_Continue(FPDF_PAGE page, ref IFSDK_PAUSE pause);
    ///<summary>
    /// Release the resource allocate during page rendering. Need to be
    /// called after finishing rendering or
    /// cancel the rendering.
    ///</summary>
    ///<param name = "page">Handle to the page, as returned by FPDF_LoadPage().</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_progressive.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPage_Close), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern IntPtr FPDF_RenderPage_Close(FPDF_PAGE page);
}