using System;
using System.Security;
using System.Runtime.InteropServices;
using PdfLibCore.Generated.Enums;
using PdfLibCore.Generated.Structs;
using PdfLibCore.Generated.Types;

/*
This file is part of PdfLibCore, a wrapper around the PDFium library for the .NET.
Inspired by the awesome work of PDFiumSharp by Tobias Meyer.

Copyright (C) 2023 J.C.A. Kokenberg & Jan Baarssen
License: Microsoft Reciprocal License (MS-RL)
*/

// AUTOGENERATED FILE - 10-05-2023 (01:50:33) - Utc
// DO NOT MODIFY

namespace PdfLibCore.Generated;
public static partial class PlatformInvoke
{
    ///<summary>Get the structure tree for a page.</summary>
    ///<param name = "page">Handle to the page, as returned by FPDF_LoadPage().</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.</remarks>
    ///<returns>A handle to the structure tree or NULL on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructTree_GetForPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern FPDF_STRUCTTREE FPDF_StructTree_GetForPage(FPDF_PAGE page);
    ///<summary>Release a resource allocated by FPDF_StructTree_GetForPage().</summary>
    ///<param name = "struct_tree">
    /// Handle to the structure tree, as returned by
    /// FPDF_StructTree_LoadPage().
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructTree_Close), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern IntPtr FPDF_StructTree_Close(FPDF_STRUCTTREE struct_tree);
    ///<summary>Count the number of children for the structure tree.</summary>
    ///<param name = "struct_tree">
    /// Handle to the structure tree, as returned by
    /// FPDF_StructTree_LoadPage().
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.</remarks>
    ///<returns>The number of children, or -1 on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructTree_CountChildren), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_StructTree_CountChildren(FPDF_STRUCTTREE struct_tree);
    ///<summary>Get a child in the structure tree.</summary>
    ///<param name = "struct_tree">
    /// Handle to the structure tree, as returned by
    /// FPDF_StructTree_LoadPage().
    ///</param>
    ///<param name = "index">The index for the child, 0-based.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.</remarks>
    ///<returns>The child at the n-th index or NULL on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructTree_GetChildAtIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern FPDF_STRUCTELEMENT FPDF_StructTree_GetChildAtIndex(FPDF_STRUCTTREE struct_tree, int index);
    ///<summary>Get the alt text for a given element.</summary>
    ///<param name = "struct_element">Handle to the struct element.</param>
    ///<param name = "buffer">A buffer for output the alt text. May be NULL.</param>
    ///<param name = "buflen">The length of the buffer, in bytes. May be 0.</param>
    ///<remarks>
    /// Regardless of the platform, the |buffer| is always in UTF-16LE
    /// encoding. The string is terminated by a UTF16 NUL character. If
    /// |buflen| is less than the required length, or |buffer| is NULL,
    /// |buffer| will not be modified.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.
    ///</remarks>
    ///<returns>
    /// The number of bytes in the title, including the terminating NUL
    /// character. The number of bytes is returned regardless of the
    /// |buffer| and |buflen| parameters.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetAltText), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDF_StructElement_GetAltText(FPDF_STRUCTELEMENT struct_element, out IntPtr buffer, uint buflen);
    ///<summary>Get the ID for a given element.</summary>
    ///<param name = "struct_element">Handle to the struct element.</param>
    ///<param name = "buffer">A buffer for output the ID string. May be NULL.</param>
    ///<param name = "buflen">The length of the buffer, in bytes. May be 0.</param>
    ///<remarks>
    /// Regardless of the platform, the |buffer| is always in UTF-16LE
    /// encoding. The string is terminated by a UTF16 NUL character. If
    /// |buflen| is less than the required length, or |buffer| is NULL,
    /// |buffer| will not be modified.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.
    ///</remarks>
    ///<returns>
    /// The number of bytes in the ID string, including the terminating NUL
    /// character. The number of bytes is returned regardless of the
    /// |buffer| and |buflen| parameters.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetID), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDF_StructElement_GetID(FPDF_STRUCTELEMENT struct_element, out IntPtr buffer, uint buflen);
    ///<summary>Get the case-insensitive IETF BCP 47 language code for an element.</summary>
    ///<param name = "struct_element">Handle to the struct element.</param>
    ///<param name = "buffer">A buffer for output the lang string. May be NULL.</param>
    ///<param name = "buflen">The length of the buffer, in bytes. May be 0.</param>
    ///<remarks>
    /// Regardless of the platform, the |buffer| is always in UTF-16LE
    /// encoding. The string is terminated by a UTF16 NUL character. If
    /// |buflen| is less than the required length, or |buffer| is NULL,
    /// |buffer| will not be modified.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.
    ///</remarks>
    ///<returns>
    /// The number of bytes in the ID string, including the terminating NUL
    /// character. The number of bytes is returned regardless of the
    /// |buffer| and |buflen| parameters.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetLang), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDF_StructElement_GetLang(FPDF_STRUCTELEMENT struct_element, out IntPtr buffer, uint buflen);
    ///<summary>Get a struct element attribute of type "name" or "string".</summary>
    ///<param name = "struct_element">Handle to the struct element.</param>
    ///<param name = "attr_name">The name of the attribute to retrieve.</param>
    ///<param name = "buffer">A buffer for output. May be NULL.</param>
    ///<param name = "buflen">The length of the buffer, in bytes. May be 0.</param>
    ///<remarks>
    /// Regardless of the platform, the |buffer| is always in UTF-16LE
    /// encoding. The string is terminated by a UTF16 NUL character. If
    /// |buflen| is less than the required length, or |buffer| is NULL,
    /// |buffer| will not be modified.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.
    ///</remarks>
    ///<returns>
    /// The number of bytes in the attribute value, including the
    /// terminating NUL character. The number of bytes is returned
    /// regardless of the |buffer| and |buflen| parameters.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetStringAttribute), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDF_StructElement_GetStringAttribute(FPDF_STRUCTELEMENT struct_element, FPDF_BYTESTRING attr_name, out IntPtr buffer, uint buflen);
    ///<summary>Get the marked content ID for a given element.</summary>
    ///<param name = "struct_element">Handle to the struct element.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.</remarks>
    ///<returns>
    /// The marked content ID of the element. If no ID exists, returns
    /// -1.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetMarkedContentID), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_StructElement_GetMarkedContentID(FPDF_STRUCTELEMENT struct_element);
    ///<summary>Get the type (/S) for a given element.</summary>
    ///<param name = "struct_element">Handle to the struct element.</param>
    ///<param name = "buffer">A buffer for output. May be NULL.</param>
    ///<param name = "buflen">The length of the buffer, in bytes. May be 0.</param>
    ///<remarks>
    /// Regardless of the platform, the |buffer| is always in UTF-16LE
    /// encoding. The string is terminated by a UTF16 NUL character. If
    /// |buflen| is less than the required length, or |buffer| is NULL,
    /// |buffer| will not be modified.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.
    ///</remarks>
    ///<returns>
    /// The number of bytes in the type, including the terminating NUL
    /// character. The number of bytes is returned regardless of the
    /// |buffer| and |buflen| parameters.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetType), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDF_StructElement_GetType(FPDF_STRUCTELEMENT struct_element, out IntPtr buffer, uint buflen);
    ///<summary>Get the title (/T) for a given element.</summary>
    ///<param name = "struct_element">Handle to the struct element.</param>
    ///<param name = "buffer">A buffer for output. May be NULL.</param>
    ///<param name = "buflen">The length of the buffer, in bytes. May be 0.</param>
    ///<remarks>
    /// Regardless of the platform, the |buffer| is always in UTF-16LE
    /// encoding. The string is terminated by a UTF16 NUL character. If
    /// |buflen| is less than the required length, or |buffer| is NULL,
    /// |buffer| will not be modified.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.
    ///</remarks>
    ///<returns>
    /// The number of bytes in the title, including the terminating NUL
    /// character. The number of bytes is returned regardless of the
    /// |buffer| and |buflen| parameters.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetTitle), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDF_StructElement_GetTitle(FPDF_STRUCTELEMENT struct_element, out IntPtr buffer, uint buflen);
    ///<summary>Count the number of children for the structure element.</summary>
    ///<param name = "struct_element">Handle to the struct element.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.</remarks>
    ///<returns>The number of children, or -1 on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_CountChildren), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_StructElement_CountChildren(FPDF_STRUCTELEMENT struct_element);
    ///<summary>Get a child in the structure element.</summary>
    ///<param name = "struct_tree">Handle to the struct element.</param>
    ///<param name = "index">The index for the child, 0-based.</param>
    ///<remarks>
    /// If the child exists but is not an element, then this function will
    /// return NULL. This will also return NULL for out of bounds indices.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.
    ///</remarks>
    ///<returns>The child at the n-th index or NULL on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetChildAtIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern FPDF_STRUCTELEMENT FPDF_StructElement_GetChildAtIndex(FPDF_STRUCTELEMENT struct_element, int index);
}