// Built from precompiled binaries at https://github.com/bblanchon/pdfium-binaries/releases/tag/chromium/5772
// Github release api https://api.github.com/repos/bblanchon/pdfium-binaries/releases/102934879
// PDFium version v115.0.5772.0 chromium/5772 [master]
// Built on: Fri, 19 May 2023 18:28:28 GMT

// ReSharper disable all
#pragma warning disable CS8500 // This takes the address of, gets the size of, or declares a pointer to a managed type

// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace PdfLibCore.Generated
{
    public unsafe partial class Pdfium
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDF_GetSignatureCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDF_GetSignatureCount(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDF_GetSignatureObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_GetSignatureObject(__IntPtr document, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFSignatureObj_GetContents", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFSignatureObj_GetContents(__IntPtr signature, __IntPtr buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFSignatureObj_GetByteRange", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFSignatureObj_GetByteRange(__IntPtr signature, int* buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFSignatureObj_GetSubFilter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFSignatureObj_GetSubFilter(__IntPtr signature, sbyte* buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFSignatureObj_GetReason", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFSignatureObj_GetReason(__IntPtr signature, __IntPtr buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFSignatureObj_GetTime", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFSignatureObj_GetTime(__IntPtr signature, sbyte* buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("Pdfium", EntryPoint = "FPDFSignatureObj_GetDocMDPPermission", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFSignatureObj_GetDocMDPPermission(__IntPtr signature);
        }

        /// <summary>Get total number of signatures in the document.</summary>
        /// <param name="document">Handle to document. Returned by FPDF_LoadDocument().</param>
        /// <returns>Total number of signatures in the document on success, -1 on error.</returns>
        public static int FPDF_GetSignatureCount(global::PdfLibCore.Generated.FPDF_Document document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var ___ret = __Internal.FPDF_GetSignatureCount(__arg0);
            return ___ret;
        }

        /// <summary>Get the Nth signature of the document.</summary>
        /// <param name="document">Handle to document. Returned by FPDF_LoadDocument().</param>
        /// <param name="index">Index into the array of signatures of the document.</param>
        /// <returns>
        /// Returns the handle to the signature, or NULL on failure. The caller
        /// does not take ownership of the returned FPDF_SIGNATURE. Instead, it
        /// remains valid until FPDF_CloseDocument() is called for the document.
        /// </returns>
        public static global::PdfLibCore.Generated.FPDF_Signature FPDF_GetSignatureObject(global::PdfLibCore.Generated.FPDF_Document document, int index)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var ___ret = __Internal.FPDF_GetSignatureObject(__arg0, index);
            var __result0 = global::PdfLibCore.Generated.FPDF_Signature.__CreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>Get the contents of a signature object.</summary>
        /// <param name="signature">Handle to the signature object. Returned by FPDF_GetSignatureObject().</param>
        /// <param name="buffer">The address of a buffer that receives the contents.</param>
        /// <param name="length">The size, in bytes, of |buffer|.</param>
        /// <returns>
        /// Returns the number of bytes in the contents on success, 0 on error.
        /// For public-key signatures, |buffer| is either a DER-encoded PKCS#1 binary or
        /// a DER-encoded PKCS#7 binary. If |length| is less than the returned length, or
        /// |buffer| is NULL, |buffer| will not be modified.
        /// </returns>
        public static uint FPDFSignatureObj_GetContents(global::PdfLibCore.Generated.FPDF_Signature signature, __IntPtr buffer, uint length)
        {
            var __arg0 = signature is null ? __IntPtr.Zero : signature.__Instance;
            var ___ret = __Internal.FPDFSignatureObj_GetContents(__arg0, buffer, length);
            return ___ret;
        }

        /// <summary>Get the byte range of a signature object.</summary>
        /// <param name="signature">Handle to the signature object. Returned by FPDF_GetSignatureObject().</param>
        /// <param name="buffer">The address of a buffer that receives the byte range.</param>
        /// <param name="length">The size, in ints, of |buffer|.</param>
        /// <returns>
        /// Returns the number of ints in the byte range on
        /// success, 0 on error.
        /// |buffer| is an array of pairs of integers (starting byte offset,
        /// length in bytes) that describes the exact byte range for the digest
        /// calculation. If |length| is less than the returned length, or
        /// |buffer| is NULL, |buffer| will not be modified.
        /// </returns>
        public static uint FPDFSignatureObj_GetByteRange(global::PdfLibCore.Generated.FPDF_Signature signature, ref int buffer, uint length)
        {
            var __arg0 = signature is null ? __IntPtr.Zero : signature.__Instance;
            fixed (int* __buffer1 = &buffer)
            {
                var __arg1 = __buffer1;
                var ___ret = __Internal.FPDFSignatureObj_GetByteRange(__arg0, __arg1, length);
                return ___ret;
            }
        }

        /// <summary>Get the encoding of the value of a signature object.</summary>
        /// <param name="signature">Handle to the signature object. Returned by FPDF_GetSignatureObject().</param>
        /// <param name="buffer">The address of a buffer that receives the encoding.</param>
        /// <param name="length">The size, in bytes, of |buffer|.</param>
        /// <returns>
        /// Returns the number of bytes in the encoding name (including the
        /// trailing NUL character) on success, 0 on error.
        /// The |buffer| is always encoded in 7-bit ASCII. If |length| is less than the
        /// returned length, or |buffer| is NULL, |buffer| will not be modified.
        /// </returns>
        public static uint FPDFSignatureObj_GetSubFilter(global::PdfLibCore.Generated.FPDF_Signature signature, sbyte* buffer, uint length)
        {
            var __arg0 = signature is null ? __IntPtr.Zero : signature.__Instance;
            var ___ret = __Internal.FPDFSignatureObj_GetSubFilter(__arg0, buffer, length);
            return ___ret;
        }

        /// <summary>Get the reason (comment) of the signature object.</summary>
        /// <param name="signature">Handle to the signature object. Returned by FPDF_GetSignatureObject().</param>
        /// <param name="buffer">The address of a buffer that receives the reason.</param>
        /// <param name="length">The size, in bytes, of |buffer|.</param>
        /// <returns>
        /// Returns the number of bytes in the reason on success, 0 on error.
        /// Regardless of the platform, the |buffer| is always in UTF-16LE encoding. The
        /// string is terminated by a UTF16 NUL character. If |length| is less than the
        /// returned length, or |buffer| is NULL, |buffer| will not be modified.
        /// </returns>
        public static uint FPDFSignatureObj_GetReason(global::PdfLibCore.Generated.FPDF_Signature signature, __IntPtr buffer, uint length)
        {
            var __arg0 = signature is null ? __IntPtr.Zero : signature.__Instance;
            var ___ret = __Internal.FPDFSignatureObj_GetReason(__arg0, buffer, length);
            return ___ret;
        }

        /// <summary>Get the time of signing of a signature object.</summary>
        /// <param name="signature">Handle to the signature object. Returned by FPDF_GetSignatureObject().</param>
        /// <param name="buffer">The address of a buffer that receives the time.</param>
        /// <param name="length">The size, in bytes, of |buffer|.</param>
        /// <returns>
        /// Returns the number of bytes in the encoding name (including the
        /// trailing NUL character) on success, 0 on error.
        /// The |buffer| is always encoded in 7-bit ASCII. If |length| is less than the
        /// returned length, or |buffer| is NULL, |buffer| will not be modified.
        /// The format of time is expected to be D:YYYYMMDDHHMMSS+XX'YY', i.e. it's
        /// percision is seconds, with timezone information. This value should be used
        /// only when the time of signing is not available in the (PKCS#7 binary)
        /// signature.
        /// </returns>
        public static uint FPDFSignatureObj_GetTime(global::PdfLibCore.Generated.FPDF_Signature signature, sbyte* buffer, uint length)
        {
            var __arg0 = signature is null ? __IntPtr.Zero : signature.__Instance;
            var ___ret = __Internal.FPDFSignatureObj_GetTime(__arg0, buffer, length);
            return ___ret;
        }

        /// <summary>Get the DocMDP permission of a signature object.</summary>
        /// <param name="signature">Handle to the signature object. Returned by FPDF_GetSignatureObject().</param>
        /// <returns>Returns the permission (1, 2 or 3) on success, 0 on error.</returns>
        public static uint FPDFSignatureObj_GetDocMDPPermission(global::PdfLibCore.Generated.FPDF_Signature signature)
        {
            var __arg0 = signature is null ? __IntPtr.Zero : signature.__Instance;
            var ___ret = __Internal.FPDFSignatureObj_GetDocMDPPermission(__arg0);
            return ___ret;
        }
    }
}
#pragma warning restore
