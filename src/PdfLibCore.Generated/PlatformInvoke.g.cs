using System;
using System.Security;
using System.Runtime.InteropServices;
using PdfLibCore.Generated.Enums;
using PdfLibCore.Generated.Structs;
using PdfLibCore.Generated.Types;

/*
This file is part of PdfLibCore, a wrapper around the PDFium library for the .NET.
Inspired by the awesome work of PDFiumSharp by Tobias Meyer.

Copyright (C) 2023 J.C.A. Kokenberg & Jan Baarssen
License: Microsoft Reciprocal License (MS-RL)
*/

// AUTOGENERATED FILE - 10-05-2023 (08:37:24) - Utc
// DO NOT MODIFY

namespace PdfLibCore.Generated;
internal static class PlatformInvoke
{
    private const string DllName = "pdfium";
    ///<summary>Initialize the FPDFSDK library</summary>
    ///<remarks>
    /// Convenience function to call FPDF_InitLibraryWithConfig() for
    /// backwards compatibility purposes. This will be deprecated in the
    /// future.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_InitLibrary), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDF_InitLibrary();
    ///<summary>Initialize the FPDFSDK library</summary>
    ///<param name = "config">configuration information as above.</param>
    ///<remarks>
    /// You have to call this function before you can call any PDF
    /// processing functions.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_InitLibraryWithConfig), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDF_InitLibraryWithConfig(FPDF_LIBRARY_CONFIG config);
    ///<summary>Release all resources allocated by the FPDFSDK library.</summary>
    ///<remarks>
    /// You can call this function to release all memory blocks allocated by
    /// the library.
    /// After this function is called, you should not call any PDF
    /// processing functions.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_DestroyLibrary), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDF_DestroyLibrary();
    ///<summary>Set the policy for the sandbox environment.</summary>
    ///<param name = "policy">
    /// The specified policy for setting, for example:
    /// FPDF_POLICY_MACHINETIME_ACCESS.
    ///</param>
    ///<param name = "enable">True to enable, false to disable the policy.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_SetSandBoxPolicy), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDF_SetSandBoxPolicy(uint policy, int enable);
    ///<summary>Set printing mode when printing on Windows.</summary>
    ///<param name = "mode">
    /// FPDF_PRINTMODE_EMF to output EMF (default)
    /// FPDF_PRINTMODE_TEXTONLY to output text only (for charstream
    /// devices)
    /// FPDF_PRINTMODE_POSTSCRIPT2 to output level 2 PostScript into
    /// EMF as a series of GDI comments.
    /// FPDF_PRINTMODE_POSTSCRIPT3 to output level 3 PostScript into
    /// EMF as a series of GDI comments.
    /// FPDF_PRINTMODE_POSTSCRIPT2_PASSTHROUGH to output level 2
    /// PostScript via ExtEscape() in PASSTHROUGH mode.
    /// FPDF_PRINTMODE_POSTSCRIPT3_PASSTHROUGH to output level 3
    /// PostScript via ExtEscape() in PASSTHROUGH mode.
    /// FPDF_PRINTMODE_EMF_IMAGE_MASKS to output EMF, with more
    /// efficient processing of documents containing image masks.
    /// FPDF_PRINTMODE_POSTSCRIPT3_TYPE42 to output level 3
    /// PostScript with embedded Type 42 fonts, when applicable, into
    /// EMF as a series of GDI comments.
    /// FPDF_PRINTMODE_POSTSCRIPT3_TYPE42_PASSTHROUGH to output level
    /// 3 PostScript with embedded Type 42 fonts, when applicable,
    /// via ExtEscape() in PASSTHROUGH mode.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>True if successful, false if unsuccessful (typically invalid input).</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_SetPrintMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_SetPrintMode(int mode);
    ///<summary>Open and load a PDF document.</summary>
    ///<param name = "file_path">Path to the PDF file (including extension).</param>
    ///<param name = "password">
    /// A string used as the password for the PDF file.
    /// If no password is needed, empty or NULL can be used.
    /// See comments below regarding the encoding.
    ///</param>
    ///<remarks>
    /// Loaded document can be closed by FPDF_CloseDocument().
    /// If this function fails, you can use FPDF_GetLastError() to retrieve
    /// the reason why it failed.
    /// The encoding for |password| can be either UTF-8 or Latin-1. PDFs,
    /// depending on the security handler revision, will only accept one or
    /// the other encoding. If |password|'s encoding and the PDF's expected
    /// encoding do not match, FPDF_LoadDocument() will automatically
    /// convert |password| to the other encoding.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>A handle to the loaded document, or NULL on failure.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_LoadDocument), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_DOCUMENT FPDF_LoadDocument(FPDF_STRING file_path, FPDF_BYTESTRING password);
    ///<summary>Open and load a PDF document from memory.</summary>
    ///<param name = "data_buf">Pointer to a buffer containing the PDF document.</param>
    ///<param name = "size">Number of bytes in the PDF document.</param>
    ///<param name = "password">
    /// A string used as the password for the PDF file.
    /// If no password is needed, empty or NULL can be used.
    ///</param>
    ///<remarks>
    /// The memory buffer must remain valid when the document is open.
    /// The loaded document can be closed by FPDF_CloseDocument.
    /// If this function fails, you can use FPDF_GetLastError() to retrieve
    /// the reason why it failed.
    /// See the comments for FPDF_LoadDocument() regarding the encoding for
    /// |password|.
    /// Notes:
    /// If PDFium is built with the XFA module, the application should call
    /// FPDF_LoadXFA() function after the PDF document loaded to support XFA
    /// fields defined in the fpdfformfill.h file.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>A handle to the loaded document, or NULL on failure.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_LoadMemDocument), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_DOCUMENT FPDF_LoadMemDocument(IntPtr data_buf, int size, FPDF_BYTESTRING password);
    ///<summary>Open and load a PDF document from memory.</summary>
    ///<param name = "data_buf">Pointer to a buffer containing the PDF document.</param>
    ///<param name = "size">Number of bytes in the PDF document.</param>
    ///<param name = "password">
    /// A string used as the password for the PDF file.
    /// If no password is needed, empty or NULL can be used.
    ///</param>
    ///<remarks>
    /// The memory buffer must remain valid when the document is open.
    /// The loaded document can be closed by FPDF_CloseDocument.
    /// If this function fails, you can use FPDF_GetLastError() to retrieve
    /// the reason why it failed.
    /// See the comments for FPDF_LoadDocument() regarding the encoding for
    /// |password|.
    /// Notes:
    /// If PDFium is built with the XFA module, the application should call
    /// FPDF_LoadXFA() function after the PDF document loaded to support XFA
    /// fields defined in the fpdfformfill.h file.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>A handle to the loaded document, or NULL on failure.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_LoadMemDocument64), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_DOCUMENT FPDF_LoadMemDocument64(IntPtr data_buf, ulong size, FPDF_BYTESTRING password);
    ///<summary>Load PDF document from a custom access descriptor.</summary>
    ///<param name = "pFileAccess">A structure for accessing the file.</param>
    ///<param name = "password">Optional password for decrypting the PDF file.</param>
    ///<remarks>
    /// The application must keep the file resources |pFileAccess| points to
    /// valid until the returned FPDF_DOCUMENT is closed. |pFileAccess|
    /// itself does not need to outlive the FPDF_DOCUMENT.
    /// The loaded document can be closed with FPDF_CloseDocument().
    /// See the comments for FPDF_LoadDocument() regarding the encoding for
    /// |password|.
    /// Notes:
    /// If PDFium is built with the XFA module, the application should call
    /// FPDF_LoadXFA() function after the PDF document loaded to support XFA
    /// fields defined in the fpdfformfill.h file.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>A handle to the loaded document, or NULL on failure.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_LoadCustomDocument), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_DOCUMENT FPDF_LoadCustomDocument(FPDF_FILEACCESS pFileAccess, FPDF_BYTESTRING password);
    ///<summary>Get the file version of the given PDF document.</summary>
    ///<param name = "doc">Handle to a document.</param>
    ///<param name = "fileVersion">
    /// The PDF file version. File version: 14 for 1.4, 15
    /// for 1.5, ...
    ///</param>
    ///<remarks>
    /// If the document was created by FPDF_CreateNewDocument,
    /// then this function will always fail.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>True if succeeds, false otherwise.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetFileVersion), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_GetFileVersion(FPDF_DOCUMENT doc, int fileVersion);
    ///<summary>Get last error code when a function fails.</summary>
    ///<remarks>
    /// If the previous SDK call succeeded, the return value of this
    /// function is not defined.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>A 32-bit integer indicating error code as defined above.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetLastError), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDF_GetLastError();
    ///<summary>Whether the document's cross reference table is valid or not.</summary>
    ///<param name = "document">Handle to a document. Returned by FPDF_LoadDocument.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// True if the PDF parser did not encounter problems parsing the cross
    /// reference table. False if the parser could not parse the cross
    /// reference table and the table had to be rebuild from other data
    /// within the document.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_DocumentHasValidCrossReferenceTable), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_DocumentHasValidCrossReferenceTable(FPDF_DOCUMENT document);
    ///<summary>Get the byte offsets of trailer ends.</summary>
    ///<param name = "document">Handle to document. Returned by FPDF_LoadDocument().</param>
    ///<param name = "buffer">
    /// The address of a buffer that receives the
    /// byte offsets.
    ///</param>
    ///<param name = "length">The size, in ints, of |buffer|.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// Returns the number of ints in the buffer on success, 0 on error.
    /// |buffer| is an array of integers that describes the exact byte offsets of the
    /// trailer ends in the document. If |length| is less than the returned length,
    /// or |document| or |buffer| is NULL, |buffer| will not be modified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetTrailerEnds), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDF_GetTrailerEnds(FPDF_DOCUMENT document, uint buffer, uint length);
    ///<summary>Get file permission flags of the document.</summary>
    ///<param name = "document">Handle to a document. Returned by FPDF_LoadDocument.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// A 32-bit integer indicating permission flags. Please refer to the
    /// PDF Reference for detailed descriptions. If the document is not
    /// protected, 0xffffffff will be returned.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetDocPermissions), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDF_GetDocPermissions(FPDF_DOCUMENT document);
    ///<summary>Get the revision for the security handler.</summary>
    ///<param name = "document">Handle to a document. Returned by FPDF_LoadDocument.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// The security handler revision number. Please refer to the PDF
    /// Reference for a detailed description. If the document is not
    /// protected, -1 will be returned.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetSecurityHandlerRevision), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_GetSecurityHandlerRevision(FPDF_DOCUMENT document);
    ///<summary>Get total number of pages in the document.</summary>
    ///<param name = "document">Handle to document. Returned by FPDF_LoadDocument.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>Total number of pages in the document.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_GetPageCount(FPDF_DOCUMENT document);
    ///<summary>Load a page inside the document.</summary>
    ///<param name = "document">Handle to document. Returned by FPDF_LoadDocument</param>
    ///<param name = "page_index">Index number of the page. 0 for the first page.</param>
    ///<remarks>
    /// The loaded page can be rendered to devices using FPDF_RenderPage.
    /// The loaded page can be closed using FPDF_ClosePage.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>A handle to the loaded page, or NULL if page load fails.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_LoadPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PAGE FPDF_LoadPage(FPDF_DOCUMENT document, int page_index);
    ///<summary>Get page width.</summary>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage().</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// Page width (excluding non-displayable area) measured in points.
    /// One point is 1/72 inch (around 0.3528 mm).
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageWidthF), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern float FPDF_GetPageWidthF(FPDF_PAGE page);
    ///<summary>Get page width.</summary>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// Page width (excluding non-displayable area) measured in points.
    /// One point is 1/72 inch (around 0.3528 mm).
    /// Note:
    /// Prefer FPDF_GetPageWidthF() above. This will be deprecated in the
    /// future.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageWidth), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern double FPDF_GetPageWidth(FPDF_PAGE page);
    ///<summary>Get page height.</summary>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage().</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// Page height (excluding non-displayable area) measured in points.
    /// One point is 1/72 inch (around 0.3528 mm)
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageHeightF), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern float FPDF_GetPageHeightF(FPDF_PAGE page);
    ///<summary>Get page height.</summary>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// Page height (excluding non-displayable area) measured in points.
    /// One point is 1/72 inch (around 0.3528 mm)
    /// Note:
    /// Prefer FPDF_GetPageHeightF() above. This will be deprecated in the
    /// future.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageHeight), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern double FPDF_GetPageHeight(FPDF_PAGE page);
    ///<summary>
    /// Get the bounding box of the page. This is the intersection between
    /// its media box and its crop box.
    ///</summary>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage.</param>
    ///<param name = "rect">
    /// Pointer to a rect to receive the page bounding box.
    /// On an error, |rect| won't be filled.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>True for success.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageBoundingBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_GetPageBoundingBox(FPDF_PAGE page, FS_RECTF rect);
    ///<summary>Get the size of the page at the given index.</summary>
    ///<param name = "document">Handle to document. Returned by FPDF_LoadDocument().</param>
    ///<param name = "page_index">Page index, zero for the first page.</param>
    ///<param name = "size">
    /// Pointer to a FS_SIZEF to receive the page size.
    /// (in points).
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>Non-zero for success. 0 for error (document or page not found).</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageSizeByIndexF), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_GetPageSizeByIndexF(FPDF_DOCUMENT document, int page_index, FS_SIZEF size);
    ///<summary>Get the size of the page at the given index.</summary>
    ///<param name = "document">Handle to document. Returned by FPDF_LoadDocument.</param>
    ///<param name = "page_index">Page index, zero for the first page.</param>
    ///<param name = "width">
    /// Pointer to a double to receive the page width
    /// (in points).
    ///</param>
    ///<param name = "height">
    /// Pointer to a double to receive the page height
    /// (in points).
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// Non-zero for success. 0 for error (document or page not found).
    /// Note:
    /// Prefer FPDF_GetPageSizeByIndexF() above. This will be deprecated in
    /// the future.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageSizeByIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_GetPageSizeByIndex(FPDF_DOCUMENT document, int page_index, double width, double height);
    ///<summary>
    /// Render contents of a page to a device (screen, bitmap, or printer).
    /// This function is only supported on Windows.
    ///</summary>
    ///<param name = "dc">Handle to the device context.</param>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage.</param>
    ///<param name = "start_x">
    /// Left pixel position of the display area in
    /// device coordinates.
    ///</param>
    ///<param name = "start_y">
    /// Top pixel position of the display area in device
    /// coordinates.
    ///</param>
    ///<param name = "size_x">Horizontal size (in pixels) for displaying the page.</param>
    ///<param name = "size_y">Vertical size (in pixels) for displaying the page.</param>
    ///<param name = "rotate">
    /// Page orientation:
    /// 0 (normal)
    /// 1 (rotated 90 degrees clockwise)
    /// 2 (rotated 180 degrees)
    /// 3 (rotated 90 degrees counter-clockwise)
    ///</param>
    ///<param name = "flags">
    /// 0 for normal display, or combination of flags
    /// defined above.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDF_RenderPage(FPDF_BITMAP dc, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags);
    ///<summary>Render contents of a page to a device independent bitmap.</summary>
    ///<param name = "bitmap">
    /// Handle to the device independent bitmap (as the
    /// output buffer). The bitmap handle can be created
    /// by FPDFBitmap_Create or retrieved from an image
    /// object by FPDFImageObj_GetBitmap.
    ///</param>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage</param>
    ///<param name = "start_x">
    /// Left pixel position of the display area in
    /// bitmap coordinates.
    ///</param>
    ///<param name = "start_y">
    /// Top pixel position of the display area in bitmap
    /// coordinates.
    ///</param>
    ///<param name = "size_x">Horizontal size (in pixels) for displaying the page.</param>
    ///<param name = "size_y">Vertical size (in pixels) for displaying the page.</param>
    ///<param name = "rotate">
    /// Page orientation:
    /// 0 (normal)
    /// 1 (rotated 90 degrees clockwise)
    /// 2 (rotated 180 degrees)
    /// 3 (rotated 90 degrees counter-clockwise)
    ///</param>
    ///<param name = "flags">
    /// 0 for normal display, or combination of the Page
    /// Rendering flags defined above. With the FPDF_ANNOT
    /// flag, it renders all annotations that do not require
    /// user-interaction, which are all annotations except
    /// widget and popup annotations.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPageBitmap), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDF_RenderPageBitmap(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags);
    ///<summary>Render contents of a page to a device independent bitmap.</summary>
    ///<param name = "bitmap">
    /// Handle to the device independent bitmap (as the
    /// output buffer). The bitmap handle can be created
    /// by FPDFBitmap_Create or retrieved by
    /// FPDFImageObj_GetBitmap.
    ///</param>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage.</param>
    ///<param name = "matrix">
    /// The transform matrix, which must be invertible.
    /// See PDF Reference 1.7, 4.2.2 Common Transformations.
    ///</param>
    ///<param name = "clipping">The rect to clip to in device coords.</param>
    ///<param name = "flags">
    /// 0 for normal display, or combination of the Page
    /// Rendering flags defined above. With the FPDF_ANNOT
    /// flag, it renders all annotations that do not require
    /// user-interaction, which are all annotations except
    /// widget and popup annotations.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPageBitmapWithMatrix), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDF_RenderPageBitmapWithMatrix(FPDF_BITMAP bitmap, FPDF_PAGE page, FS_MATRIX matrix, FS_RECTF clipping, int flags);
    ///<summary>Close a loaded PDF page.</summary>
    ///<param name = "page">Handle to the loaded page.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_ClosePage), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDF_ClosePage(FPDF_PAGE page);
    ///<summary>Close a loaded PDF document.</summary>
    ///<param name = "document">Handle to the loaded document.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_CloseDocument), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDF_CloseDocument(FPDF_DOCUMENT document);
    ///<summary>Convert the screen coordinates of a point to page coordinates.</summary>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage.</param>
    ///<param name = "start_x">
    /// Left pixel position of the display area in
    /// device coordinates.
    ///</param>
    ///<param name = "start_y">
    /// Top pixel position of the display area in device
    /// coordinates.
    ///</param>
    ///<param name = "size_x">Horizontal size (in pixels) for displaying the page.</param>
    ///<param name = "size_y">Vertical size (in pixels) for displaying the page.</param>
    ///<param name = "rotate">
    /// Page orientation:
    /// 0 (normal)
    /// 1 (rotated 90 degrees clockwise)
    /// 2 (rotated 180 degrees)
    /// 3 (rotated 90 degrees counter-clockwise)
    ///</param>
    ///<param name = "device_x">X value in device coordinates to be converted.</param>
    ///<param name = "device_y">Y value in device coordinates to be converted.</param>
    ///<param name = "page_x">
    /// A pointer to a double receiving the converted X
    /// value in page coordinates.
    ///</param>
    ///<param name = "page_y">
    /// A pointer to a double receiving the converted Y
    /// value in page coordinates.
    ///</param>
    ///<remarks>
    /// The page coordinate system has its origin at the left-bottom corner
    /// of the page, with the X-axis on the bottom going to the right, and
    /// the Y-axis on the left side going up.
    /// NOTE: this coordinate system can be altered when you zoom, scroll,
    /// or rotate a page, however, a point on the page should always have
    /// the same coordinate values in the page coordinate system.
    /// The device coordinate system is device dependent. For screen device,
    /// its origin is at the left-top corner of the window. However this
    /// origin can be altered by the Windows coordinate transformation
    /// utilities.
    /// You must make sure the start_x, start_y, size_x, size_y
    /// and rotate parameters have exactly same values as you used in
    /// the FPDF_RenderPage() function call.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>
    /// Returns true if the conversion succeeds, and |page_x| and |page_y|
    /// successfully receives the converted coordinates.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_DeviceToPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_DeviceToPage(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, int rotate, int device_x, int device_y, double page_x, double page_y);
    ///<summary>Convert the page coordinates of a point to screen coordinates.</summary>
    ///<param name = "page">Handle to the page. Returned by FPDF_LoadPage.</param>
    ///<param name = "start_x">
    /// Left pixel position of the display area in
    /// device coordinates.
    ///</param>
    ///<param name = "start_y">
    /// Top pixel position of the display area in device
    /// coordinates.
    ///</param>
    ///<param name = "size_x">Horizontal size (in pixels) for displaying the page.</param>
    ///<param name = "size_y">Vertical size (in pixels) for displaying the page.</param>
    ///<param name = "rotate">
    /// Page orientation:
    /// 0 (normal)
    /// 1 (rotated 90 degrees clockwise)
    /// 2 (rotated 180 degrees)
    /// 3 (rotated 90 degrees counter-clockwise)
    ///</param>
    ///<param name = "page_x">X value in page coordinates.</param>
    ///<param name = "page_y">Y value in page coordinate.</param>
    ///<param name = "device_x">
    /// A pointer to an integer receiving the result X
    /// value in device coordinates.
    ///</param>
    ///<param name = "device_y">
    /// A pointer to an integer receiving the result Y
    /// value in device coordinates.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// Returns true if the conversion succeeds, and |device_x| and
    /// |device_y| successfully receives the converted coordinates.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_PageToDevice), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_PageToDevice(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, int rotate, double page_x, double page_y, int device_x, int device_y);
    ///<summary>Create a device independent bitmap (FXDIB).</summary>
    ///<param name = "width">
    /// The number of pixels in width for the bitmap.
    /// Must be greater than 0.
    ///</param>
    ///<param name = "height">
    /// The number of pixels in height for the bitmap.
    /// Must be greater than 0.
    ///</param>
    ///<param name = "alpha">
    /// A flag indicating whether the alpha channel is used.
    /// Non-zero for using alpha, zero for not using.
    ///</param>
    ///<remarks>
    /// The bitmap always uses 4 bytes per pixel. The first byte is always
    /// double word aligned.
    /// The byte order is BGRx (the last byte unused if no alpha channel) or
    /// BGRA.
    /// The pixels in a horizontal line are stored side by side, with the
    /// left most pixel stored first (with lower memory address).
    /// Each line uses width * 4 bytes.
    /// Lines are stored one after another, with the top most line stored
    /// first. There is no gap between adjacent lines.
    /// This function allocates enough memory for holding all pixels in the
    /// bitmap, but it doesn't initialize the buffer. Applications can use
    /// FPDFBitmap_FillRect() to fill the bitmap using any color. If the OS
    /// allows it, this function can allocate up to 4 GB of memory.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>
    /// The created bitmap handle, or NULL if a parameter error or out of
    /// memory.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_Create), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_BITMAP FPDFBitmap_Create(int width, int height, int alpha);
    ///<summary>Create a device independent bitmap (FXDIB)</summary>
    ///<param name = "width">
    /// The number of pixels in width for the bitmap.
    /// Must be greater than 0.
    ///</param>
    ///<param name = "height">
    /// The number of pixels in height for the bitmap.
    /// Must be greater than 0.
    ///</param>
    ///<param name = "format">
    /// A number indicating for bitmap format, as defined
    /// above.
    ///</param>
    ///<param name = "first_scan">
    /// A pointer to the first byte of the first line if
    /// using an external buffer. If this parameter is NULL,
    /// then the a new buffer will be created.
    ///</param>
    ///<param name = "stride">
    /// Number of bytes for each scan line, for external
    /// buffer only.
    ///</param>
    ///<remarks>
    /// Similar to FPDFBitmap_Create function, but allows for more formats
    /// and an external buffer is supported. The bitmap created by this
    /// function can be used in any place that a FPDF_BITMAP handle is
    /// required.
    /// If an external buffer is used, then the application should destroy
    /// the buffer by itself. FPDFBitmap_Destroy function will not destroy
    /// the buffer.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>The bitmap handle, or NULL if parameter error or out of memory.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_CreateEx), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_BITMAP FPDFBitmap_CreateEx(int width, int height, int format, IntPtr first_scan, int stride);
    ///<summary>Get the format of the bitmap.</summary>
    ///<param name = "bitmap">
    /// Handle to the bitmap. Returned by FPDFBitmap_Create
    /// or FPDFImageObj_GetBitmap.
    ///</param>
    ///<remarks>
    /// Only formats supported by FPDFBitmap_CreateEx are supported by this
    /// function; see the list of such formats above.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>The format of the bitmap.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_GetFormat), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFBitmap_GetFormat(FPDF_BITMAP bitmap);
    ///<summary>Fill a rectangle in a bitmap.</summary>
    ///<param name = "bitmap">
    /// The handle to the bitmap. Returned by
    /// FPDFBitmap_Create.
    ///</param>
    ///<param name = "left">
    /// The left position. Starting from 0 at the
    /// left-most pixel.
    ///</param>
    ///<param name = "top">
    /// The top position. Starting from 0 at the
    /// top-most line.
    ///</param>
    ///<param name = "width">Width in pixels to be filled.</param>
    ///<param name = "height">Height in pixels to be filled.</param>
    ///<param name = "color">
    /// A 32-bit value specifing the color, in 8888 ARGB
    /// format.
    ///</param>
    ///<remarks>
    /// This function sets the color and (optionally) alpha value in the
    /// specified region of the bitmap.
    /// NOTE: If the alpha channel is used, this function does NOT
    /// composite the background with the source color, instead the
    /// background will be replaced by the source color and the alpha.
    /// If the alpha channel is not used, the alpha parameter is ignored.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_FillRect), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFBitmap_FillRect(FPDF_BITMAP bitmap, int left, int top, int width, int height, uint color);
    ///<summary>Get data buffer of a bitmap.</summary>
    ///<param name = "bitmap">
    /// Handle to the bitmap. Returned by FPDFBitmap_Create
    /// or FPDFImageObj_GetBitmap.
    ///</param>
    ///<remarks>
    /// The stride may be more than width * number of bytes per pixel
    /// Applications can use this function to get the bitmap buffer pointer,
    /// then manipulate any color and/or alpha values for any pixels in the
    /// bitmap.
    /// The data is in BGRA format. Where the A maybe unused if alpha was
    /// not specified.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>The pointer to the first byte of the bitmap buffer.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_GetBuffer), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFBitmap_GetBuffer(FPDF_BITMAP bitmap);
    ///<summary>Get width of a bitmap.</summary>
    ///<param name = "bitmap">
    /// Handle to the bitmap. Returned by FPDFBitmap_Create
    /// or FPDFImageObj_GetBitmap.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The width of the bitmap in pixels.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_GetWidth), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFBitmap_GetWidth(FPDF_BITMAP bitmap);
    ///<summary>Get height of a bitmap.</summary>
    ///<param name = "bitmap">
    /// Handle to the bitmap. Returned by FPDFBitmap_Create
    /// or FPDFImageObj_GetBitmap.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The height of the bitmap in pixels.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_GetHeight), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFBitmap_GetHeight(FPDF_BITMAP bitmap);
    ///<summary>Get number of bytes for each line in the bitmap buffer.</summary>
    ///<param name = "bitmap">
    /// Handle to the bitmap. Returned by FPDFBitmap_Create
    /// or FPDFImageObj_GetBitmap.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The number of bytes for each line in the bitmap buffer.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_GetStride), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFBitmap_GetStride(FPDF_BITMAP bitmap);
    ///<summary>Destroy a bitmap and release all related buffers.</summary>
    ///<param name = "bitmap">
    /// Handle to the bitmap. Returned by FPDFBitmap_Create
    /// or FPDFImageObj_GetBitmap.
    ///</param>
    ///<remarks>
    /// This function will not destroy any external buffers provided when
    /// the bitmap was created.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFBitmap_Destroy), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFBitmap_Destroy(FPDF_BITMAP bitmap);
    ///<summary>Whether the PDF document prefers to be scaled or not.</summary>
    ///<param name = "document">Handle to the loaded document.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetPrintScaling), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_VIEWERREF_GetPrintScaling(FPDF_DOCUMENT document);
    ///<summary>Returns the number of copies to be printed.</summary>
    ///<param name = "document">Handle to the loaded document.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The number of copies to be printed.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetNumCopies), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_VIEWERREF_GetNumCopies(FPDF_DOCUMENT document);
    ///<summary>Page numbers to initialize print dialog box when file is printed.</summary>
    ///<param name = "document">Handle to the loaded document.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The print page range to be used for printing.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetPrintPageRange), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PAGERANGE FPDF_VIEWERREF_GetPrintPageRange(FPDF_DOCUMENT document);
    ///<summary>Returns the number of elements in a FPDF_PAGERANGE.</summary>
    ///<param name = "pagerange">Handle to the page range.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The number of elements in the page range. Returns 0 on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetPrintPageRangeCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern ulong FPDF_VIEWERREF_GetPrintPageRangeCount(FPDF_PAGERANGE pagerange);
    ///<summary>Returns an element from a FPDF_PAGERANGE.</summary>
    ///<param name = "pagerange">Handle to the page range.</param>
    ///<param name = "index">Index of the element.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// The value of the element in the page range at a given index.
    /// Returns -1 on error.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetPrintPageRangeElement), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_VIEWERREF_GetPrintPageRangeElement(FPDF_PAGERANGE pagerange, ulong index);
    ///<summary>
    /// Returns the paper handling option to be used when printing from
    /// the print dialog.
    ///</summary>
    ///<param name = "document">Handle to the loaded document.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The paper handling option to be used when printing.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetDuplex), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_DUPLEXTYPE FPDF_VIEWERREF_GetDuplex(FPDF_DOCUMENT document);
    ///<summary>
    /// Gets the contents for a viewer ref, with a given key. The value must
    /// be of type "name".
    ///</summary>
    ///<param name = "document">Handle to the loaded document.</param>
    ///<param name = "key">
    /// Name of the key in the viewer pref dictionary,
    /// encoded in UTF-8.
    ///</param>
    ///<param name = "buffer">A string to write the contents of the key to.</param>
    ///<param name = "length">Length of the buffer.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// The number of bytes in the contents, including the NULL terminator.
    /// Thus if the return value is 0, then that indicates an error, such
    /// as when |document| is invalid or |buffer| is NULL. If |length| is
    /// less than the returned length, or |buffer| is NULL, |buffer| will
    /// not be modified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_VIEWERREF_GetName), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDF_VIEWERREF_GetName(FPDF_DOCUMENT document, FPDF_BYTESTRING key, string buffer, uint length);
    ///<summary>Get the count of named destinations in the PDF document.</summary>
    ///<param name = "document">Handle to a document</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The count of named destinations.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_CountNamedDests), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDF_CountNamedDests(FPDF_DOCUMENT document);
    ///<summary>Get a the destination handle for the given name.</summary>
    ///<param name = "document">Handle to the loaded document.</param>
    ///<param name = "name">The name of a destination.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The handle to the destination.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetNamedDestByName), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_DEST FPDF_GetNamedDestByName(FPDF_DOCUMENT document, FPDF_BYTESTRING name);
    ///<summary>Get the named destination by index.</summary>
    ///<param name = "document">Handle to a document</param>
    ///<param name = "index">The index of a named destination.</param>
    ///<param name = "buffer">
    /// The buffer to store the destination name,
    /// used as wchar_t*.
    ///</param>
    ///<param name = "buflen [in/out]">
    /// Size of the buffer in bytes on input,
    /// length of the result in bytes on output
    /// or -1 if the buffer is too small.
    ///</param>
    ///<remarks>
    /// Call this function twice to get the name of the named destination:
    /// 1) First time pass in |buffer| as NULL and get buflen.
    /// 2) Second time pass in allocated |buffer| and buflen to retrieve
    /// |buffer|, which should be used as wchar_t*.
    /// If buflen is not sufficiently large, it will be set to -1 upon
    /// return.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.
    ///</remarks>
    ///<returns>
    /// The destination handle for a given index, or NULL if there is no
    /// named destination corresponding to |index|.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetNamedDest), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_DEST FPDF_GetNamedDest(FPDF_DOCUMENT document, int index, IntPtr buffer, int buflen);
    ///<summary>Get the number of valid packets in the XFA entry.</summary>
    ///<param name = "document">Handle to the document.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>The number of valid packets, or -1 on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetXFAPacketCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_GetXFAPacketCount(FPDF_DOCUMENT document);
    ///<summary>Get the name of a packet in the XFA array.</summary>
    ///<param name = "document">Handle to the document.</param>
    ///<param name = "index">Index number of the packet. 0 for the first packet.</param>
    ///<param name = "buffer">Buffer for holding the name of the XFA packet.</param>
    ///<param name = "buflen">Length of |buffer| in bytes.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// The length of the packet name in bytes, or 0 on error.
    /// |document| must be valid and |index| must be in the range [0, N), where N is
    /// the value returned by FPDF_GetXFAPacketCount().
    /// |buffer| is only modified if it is non-NULL and |buflen| is greater than or
    /// equal to the length of the packet name. The packet name includes a
    /// terminating NUL character. |buffer| is unmodified on error.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetXFAPacketName), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDF_GetXFAPacketName(FPDF_DOCUMENT document, int index, IntPtr buffer, uint buflen);
    ///<summary>Get the content of a packet in the XFA array.</summary>
    ///<param name = "document">Handle to the document.</param>
    ///<param name = "index">Index number of the packet. 0 for the first packet.</param>
    ///<param name = "buffer">Buffer for holding the content of the XFA packet.</param>
    ///<param name = "buflen">Length of |buffer| in bytes.</param>
    ///<param name = "out_buflen">
    /// Pointer to the variable that will receive the minimum
    /// buffer size needed to contain the content of the XFA
    /// packet.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h.</remarks>
    ///<returns>
    /// Whether the operation succeeded or not.
    /// |document| must be valid and |index| must be in the range [0, N), where N is
    /// the value returned by FPDF_GetXFAPacketCount(). |out_buflen| must not be
    /// NULL. When the aforementioned arguments are valid, the operation succeeds,
    /// and |out_buflen| receives the content size. |buffer| is only modified if
    /// |buffer| is non-null and long enough to contain the content. Callers must
    /// check both the return value and the input |buflen| is no less than the
    /// returned |out_buflen| before using the data in |buffer|.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetXFAPacketContent), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_GetXFAPacketContent(FPDF_DOCUMENT document, int index, IntPtr buffer, uint buflen, uint out_buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_attachment.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFDoc_GetAttachmentCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFDoc_GetAttachmentCount(FPDF_DOCUMENT document);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_attachment.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFDoc_AddAttachment), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_ATTACHMENT FPDFDoc_AddAttachment(FPDF_DOCUMENT document, FPDF_WIDESTRING name);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_attachment.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFDoc_GetAttachment), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_ATTACHMENT FPDFDoc_GetAttachment(FPDF_DOCUMENT document, int index);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_attachment.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFDoc_DeleteAttachment), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFDoc_DeleteAttachment(FPDF_DOCUMENT document, int index);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_attachment.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAttachment_GetName), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFAttachment_GetName(FPDF_ATTACHMENT attachment, ushort buffer, uint buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_attachment.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAttachment_HasKey), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFAttachment_HasKey(FPDF_ATTACHMENT attachment, FPDF_BYTESTRING key);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_attachment.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAttachment_GetValueType), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFAttachment_GetValueType(FPDF_ATTACHMENT attachment, FPDF_BYTESTRING key);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_attachment.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAttachment_SetStringValue), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFAttachment_SetStringValue(FPDF_ATTACHMENT attachment, FPDF_BYTESTRING key, FPDF_WIDESTRING value);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_attachment.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAttachment_GetStringValue), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFAttachment_GetStringValue(FPDF_ATTACHMENT attachment, FPDF_BYTESTRING key, ushort buffer, uint buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_attachment.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAttachment_SetFile), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFAttachment_SetFile(FPDF_ATTACHMENT attachment, FPDF_DOCUMENT document, IntPtr contents, uint len);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_attachment.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAttachment_GetFile), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFAttachment_GetFile(FPDF_ATTACHMENT attachment, IntPtr buffer, uint buflen, uint out_buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_catalog.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFCatalog_IsTagged), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFCatalog_IsTagged(FPDF_DOCUMENT document);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_dataavail.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAvail_Create), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_AVAIL FPDFAvail_Create(FX_FILEAVAIL file_avail, FPDF_FILEACCESS file);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_dataavail.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAvail_Destroy), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFAvail_Destroy(FPDF_AVAIL avail);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_dataavail.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAvail_IsDocAvail), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFAvail_IsDocAvail(FPDF_AVAIL avail, FX_DOWNLOADHINTS hints);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_dataavail.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAvail_GetDocument), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_DOCUMENT FPDFAvail_GetDocument(FPDF_AVAIL avail, FPDF_BYTESTRING password);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_dataavail.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAvail_GetFirstPageNum), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFAvail_GetFirstPageNum(FPDF_DOCUMENT doc);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_dataavail.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAvail_IsPageAvail), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFAvail_IsPageAvail(FPDF_AVAIL avail, int page_index, FX_DOWNLOADHINTS hints);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_dataavail.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAvail_IsFormAvail), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFAvail_IsFormAvail(FPDF_AVAIL avail, FX_DOWNLOADHINTS hints);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_dataavail.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAvail_IsLinearized), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFAvail_IsLinearized(FPDF_AVAIL avail);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFBookmark_GetFirstChild), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_BOOKMARK FPDFBookmark_GetFirstChild(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFBookmark_GetNextSibling), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_BOOKMARK FPDFBookmark_GetNextSibling(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFBookmark_GetTitle), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFBookmark_GetTitle(FPDF_BOOKMARK bookmark, IntPtr buffer, uint buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFBookmark_Find), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_BOOKMARK FPDFBookmark_Find(FPDF_DOCUMENT document, FPDF_WIDESTRING title);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFBookmark_GetDest), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_DEST FPDFBookmark_GetDest(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFBookmark_GetAction), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_ACTION FPDFBookmark_GetAction(FPDF_BOOKMARK bookmark);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAction_GetType), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFAction_GetType(FPDF_ACTION action);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAction_GetDest), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_DEST FPDFAction_GetDest(FPDF_DOCUMENT document, FPDF_ACTION action);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAction_GetFilePath), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFAction_GetFilePath(FPDF_ACTION action, IntPtr buffer, uint buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFAction_GetURIPath), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFAction_GetURIPath(FPDF_DOCUMENT document, FPDF_ACTION action, IntPtr buffer, uint buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFDest_GetDestPageIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFDest_GetDestPageIndex(FPDF_DOCUMENT document, FPDF_DEST dest);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFDest_GetView), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFDest_GetView(FPDF_DEST dest, uint pNumParams, float pParams);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFDest_GetLocationInPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFDest_GetLocationInPage(FPDF_DEST dest, int hasXVal, int hasYVal, int hasZoomVal, float x, float y, float zoom);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetLinkAtPoint), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_LINK FPDFLink_GetLinkAtPoint(FPDF_PAGE page, double x, double y);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetLinkZOrderAtPoint), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFLink_GetLinkZOrderAtPoint(FPDF_PAGE page, double x, double y);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetDest), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_DEST FPDFLink_GetDest(FPDF_DOCUMENT document, FPDF_LINK link);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetAction), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_ACTION FPDFLink_GetAction(FPDF_LINK link);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFLink_Enumerate), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFLink_Enumerate(FPDF_PAGE page, int start_pos, FPDF_LINK link_annot);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetAnnot), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_ANNOTATION FPDFLink_GetAnnot(FPDF_PAGE page, FPDF_LINK link_annot);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetAnnotRect), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFLink_GetAnnotRect(FPDF_LINK link_annot, FS_RECTF rect);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFLink_CountQuadPoints), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFLink_CountQuadPoints(FPDF_LINK link_annot);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetQuadPoints), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFLink_GetQuadPoints(FPDF_LINK link_annot, int quad_index, FS_QUADPOINTSF quad_points);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageAAction), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_ACTION FPDF_GetPageAAction(FPDF_PAGE page, int aa_type);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetFileIdentifier), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDF_GetFileIdentifier(FPDF_DOCUMENT document, FPDF_FILEIDTYPE id_type, IntPtr buffer, uint buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetMetaText), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDF_GetMetaText(FPDF_DOCUMENT document, FPDF_BYTESTRING tag, IntPtr buffer, uint buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_doc.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetPageLabel), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDF_GetPageLabel(FPDF_DOCUMENT document, int page_index, IntPtr buffer, uint buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_CreateNewDocument), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_DOCUMENT FPDF_CreateNewDocument();
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_New), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PAGE FPDFPage_New(FPDF_DOCUMENT document, int page_index, double width, double height);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_Delete), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFPage_Delete(FPDF_DOCUMENT document, int page_index);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetRotation), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPage_GetRotation(FPDF_PAGE page);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_SetRotation), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFPage_SetRotation(FPDF_PAGE page, int rotate);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_InsertObject), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFPage_InsertObject(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_RemoveObject), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPage_RemoveObject(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_CountObjects), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPage_CountObjects(FPDF_PAGE page);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetObject), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PAGEOBJECT FPDFPage_GetObject(FPDF_PAGE page, int index);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_HasTransparency), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPage_HasTransparency(FPDF_PAGE page);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GenerateContent), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPage_GenerateContent(FPDF_PAGE page);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_Destroy), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFPageObj_Destroy(FPDF_PAGEOBJECT page_obj);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_HasTransparency), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_HasTransparency(FPDF_PAGEOBJECT page_object);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetType), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_GetType(FPDF_PAGEOBJECT page_object);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_Transform), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFPageObj_Transform(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetMatrix), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_GetMatrix(FPDF_PAGEOBJECT page_object, FS_MATRIX matrix);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_SetMatrix), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_SetMatrix(FPDF_PAGEOBJECT path, FS_MATRIX matrix);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_TransformAnnots), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFPage_TransformAnnots(FPDF_PAGE page, double a, double b, double c, double d, double e, double f);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_NewImageObj), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PAGEOBJECT FPDFPageObj_NewImageObj(FPDF_DOCUMENT document);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_CountMarks), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_CountMarks(FPDF_PAGEOBJECT page_object);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetMark), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PAGEOBJECTMARK FPDFPageObj_GetMark(FPDF_PAGEOBJECT page_object, uint index);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_AddMark), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PAGEOBJECTMARK FPDFPageObj_AddMark(FPDF_PAGEOBJECT page_object, FPDF_BYTESTRING name);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_RemoveMark), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_RemoveMark(FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_GetName), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObjMark_GetName(FPDF_PAGEOBJECTMARK mark, IntPtr buffer, uint buflen, uint out_buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_CountParams), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObjMark_CountParams(FPDF_PAGEOBJECTMARK mark);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_GetParamKey), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObjMark_GetParamKey(FPDF_PAGEOBJECTMARK mark, uint index, IntPtr buffer, uint buflen, uint out_buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_GetParamValueType), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObjMark_GetParamValueType(FPDF_PAGEOBJECTMARK mark, FPDF_BYTESTRING key);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_GetParamIntValue), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObjMark_GetParamIntValue(FPDF_PAGEOBJECTMARK mark, FPDF_BYTESTRING key, int out_value);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_GetParamStringValue), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObjMark_GetParamStringValue(FPDF_PAGEOBJECTMARK mark, FPDF_BYTESTRING key, IntPtr buffer, uint buflen, uint out_buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_GetParamBlobValue), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObjMark_GetParamBlobValue(FPDF_PAGEOBJECTMARK mark, FPDF_BYTESTRING key, IntPtr buffer, uint buflen, uint out_buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_SetIntParam), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObjMark_SetIntParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, FPDF_BYTESTRING key, int value);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_SetStringParam), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObjMark_SetStringParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, FPDF_BYTESTRING key, FPDF_BYTESTRING value);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_SetBlobParam), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObjMark_SetBlobParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, FPDF_BYTESTRING key, IntPtr value, uint value_len);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObjMark_RemoveParam), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObjMark_RemoveParam(FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, FPDF_BYTESTRING key);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_LoadJpegFile), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFImageObj_LoadJpegFile(FPDF_PAGE pages, int count, FPDF_PAGEOBJECT image_object, FPDF_FILEACCESS file_access);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_LoadJpegFileInline), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFImageObj_LoadJpegFileInline(FPDF_PAGE pages, int count, FPDF_PAGEOBJECT image_object, FPDF_FILEACCESS file_access);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_SetMatrix), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFImageObj_SetMatrix(FPDF_PAGEOBJECT image_object, double a, double b, double c, double d, double e, double f);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_SetBitmap), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFImageObj_SetBitmap(FPDF_PAGE pages, int count, FPDF_PAGEOBJECT image_object, FPDF_BITMAP bitmap);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_GetBitmap), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_BITMAP FPDFImageObj_GetBitmap(FPDF_PAGEOBJECT image_object);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_GetRenderedBitmap), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_BITMAP FPDFImageObj_GetRenderedBitmap(FPDF_DOCUMENT document, FPDF_PAGE page, FPDF_PAGEOBJECT image_object);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_GetImageDataDecoded), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFImageObj_GetImageDataDecoded(FPDF_PAGEOBJECT image_object, IntPtr buffer, uint buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_GetImageDataRaw), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFImageObj_GetImageDataRaw(FPDF_PAGEOBJECT image_object, IntPtr buffer, uint buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_GetImageFilterCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFImageObj_GetImageFilterCount(FPDF_PAGEOBJECT image_object);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_GetImageFilter), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFImageObj_GetImageFilter(FPDF_PAGEOBJECT image_object, int index, IntPtr buffer, uint buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFImageObj_GetImageMetadata), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFImageObj_GetImageMetadata(FPDF_PAGEOBJECT image_object, FPDF_PAGE page, FPDF_IMAGEOBJ_METADATA metadata);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_CreateNewPath), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreateNewPath(float x, float y);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_CreateNewRect), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreateNewRect(float x, float y, float w, float h);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetBounds), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_GetBounds(FPDF_PAGEOBJECT page_object, float left, float bottom, float right, float top);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_SetBlendMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFPageObj_SetBlendMode(FPDF_PAGEOBJECT page_object, FPDF_BYTESTRING blend_mode);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_SetStrokeColor), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_SetStrokeColor(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetStrokeColor), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_GetStrokeColor(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_SetStrokeWidth), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_SetStrokeWidth(FPDF_PAGEOBJECT page_object, float width);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetStrokeWidth), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_GetStrokeWidth(FPDF_PAGEOBJECT page_object, float width);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetLineJoin), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_GetLineJoin(FPDF_PAGEOBJECT page_object);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_SetLineJoin), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_SetLineJoin(FPDF_PAGEOBJECT page_object, int line_join);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetLineCap), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_GetLineCap(FPDF_PAGEOBJECT page_object);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_SetLineCap), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_SetLineCap(FPDF_PAGEOBJECT page_object, int line_cap);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_SetFillColor), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_SetFillColor(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetFillColor), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_GetFillColor(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetDashPhase), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_GetDashPhase(FPDF_PAGEOBJECT page_object, float phase);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_SetDashPhase), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_SetDashPhase(FPDF_PAGEOBJECT page_object, float phase);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetDashCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_GetDashCount(FPDF_PAGEOBJECT page_object);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetDashArray), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_GetDashArray(FPDF_PAGEOBJECT page_object, float dash_array, ulong dash_count);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_SetDashArray), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPageObj_SetDashArray(FPDF_PAGEOBJECT page_object, float dash_array, ulong dash_count, float phase);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPath_CountSegments), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPath_CountSegments(FPDF_PAGEOBJECT path);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPath_GetPathSegment), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PATHSEGMENT FPDFPath_GetPathSegment(FPDF_PAGEOBJECT path, int index);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPathSegment_GetPoint), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPathSegment_GetPoint(FPDF_PATHSEGMENT segment, float x, float y);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPathSegment_GetType), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPathSegment_GetType(FPDF_PATHSEGMENT segment);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPathSegment_GetClose), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPathSegment_GetClose(FPDF_PATHSEGMENT segment);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPath_MoveTo), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPath_MoveTo(FPDF_PAGEOBJECT path, float x, float y);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPath_LineTo), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPath_LineTo(FPDF_PAGEOBJECT path, float x, float y);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPath_BezierTo), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPath_BezierTo(FPDF_PAGEOBJECT path, float x1, float y1, float x2, float y2, float x3, float y3);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPath_Close), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPath_Close(FPDF_PAGEOBJECT path);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPath_SetDrawMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPath_SetDrawMode(FPDF_PAGEOBJECT path, int fillmode, int stroke);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPath_GetDrawMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPath_GetDrawMode(FPDF_PAGEOBJECT path, int fillmode, int stroke);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_NewTextObj), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PAGEOBJECT FPDFPageObj_NewTextObj(FPDF_DOCUMENT document, FPDF_BYTESTRING font, float font_size);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_SetText), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_SetText(FPDF_PAGEOBJECT text_object, FPDF_WIDESTRING text);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_SetCharcodes), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_SetCharcodes(FPDF_PAGEOBJECT text_object, uint charcodes, ulong count);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_LoadFont), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_FONT FPDFText_LoadFont(FPDF_DOCUMENT document, byte data, uint size, int font_type, int cid);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_LoadStandardFont), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_FONT FPDFText_LoadStandardFont(FPDF_DOCUMENT document, FPDF_BYTESTRING font);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFTextObj_GetFontSize), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFTextObj_GetFontSize(FPDF_PAGEOBJECT text, float size);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFFont_Close), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFFont_Close(FPDF_FONT font);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_CreateTextObj), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreateTextObj(FPDF_DOCUMENT document, FPDF_FONT font, float font_size);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFTextObj_GetTextRenderMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_TEXT_RENDERMODE FPDFTextObj_GetTextRenderMode(FPDF_PAGEOBJECT text);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFTextObj_SetTextRenderMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFTextObj_SetTextRenderMode(FPDF_PAGEOBJECT text, FPDF_TEXT_RENDERMODE render_mode);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFTextObj_GetText), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFTextObj_GetText(FPDF_PAGEOBJECT text_object, FPDF_TEXTPAGE text_page, ushort buffer, uint length);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFTextObj_GetFont), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_FONT FPDFTextObj_GetFont(FPDF_PAGEOBJECT text);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFFont_GetFontName), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFFont_GetFontName(FPDF_FONT font, string buffer, uint length);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFFont_GetFlags), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFFont_GetFlags(FPDF_FONT font);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFFont_GetWeight), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFFont_GetWeight(FPDF_FONT font);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFFont_GetItalicAngle), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFFont_GetItalicAngle(FPDF_FONT font, int angle);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFFont_GetAscent), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFFont_GetAscent(FPDF_FONT font, float font_size, float ascent);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFFont_GetDescent), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFFont_GetDescent(FPDF_FONT font, float font_size, float descent);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFFont_GetGlyphWidth), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFFont_GetGlyphWidth(FPDF_FONT font, uint glyph, float font_size, float width);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFFont_GetGlyphPath), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_GLYPHPATH FPDFFont_GetGlyphPath(FPDF_FONT font, uint glyph, float font_size);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFGlyphPath_CountGlyphSegments), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFGlyphPath_CountGlyphSegments(FPDF_GLYPHPATH glyphpath);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFGlyphPath_GetGlyphPathSegment), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PATHSEGMENT FPDFGlyphPath_GetGlyphPathSegment(FPDF_GLYPHPATH glyphpath, int index);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFFormObj_CountObjects), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFFormObj_CountObjects(FPDF_PAGEOBJECT form_object);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFFormObj_GetObject), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PAGEOBJECT FPDFFormObj_GetObject(FPDF_PAGEOBJECT form_object, uint index);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_ext.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FSDK_SetUnSpObjProcessHandler), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FSDK_SetUnSpObjProcessHandler(UNSUPPORT_INFO unsp_info);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_ext.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFDoc_GetPageMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFDoc_GetPageMode(FPDF_DOCUMENT document);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_flatten.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_Flatten), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPage_Flatten(FPDF_PAGE page, int nFlag);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_javascript.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFDoc_GetJavaScriptActionCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFDoc_GetJavaScriptActionCount(FPDF_DOCUMENT document);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_javascript.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFDoc_GetJavaScriptAction), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_JAVASCRIPT_ACTION FPDFDoc_GetJavaScriptAction(FPDF_DOCUMENT document, int index);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_javascript.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFDoc_CloseJavaScriptAction), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFDoc_CloseJavaScriptAction(FPDF_JAVASCRIPT_ACTION javascript);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_javascript.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFJavaScriptAction_GetName), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFJavaScriptAction_GetName(FPDF_JAVASCRIPT_ACTION javascript, ushort buffer, uint buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_javascript.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFJavaScriptAction_GetScript), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFJavaScriptAction_GetScript(FPDF_JAVASCRIPT_ACTION javascript, ushort buffer, uint buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_ppo.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_ImportPagesByIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_ImportPagesByIndex(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, int page_indices, uint length, int index);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_ppo.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_ImportPages), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_ImportPages(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, FPDF_BYTESTRING pagerange, int index);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_ppo.h.</remarks>
    ///<returns>A handle to the created document, or NULL on failure.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_ImportNPagesToOne), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_DOCUMENT FPDF_ImportNPagesToOne(FPDF_DOCUMENT src_doc, float output_width, float output_height, ulong num_pages_on_x_axis, ulong num_pages_on_y_axis);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_ppo.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_NewXObjectFromPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_XOBJECT FPDF_NewXObjectFromPage(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, int src_page_index);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_ppo.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_CloseXObject), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDF_CloseXObject(FPDF_XOBJECT xobject);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_ppo.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_NewFormObjectFromXObject), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PAGEOBJECT FPDF_NewFormObjectFromXObject(FPDF_XOBJECT xobject);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_ppo.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_CopyViewerPreferences), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_CopyViewerPreferences(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc);
    ///<summary>
    /// Start to render page contents to a device independent bitmap
    /// progressively with a specified color scheme for the content.
    ///</summary>
    ///<param name = "bitmap">
    /// Handle to the device independent bitmap (as the
    /// output buffer). Bitmap handle can be created by
    /// FPDFBitmap_Create function.
    ///</param>
    ///<param name = "page">
    /// Handle to the page as returned by FPDF_LoadPage
    /// function.
    ///</param>
    ///<param name = "start_x">
    /// Left pixel position of the display area in the
    /// bitmap coordinate.
    ///</param>
    ///<param name = "start_y">
    /// Top pixel position of the display area in the
    /// bitmap coordinate.
    ///</param>
    ///<param name = "size_x">
    /// Horizontal size (in pixels) for displaying the
    /// page.
    ///</param>
    ///<param name = "size_y">Vertical size (in pixels) for displaying the page.</param>
    ///<param name = "rotate">
    /// Page orientation: 0 (normal), 1 (rotated 90
    /// degrees clockwise), 2 (rotated 180 degrees),
    /// 3 (rotated 90 degrees counter-clockwise).
    ///</param>
    ///<param name = "flags">
    /// 0 for normal display, or combination of flags
    /// defined in fpdfview.h. With FPDF_ANNOT flag, it
    /// renders all annotations that does not require
    /// user-interaction, which are all annotations except
    /// widget and popup annotations.
    ///</param>
    ///<param name = "color_scheme">
    /// Color scheme to be used in rendering the |page|.
    /// If null, this function will work similar to
    /// FPDF_RenderPageBitmap_Start().
    ///</param>
    ///<param name = "pause">
    /// The IFSDK_PAUSE interface. A callback mechanism
    /// allowing the page rendering process.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_progressive.h.</remarks>
    ///<returns>
    /// Rendering Status. See flags for progressive process status for the
    /// details.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPageBitmapWithColorScheme_Start), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_RenderPageBitmapWithColorScheme_Start(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags, FPDF_COLORSCHEME color_scheme, IFSDK_PAUSE pause);
    ///<summary>
    /// Start to render page contents to a device independent bitmap
    /// progressively.
    ///</summary>
    ///<param name = "bitmap">
    /// Handle to the device independent bitmap (as the
    /// output buffer). Bitmap handle can be created by
    /// FPDFBitmap_Create().
    ///</param>
    ///<param name = "page">Handle to the page, as returned by FPDF_LoadPage().</param>
    ///<param name = "start_x">
    /// Left pixel position of the display area in the
    /// bitmap coordinates.
    ///</param>
    ///<param name = "start_y">
    /// Top pixel position of the display area in the bitmap
    /// coordinates.
    ///</param>
    ///<param name = "size_x">Horizontal size (in pixels) for displaying the page.</param>
    ///<param name = "size_y">Vertical size (in pixels) for displaying the page.</param>
    ///<param name = "rotate">
    /// Page orientation: 0 (normal), 1 (rotated 90 degrees
    /// clockwise), 2 (rotated 180 degrees), 3 (rotated 90
    /// degrees counter-clockwise).
    ///</param>
    ///<param name = "flags">
    /// 0 for normal display, or combination of flags
    /// defined in fpdfview.h. With FPDF_ANNOT flag, it
    /// renders all annotations that does not require
    /// user-interaction, which are all annotations except
    /// widget and popup annotations.
    ///</param>
    ///<param name = "pause">
    /// The IFSDK_PAUSE interface.A callback mechanism
    /// allowing the page rendering process
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_progressive.h.</remarks>
    ///<returns>
    /// Rendering Status. See flags for progressive process status for the
    /// details.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPageBitmap_Start), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_RenderPageBitmap_Start(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags, IFSDK_PAUSE pause);
    ///<summary>Continue rendering a PDF page.</summary>
    ///<param name = "page">Handle to the page, as returned by FPDF_LoadPage().</param>
    ///<param name = "pause">
    /// The IFSDK_PAUSE interface (a callback mechanism
    /// allowing the page rendering process to be paused
    /// before it's finished). This can be NULL if you
    /// don't want to pause.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_progressive.h.</remarks>
    ///<returns>
    /// The rendering status. See flags for progressive process status for
    /// the details.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPage_Continue), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_RenderPage_Continue(FPDF_PAGE page, IFSDK_PAUSE pause);
    ///<summary>
    /// Release the resource allocate during page rendering. Need to be
    /// called after finishing rendering or
    /// cancel the rendering.
    ///</summary>
    ///<param name = "page">Handle to the page, as returned by FPDF_LoadPage().</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_progressive.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_RenderPage_Close), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDF_RenderPage_Close(FPDF_PAGE page);
    ///<summary>Saves the copy of specified document in custom way.</summary>
    ///<param name = "document">
    /// Handle to document, as returned by
    /// FPDF_LoadDocument() or FPDF_CreateNewDocument().
    ///</param>
    ///<param name = "pFileWrite">A pointer to a custom file write structure.</param>
    ///<param name = "flags">The creating flags.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_save.h.</remarks>
    ///<returns>TRUE for succeed, FALSE for failed.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_SaveAsCopy), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_SaveAsCopy(FPDF_DOCUMENT document, FPDF_FILEWRITE pFileWrite, uint flags);
    ///<summary>
    /// Same as FPDF_SaveAsCopy(), except the file version of the
    /// saved document can be specified by the caller.
    ///</summary>
    ///<param name = "document">Handle to document.</param>
    ///<param name = "pFileWrite">A pointer to a custom file write structure.</param>
    ///<param name = "flags">The creating flags.</param>
    ///<param name = "fileVersion">
    /// The PDF file version. File version: 14 for 1.4,
    /// 15 for 1.5, ...
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_save.h.</remarks>
    ///<returns>TRUE if succeed, FALSE if failed.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_SaveWithVersion), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_SaveWithVersion(FPDF_DOCUMENT document, FPDF_FILEWRITE pFileWrite, uint flags, int fileVersion);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_searchex.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetCharIndexFromTextIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_GetCharIndexFromTextIndex(FPDF_TEXTPAGE text_page, int nTextIndex);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_searchex.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetTextIndexFromCharIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_GetTextIndexFromCharIndex(FPDF_TEXTPAGE text_page, int nCharIndex);
    ///<summary>Get total number of signatures in the document.</summary>
    ///<param name = "document">Handle to document. Returned by FPDF_LoadDocument().</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_signature.h.</remarks>
    ///<returns>Total number of signatures in the document on success, -1 on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetSignatureCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_GetSignatureCount(FPDF_DOCUMENT document);
    ///<summary>Get the Nth signature of the document.</summary>
    ///<param name = "document">Handle to document. Returned by FPDF_LoadDocument().</param>
    ///<param name = "index">Index into the array of signatures of the document.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_signature.h.</remarks>
    ///<returns>
    /// Returns the handle to the signature, or NULL on failure. The caller
    /// does not take ownership of the returned FPDF_SIGNATURE. Instead, it
    /// remains valid until FPDF_CloseDocument() is called for the document.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetSignatureObject), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_SIGNATURE FPDF_GetSignatureObject(FPDF_DOCUMENT document, int index);
    ///<summary>Get the contents of a signature object.</summary>
    ///<param name = "signature">
    /// Handle to the signature object. Returned by
    /// FPDF_GetSignatureObject().
    ///</param>
    ///<param name = "buffer">The address of a buffer that receives the contents.</param>
    ///<param name = "length">The size, in bytes, of |buffer|.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_signature.h.</remarks>
    ///<returns>
    /// Returns the number of bytes in the contents on success, 0 on error.
    /// For public-key signatures, |buffer| is either a DER-encoded PKCS#1 binary or
    /// a DER-encoded PKCS#7 binary. If |length| is less than the returned length, or
    /// |buffer| is NULL, |buffer| will not be modified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFSignatureObj_GetContents), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFSignatureObj_GetContents(FPDF_SIGNATURE signature, IntPtr buffer, uint length);
    ///<summary>Get the byte range of a signature object.</summary>
    ///<param name = "signature">
    /// Handle to the signature object. Returned by
    /// FPDF_GetSignatureObject().
    ///</param>
    ///<param name = "buffer">
    /// The address of a buffer that receives the
    /// byte range.
    ///</param>
    ///<param name = "length">The size, in ints, of |buffer|.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_signature.h.</remarks>
    ///<returns>
    /// Returns the number of ints in the byte range on
    /// success, 0 on error.
    /// |buffer| is an array of pairs of integers (starting byte offset,
    /// length in bytes) that describes the exact byte range for the digest
    /// calculation. If |length| is less than the returned length, or
    /// |buffer| is NULL, |buffer| will not be modified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFSignatureObj_GetByteRange), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFSignatureObj_GetByteRange(FPDF_SIGNATURE signature, int buffer, uint length);
    ///<summary>Get the encoding of the value of a signature object.</summary>
    ///<param name = "signature">
    /// Handle to the signature object. Returned by
    /// FPDF_GetSignatureObject().
    ///</param>
    ///<param name = "buffer">The address of a buffer that receives the encoding.</param>
    ///<param name = "length">The size, in bytes, of |buffer|.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_signature.h.</remarks>
    ///<returns>
    /// Returns the number of bytes in the encoding name (including the
    /// trailing NUL character) on success, 0 on error.
    /// The |buffer| is always encoded in 7-bit ASCII. If |length| is less than the
    /// returned length, or |buffer| is NULL, |buffer| will not be modified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFSignatureObj_GetSubFilter), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFSignatureObj_GetSubFilter(FPDF_SIGNATURE signature, string buffer, uint length);
    ///<summary>Get the reason (comment) of the signature object.</summary>
    ///<param name = "signature">
    /// Handle to the signature object. Returned by
    /// FPDF_GetSignatureObject().
    ///</param>
    ///<param name = "buffer">The address of a buffer that receives the reason.</param>
    ///<param name = "length">The size, in bytes, of |buffer|.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_signature.h.</remarks>
    ///<returns>
    /// Returns the number of bytes in the reason on success, 0 on error.
    /// Regardless of the platform, the |buffer| is always in UTF-16LE encoding. The
    /// string is terminated by a UTF16 NUL character. If |length| is less than the
    /// returned length, or |buffer| is NULL, |buffer| will not be modified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFSignatureObj_GetReason), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFSignatureObj_GetReason(FPDF_SIGNATURE signature, IntPtr buffer, uint length);
    ///<summary>Get the time of signing of a signature object.</summary>
    ///<param name = "signature">
    /// Handle to the signature object. Returned by
    /// FPDF_GetSignatureObject().
    ///</param>
    ///<param name = "buffer">The address of a buffer that receives the time.</param>
    ///<param name = "length">The size, in bytes, of |buffer|.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_signature.h.</remarks>
    ///<returns>
    /// Returns the number of bytes in the encoding name (including the
    /// trailing NUL character) on success, 0 on error.
    /// The |buffer| is always encoded in 7-bit ASCII. If |length| is less than the
    /// returned length, or |buffer| is NULL, |buffer| will not be modified.
    /// The format of time is expected to be D:YYYYMMDDHHMMSS+XX'YY', i.e. it's
    /// percision is seconds, with timezone information. This value should be used
    /// only when the time of signing is not available in the (PKCS#7 binary)
    /// signature.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFSignatureObj_GetTime), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFSignatureObj_GetTime(FPDF_SIGNATURE signature, string buffer, uint length);
    ///<summary>Get the DocMDP permission of a signature object.</summary>
    ///<param name = "signature">
    /// Handle to the signature object. Returned by
    /// FPDF_GetSignatureObject().
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_signature.h.</remarks>
    ///<returns>Returns the permission (1, 2 or 3) on success, 0 on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFSignatureObj_GetDocMDPPermission), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFSignatureObj_GetDocMDPPermission(FPDF_SIGNATURE signature);
    ///<summary>Get the structure tree for a page.</summary>
    ///<param name = "page">Handle to the page, as returned by FPDF_LoadPage().</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.</remarks>
    ///<returns>A handle to the structure tree or NULL on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructTree_GetForPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_STRUCTTREE FPDF_StructTree_GetForPage(FPDF_PAGE page);
    ///<summary>Release a resource allocated by FPDF_StructTree_GetForPage().</summary>
    ///<param name = "struct_tree">
    /// Handle to the structure tree, as returned by
    /// FPDF_StructTree_LoadPage().
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructTree_Close), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDF_StructTree_Close(FPDF_STRUCTTREE struct_tree);
    ///<summary>Count the number of children for the structure tree.</summary>
    ///<param name = "struct_tree">
    /// Handle to the structure tree, as returned by
    /// FPDF_StructTree_LoadPage().
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.</remarks>
    ///<returns>The number of children, or -1 on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructTree_CountChildren), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_StructTree_CountChildren(FPDF_STRUCTTREE struct_tree);
    ///<summary>Get a child in the structure tree.</summary>
    ///<param name = "struct_tree">
    /// Handle to the structure tree, as returned by
    /// FPDF_StructTree_LoadPage().
    ///</param>
    ///<param name = "index">The index for the child, 0-based.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.</remarks>
    ///<returns>The child at the n-th index or NULL on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructTree_GetChildAtIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_STRUCTELEMENT FPDF_StructTree_GetChildAtIndex(FPDF_STRUCTTREE struct_tree, int index);
    ///<summary>Get the alt text for a given element.</summary>
    ///<param name = "struct_element">Handle to the struct element.</param>
    ///<param name = "buffer">A buffer for output the alt text. May be NULL.</param>
    ///<param name = "buflen">The length of the buffer, in bytes. May be 0.</param>
    ///<remarks>
    /// Regardless of the platform, the |buffer| is always in UTF-16LE
    /// encoding. The string is terminated by a UTF16 NUL character. If
    /// |buflen| is less than the required length, or |buffer| is NULL,
    /// |buffer| will not be modified.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.
    ///</remarks>
    ///<returns>
    /// The number of bytes in the title, including the terminating NUL
    /// character. The number of bytes is returned regardless of the
    /// |buffer| and |buflen| parameters.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetAltText), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDF_StructElement_GetAltText(FPDF_STRUCTELEMENT struct_element, IntPtr buffer, uint buflen);
    ///<summary>Get the ID for a given element.</summary>
    ///<param name = "struct_element">Handle to the struct element.</param>
    ///<param name = "buffer">A buffer for output the ID string. May be NULL.</param>
    ///<param name = "buflen">The length of the buffer, in bytes. May be 0.</param>
    ///<remarks>
    /// Regardless of the platform, the |buffer| is always in UTF-16LE
    /// encoding. The string is terminated by a UTF16 NUL character. If
    /// |buflen| is less than the required length, or |buffer| is NULL,
    /// |buffer| will not be modified.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.
    ///</remarks>
    ///<returns>
    /// The number of bytes in the ID string, including the terminating NUL
    /// character. The number of bytes is returned regardless of the
    /// |buffer| and |buflen| parameters.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetID), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDF_StructElement_GetID(FPDF_STRUCTELEMENT struct_element, IntPtr buffer, uint buflen);
    ///<summary>Get the case-insensitive IETF BCP 47 language code for an element.</summary>
    ///<param name = "struct_element">Handle to the struct element.</param>
    ///<param name = "buffer">A buffer for output the lang string. May be NULL.</param>
    ///<param name = "buflen">The length of the buffer, in bytes. May be 0.</param>
    ///<remarks>
    /// Regardless of the platform, the |buffer| is always in UTF-16LE
    /// encoding. The string is terminated by a UTF16 NUL character. If
    /// |buflen| is less than the required length, or |buffer| is NULL,
    /// |buffer| will not be modified.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.
    ///</remarks>
    ///<returns>
    /// The number of bytes in the ID string, including the terminating NUL
    /// character. The number of bytes is returned regardless of the
    /// |buffer| and |buflen| parameters.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetLang), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDF_StructElement_GetLang(FPDF_STRUCTELEMENT struct_element, IntPtr buffer, uint buflen);
    ///<summary>Get a struct element attribute of type "name" or "string".</summary>
    ///<param name = "struct_element">Handle to the struct element.</param>
    ///<param name = "attr_name">The name of the attribute to retrieve.</param>
    ///<param name = "buffer">A buffer for output. May be NULL.</param>
    ///<param name = "buflen">The length of the buffer, in bytes. May be 0.</param>
    ///<remarks>
    /// Regardless of the platform, the |buffer| is always in UTF-16LE
    /// encoding. The string is terminated by a UTF16 NUL character. If
    /// |buflen| is less than the required length, or |buffer| is NULL,
    /// |buffer| will not be modified.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.
    ///</remarks>
    ///<returns>
    /// The number of bytes in the attribute value, including the
    /// terminating NUL character. The number of bytes is returned
    /// regardless of the |buffer| and |buflen| parameters.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetStringAttribute), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDF_StructElement_GetStringAttribute(FPDF_STRUCTELEMENT struct_element, FPDF_BYTESTRING attr_name, IntPtr buffer, uint buflen);
    ///<summary>Get the marked content ID for a given element.</summary>
    ///<param name = "struct_element">Handle to the struct element.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.</remarks>
    ///<returns>
    /// The marked content ID of the element. If no ID exists, returns
    /// -1.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetMarkedContentID), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_StructElement_GetMarkedContentID(FPDF_STRUCTELEMENT struct_element);
    ///<summary>Get the type (/S) for a given element.</summary>
    ///<param name = "struct_element">Handle to the struct element.</param>
    ///<param name = "buffer">A buffer for output. May be NULL.</param>
    ///<param name = "buflen">The length of the buffer, in bytes. May be 0.</param>
    ///<remarks>
    /// Regardless of the platform, the |buffer| is always in UTF-16LE
    /// encoding. The string is terminated by a UTF16 NUL character. If
    /// |buflen| is less than the required length, or |buffer| is NULL,
    /// |buffer| will not be modified.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.
    ///</remarks>
    ///<returns>
    /// The number of bytes in the type, including the terminating NUL
    /// character. The number of bytes is returned regardless of the
    /// |buffer| and |buflen| parameters.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetType), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDF_StructElement_GetType(FPDF_STRUCTELEMENT struct_element, IntPtr buffer, uint buflen);
    ///<summary>Get the title (/T) for a given element.</summary>
    ///<param name = "struct_element">Handle to the struct element.</param>
    ///<param name = "buffer">A buffer for output. May be NULL.</param>
    ///<param name = "buflen">The length of the buffer, in bytes. May be 0.</param>
    ///<remarks>
    /// Regardless of the platform, the |buffer| is always in UTF-16LE
    /// encoding. The string is terminated by a UTF16 NUL character. If
    /// |buflen| is less than the required length, or |buffer| is NULL,
    /// |buffer| will not be modified.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.
    ///</remarks>
    ///<returns>
    /// The number of bytes in the title, including the terminating NUL
    /// character. The number of bytes is returned regardless of the
    /// |buffer| and |buflen| parameters.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetTitle), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDF_StructElement_GetTitle(FPDF_STRUCTELEMENT struct_element, IntPtr buffer, uint buflen);
    ///<summary>Count the number of children for the structure element.</summary>
    ///<param name = "struct_element">Handle to the struct element.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.</remarks>
    ///<returns>The number of children, or -1 on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_CountChildren), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDF_StructElement_CountChildren(FPDF_STRUCTELEMENT struct_element);
    ///<summary>Get a child in the structure element.</summary>
    ///<param name = "struct_tree">Handle to the struct element.</param>
    ///<param name = "index">The index for the child, 0-based.</param>
    ///<remarks>
    /// If the child exists but is not an element, then this function will
    /// return NULL. This will also return NULL for out of bounds indices.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_structtree.h.
    ///</remarks>
    ///<returns>The child at the n-th index or NULL on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_StructElement_GetChildAtIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_STRUCTELEMENT FPDF_StructElement_GetChildAtIndex(FPDF_STRUCTELEMENT struct_element, int index);
    ///<summary>
    /// Returns a pointer to the default character set to TT Font name map. The
    /// map is an array of FPDF_CharsetFontMap structs, with its end indicated
    /// by a { -1, NULL } entry.
    ///</summary>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_sysfontinfo.h.</remarks>
    ///<returns>Pointer to the Charset Font Map.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetDefaultTTFMap), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_CHARSETFONTMAP FPDF_GetDefaultTTFMap();
    ///<summary>Add a system font to the list in PDFium.</summary>
    ///<param name = "mapper">Opaque pointer to Foxit font mapper</param>
    ///<param name = "face">The font face name</param>
    ///<param name = "charset">Font character set. See above defined constants.</param>
    ///<remarks>
    /// This function is only called during the system font list building
    /// process.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_sysfontinfo.h.
    ///</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_AddInstalledFont), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDF_AddInstalledFont(IntPtr mapper, string face, int charset);
    ///<summary>Set the system font info interface into PDFium</summary>
    ///<param name = "pFontInfo">Pointer to a FPDF_SYSFONTINFO structure</param>
    ///<remarks>
    /// Platform support implementation should implement required methods of
    /// FFDF_SYSFONTINFO interface, then call this function during PDFium
    /// initialization process.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_sysfontinfo.h.
    ///</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_SetSystemFontInfo), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDF_SetSystemFontInfo(FPDF_SYSFONTINFO pFontInfo);
    ///<summary>Get default system font info interface for current platform</summary>
    ///<remarks>
    /// For some platforms, PDFium implements a default version of system
    /// font info interface. The default implementation can be passed to
    /// FPDF_SetSystemFontInfo().
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_sysfontinfo.h.
    ///</remarks>
    ///<returns>
    /// Pointer to a FPDF_SYSFONTINFO structure describing the default
    /// interface, or NULL if the platform doesn't have a default interface.
    /// Application should call FPDF_FreeDefaultSystemFontInfo to free the
    /// returned pointer.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetDefaultSystemFontInfo), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_SYSFONTINFO FPDF_GetDefaultSystemFontInfo();
    ///<summary>Free a default system font info interface</summary>
    ///<param name = "pFontInfo">Pointer to a FPDF_SYSFONTINFO structure</param>
    ///<remarks>
    /// This function should be called on the output from
    /// FPDF_SetSystemFontInfo() once it is no longer needed.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_sysfontinfo.h.
    ///</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_FreeDefaultSystemFontInfo), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDF_FreeDefaultSystemFontInfo(FPDF_SYSFONTINFO pFontInfo);
    ///<summary>Prepare information about all characters in a page.</summary>
    ///<param name = "page">
    /// Handle to the page. Returned by FPDF_LoadPage function
    /// (in FPDFVIEW module).
    ///</param>
    ///<remarks>
    /// Application must call FPDFText_ClosePage to release the text page
    /// information.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.
    ///</remarks>
    ///<returns>
    /// A handle to the text page information structure.
    /// NULL if something goes wrong.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_LoadPage), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_TEXTPAGE FPDFText_LoadPage(FPDF_PAGE page);
    ///<summary>
    /// Release all resources allocated for a text page information
    /// structure.
    ///</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_ClosePage), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFText_ClosePage(FPDF_TEXTPAGE text_page);
    ///<summary>Get number of characters in a page.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<remarks>
    /// Characters in a page form a "stream", inside the stream, each
    /// character has an index.
    /// We will use the index parameters in many of FPDFTEXT functions. The
    /// first character in the page
    /// has an index value of zero.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.
    ///</remarks>
    ///<returns>
    /// Number of characters in the page. Return -1 for error.
    /// Generated characters, like additional space characters, new line
    /// characters, are also counted.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_CountChars), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_CountChars(FPDF_TEXTPAGE text_page);
    ///<summary>Get Unicode of a character in a page.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "index">Zero-based index of the character.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// The Unicode of the particular character.
    /// If a character is not encoded in Unicode and Foxit engine can't
    /// convert to Unicode,
    /// the return value will be zero.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetUnicode), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFText_GetUnicode(FPDF_TEXTPAGE text_page, int index);
    ///<summary>Get the font size of a particular character.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "index">Zero-based index of the character.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// The font size of the particular character, measured in points (about
    /// 1/72 inch). This is the typographic size of the font (so called
    /// "em size").
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetFontSize), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern double FPDFText_GetFontSize(FPDF_TEXTPAGE text_page, int index);
    ///<summary>Get the font name and flags of a particular character.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "index">Zero-based index of the character.</param>
    ///<param name = "buffer">A buffer receiving the font name.</param>
    ///<param name = "buflen">The length of |buffer| in bytes.</param>
    ///<param name = "flags">
    /// Optional pointer to an int receiving the font flags.
    /// These flags should be interpreted per PDF spec 1.7
    /// Section 5.7.1 Font Descriptor Flags.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// On success, return the length of the font name, including the
    /// trailing NUL character, in bytes. If this length is less than or
    /// equal to |length|, |buffer| is set to the font name, |flags| is
    /// set to the font flags. |buffer| is in UTF-8 encoding. Return 0 on
    /// failure.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetFontInfo), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFText_GetFontInfo(FPDF_TEXTPAGE text_page, int index, IntPtr buffer, uint buflen, int flags);
    ///<summary>Get the font weight of a particular character.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "index">Zero-based index of the character.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// On success, return the font weight of the particular character. If
    /// |text_page| is invalid, if |index| is out of bounds, or if the
    /// character's text object is undefined, return -1.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetFontWeight), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_GetFontWeight(FPDF_TEXTPAGE text_page, int index);
    ///<summary>Get text rendering mode of character.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "index">Zero-based index of the character.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// On success, return the render mode value. A valid value is of type
    /// FPDF_TEXT_RENDERMODE. If |text_page| is invalid, if |index| is out
    /// of bounds, or if the text object is undefined, then return
    /// FPDF_TEXTRENDERMODE_UNKNOWN.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetTextRenderMode), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_TEXT_RENDERMODE FPDFText_GetTextRenderMode(FPDF_TEXTPAGE text_page, int index);
    ///<summary>Get the fill color of a particular character.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "index">Zero-based index of the character.</param>
    ///<param name = "R">
    /// Pointer to an unsigned int number receiving the
    /// red value of the fill color.
    ///</param>
    ///<param name = "G">
    /// Pointer to an unsigned int number receiving the
    /// green value of the fill color.
    ///</param>
    ///<param name = "B">
    /// Pointer to an unsigned int number receiving the
    /// blue value of the fill color.
    ///</param>
    ///<param name = "A">
    /// Pointer to an unsigned int number receiving the
    /// alpha value of the fill color.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// Whether the call succeeded. If false, |R|, |G|, |B| and |A| are
    /// unchanged.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetFillColor), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_GetFillColor(FPDF_TEXTPAGE text_page, int index, uint R, uint G, uint B, uint A);
    ///<summary>Get the stroke color of a particular character.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "index">Zero-based index of the character.</param>
    ///<param name = "R">
    /// Pointer to an unsigned int number receiving the
    /// red value of the stroke color.
    ///</param>
    ///<param name = "G">
    /// Pointer to an unsigned int number receiving the
    /// green value of the stroke color.
    ///</param>
    ///<param name = "B">
    /// Pointer to an unsigned int number receiving the
    /// blue value of the stroke color.
    ///</param>
    ///<param name = "A">
    /// Pointer to an unsigned int number receiving the
    /// alpha value of the stroke color.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// Whether the call succeeded. If false, |R|, |G|, |B| and |A| are
    /// unchanged.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetStrokeColor), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_GetStrokeColor(FPDF_TEXTPAGE text_page, int index, uint R, uint G, uint B, uint A);
    ///<summary>Get character rotation angle.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "index">Zero-based index of the character.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// On success, return the angle value in radian. Value will always be
    /// greater or equal to 0. If |text_page| is invalid, or if |index| is
    /// out of bounds, then return -1.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetCharAngle), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern float FPDFText_GetCharAngle(FPDF_TEXTPAGE text_page, int index);
    ///<summary>Get bounding box of a particular character.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "index">Zero-based index of the character.</param>
    ///<param name = "left">
    /// Pointer to a double number receiving left position
    /// of the character box.
    ///</param>
    ///<param name = "right">
    /// Pointer to a double number receiving right position
    /// of the character box.
    ///</param>
    ///<param name = "bottom">
    /// Pointer to a double number receiving bottom position
    /// of the character box.
    ///</param>
    ///<param name = "top">
    /// Pointer to a double number receiving top position of
    /// the character box.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// On success, return TRUE and fill in |left|, |right|, |bottom|, and
    /// |top|. If |text_page| is invalid, or if |index| is out of bounds,
    /// then return FALSE, and the out parameters remain unmodified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetCharBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_GetCharBox(FPDF_TEXTPAGE text_page, int index, double left, double right, double bottom, double top);
    ///<summary>
    /// Get a "loose" bounding box of a particular character, i.e., covering
    /// the entire glyph bounds, without taking the actual glyph shape into
    /// account.
    ///</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "index">Zero-based index of the character.</param>
    ///<param name = "rect">Pointer to a FS_RECTF receiving the character box.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// On success, return TRUE and fill in |rect|. If |text_page| is
    /// invalid, or if |index| is out of bounds, then return FALSE, and the
    /// |rect| out parameter remains unmodified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetLooseCharBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_GetLooseCharBox(FPDF_TEXTPAGE text_page, int index, FS_RECTF rect);
    ///<summary>Get the effective transformation matrix for a particular character.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage().
    ///</param>
    ///<param name = "index">Zero-based index of the character.</param>
    ///<param name = "matrix">
    /// Pointer to a FS_MATRIX receiving the transformation
    /// matrix.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// On success, return TRUE and fill in |matrix|. If |text_page| is
    /// invalid, or if |index| is out of bounds, or if |matrix| is NULL,
    /// then return FALSE, and |matrix| remains unmodified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetMatrix), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_GetMatrix(FPDF_TEXTPAGE text_page, int index, FS_MATRIX matrix);
    ///<summary>Get origin of a particular character.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "index">Zero-based index of the character.</param>
    ///<param name = "x">
    /// Pointer to a double number receiving x coordinate of
    /// the character origin.
    ///</param>
    ///<param name = "y">
    /// Pointer to a double number receiving y coordinate of
    /// the character origin.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>Whether the call succeeded. If false, x and y are unchanged.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetCharOrigin), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_GetCharOrigin(FPDF_TEXTPAGE text_page, int index, double x, double y);
    ///<summary>
    /// Get the index of a character at or nearby a certain position on the
    /// page.
    ///</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "x">X position in PDF "user space".</param>
    ///<param name = "y">Y position in PDF "user space".</param>
    ///<param name = "xTolerance">
    /// An x-axis tolerance value for character hit
    /// detection, in point units.
    ///</param>
    ///<param name = "yTolerance">
    /// A y-axis tolerance value for character hit
    /// detection, in point units.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// The zero-based index of the character at, or nearby the point (x,y).
    /// If there is no character at or nearby the point, return value will
    /// be -1. If an error occurs, -3 will be returned.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetCharIndexAtPos), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_GetCharIndexAtPos(FPDF_TEXTPAGE text_page, double x, double y, double xTolerance, double yTolerance);
    ///<summary>Extract unicode text string from the page.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "start_index">Index for the start characters.</param>
    ///<param name = "count">Number of characters to be extracted.</param>
    ///<param name = "result">
    /// A buffer (allocated by application) receiving the
    /// extracted unicodes. The size of the buffer must be
    /// able to hold the number of characters plus a
    /// terminator.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// Number of characters written into the result buffer, including the
    /// trailing terminator.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetText), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_GetText(FPDF_TEXTPAGE text_page, int start_index, int count, ushort result);
    ///<summary>Count number of rectangular areas occupied by a segment of texts.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "start_index">Index for the start characters.</param>
    ///<param name = "count">Number of characters.</param>
    ///<remarks>
    /// This function, along with FPDFText_GetRect can be used by
    /// applications to detect the position on the page for a text segment,
    /// so proper areas can be highlighted. FPDFTEXT will automatically
    /// merge small character boxes into bigger one if those characters
    /// are on the same line and use same font settings.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.
    ///</remarks>
    ///<returns>Number of rectangles. Zero for error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_CountRects), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_CountRects(FPDF_TEXTPAGE text_page, int start_index, int count);
    ///<summary>
    /// Get a rectangular area from the result generated by
    /// FPDFText_CountRects.
    ///</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "rect_index">Zero-based index for the rectangle.</param>
    ///<param name = "left">
    /// Pointer to a double value receiving the rectangle
    /// left boundary.
    ///</param>
    ///<param name = "top">
    /// Pointer to a double value receiving the rectangle
    /// top boundary.
    ///</param>
    ///<param name = "right">
    /// Pointer to a double value receiving the rectangle
    /// right boundary.
    ///</param>
    ///<param name = "bottom">
    /// Pointer to a double value receiving the rectangle
    /// bottom boundary.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// On success, return TRUE and fill in |left|, |top|, |right|, and
    /// |bottom|. If |text_page| is invalid then return FALSE, and the out
    /// parameters remain unmodified. If |text_page| is valid but
    /// |rect_index| is out of bounds, then return FALSE and set the out
    /// parameters to 0.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetRect), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_GetRect(FPDF_TEXTPAGE text_page, int rect_index, double left, double top, double right, double bottom);
    ///<summary>Extract unicode text within a rectangular boundary on the page.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "left">Left boundary.</param>
    ///<param name = "top">Top boundary.</param>
    ///<param name = "right">Right boundary.</param>
    ///<param name = "bottom">Bottom boundary.</param>
    ///<param name = "buffer">A unicode buffer.</param>
    ///<param name = "buflen">
    /// Number of characters (not bytes) for the buffer,
    /// excluding an additional terminator.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// If buffer is NULL or buflen is zero, return number of characters
    /// (not bytes) of text present within the rectangle, excluding a
    /// terminating NUL. Generally you should pass a buffer at least one
    /// larger than this if you want a terminating NUL, which will be
    /// provided if space is available. Otherwise, return number of
    /// characters copied into the buffer, including the terminating NUL
    /// when space for it is available.
    /// Comment:
    /// If the buffer is too small, as much text as will fit is copied into
    /// it.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetBoundedText), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_GetBoundedText(FPDF_TEXTPAGE text_page, double left, double top, double right, double bottom, ushort buffer, int buflen);
    ///<summary>Start a search.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<param name = "findwhat">A unicode match pattern.</param>
    ///<param name = "flags">Option flags.</param>
    ///<param name = "start_index">Start from this character. -1 for end of the page.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// A handle for the search context. FPDFText_FindClose must be called
    /// to release this handle.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_FindStart), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_SCHHANDLE FPDFText_FindStart(FPDF_TEXTPAGE text_page, FPDF_WIDESTRING findwhat, uint flags, int start_index);
    ///<summary>Search in the direction from page start to end.</summary>
    ///<param name = "handle">
    /// A search context handle returned by
    /// FPDFText_FindStart.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>Whether a match is found.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_FindNext), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_FindNext(FPDF_SCHHANDLE handle);
    ///<summary>Search in the direction from page end to start.</summary>
    ///<param name = "handle">
    /// A search context handle returned by
    /// FPDFText_FindStart.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>Whether a match is found.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_FindPrev), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_FindPrev(FPDF_SCHHANDLE handle);
    ///<summary>Get the starting character index of the search result.</summary>
    ///<param name = "handle">
    /// A search context handle returned by
    /// FPDFText_FindStart.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>Index for the starting character.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetSchResultIndex), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_GetSchResultIndex(FPDF_SCHHANDLE handle);
    ///<summary>Get the number of matched characters in the search result.</summary>
    ///<param name = "handle">
    /// A search context handle returned by
    /// FPDFText_FindStart.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>Number of matched characters.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_GetSchCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFText_GetSchCount(FPDF_SCHHANDLE handle);
    ///<summary>Release a search context.</summary>
    ///<param name = "handle">
    /// A search context handle returned by
    /// FPDFText_FindStart.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFText_FindClose), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFText_FindClose(FPDF_SCHHANDLE handle);
    ///<summary>Prepare information about weblinks in a page.</summary>
    ///<param name = "text_page">
    /// Handle to a text page information structure.
    /// Returned by FPDFText_LoadPage function.
    ///</param>
    ///<remarks>
    /// Weblinks are those links implicitly embedded in PDF pages. PDF also
    /// has a type of annotation called "link" (FPDFTEXT doesn't deal with
    /// that kind of link). FPDFTEXT weblink feature is useful for
    /// automatically detecting links in the page contents. For example,
    /// things like "https://www.example.com" will be detected, so
    /// applications can allow user to click on those characters to activate
    /// the link, even the PDF doesn't come with link annotations.
    /// FPDFLink_CloseWebLinks must be called to release resources.
    /// For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.
    ///</remarks>
    ///<returns>
    /// A handle to the page's links information structure, or
    /// NULL if something goes wrong.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFLink_LoadWebLinks), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PAGELINK FPDFLink_LoadWebLinks(FPDF_TEXTPAGE text_page);
    ///<summary>Count number of detected web links.</summary>
    ///<param name = "link_page">Handle returned by FPDFLink_LoadWebLinks.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>Number of detected web links.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFLink_CountWebLinks), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFLink_CountWebLinks(FPDF_PAGELINK link_page);
    ///<summary>Fetch the URL information for a detected web link.</summary>
    ///<param name = "link_page">Handle returned by FPDFLink_LoadWebLinks.</param>
    ///<param name = "link_index">Zero-based index for the link.</param>
    ///<param name = "buffer">A unicode buffer for the result.</param>
    ///<param name = "buflen">
    /// Number of 16-bit code units (not bytes) for the
    /// buffer, including an additional terminator.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// If |buffer| is NULL or |buflen| is zero, return the number of 16-bit
    /// code units (not bytes) needed to buffer the result (an additional
    /// terminator is included in this count).
    /// Otherwise, copy the result into |buffer|, truncating at |buflen| if
    /// the result is too large to fit, and return the number of 16-bit code
    /// units actually copied into the buffer (the additional terminator is
    /// also included in this count).
    /// If |link_index| does not correspond to a valid link, then the result
    /// is an empty string.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetURL), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFLink_GetURL(FPDF_PAGELINK link_page, int link_index, ushort buffer, int buflen);
    ///<summary>Count number of rectangular areas for the link.</summary>
    ///<param name = "link_page">Handle returned by FPDFLink_LoadWebLinks.</param>
    ///<param name = "link_index">Zero-based index for the link.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// Number of rectangular areas for the link.  If |link_index| does
    /// not correspond to a valid link, then 0 is returned.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFLink_CountRects), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFLink_CountRects(FPDF_PAGELINK link_page, int link_index);
    ///<summary>Fetch the boundaries of a rectangle for a link.</summary>
    ///<param name = "link_page">Handle returned by FPDFLink_LoadWebLinks.</param>
    ///<param name = "link_index">Zero-based index for the link.</param>
    ///<param name = "rect_index">Zero-based index for a rectangle.</param>
    ///<param name = "left">
    /// Pointer to a double value receiving the rectangle
    /// left boundary.
    ///</param>
    ///<param name = "top">
    /// Pointer to a double value receiving the rectangle
    /// top boundary.
    ///</param>
    ///<param name = "right">
    /// Pointer to a double value receiving the rectangle
    /// right boundary.
    ///</param>
    ///<param name = "bottom">
    /// Pointer to a double value receiving the rectangle
    /// bottom boundary.
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// On success, return TRUE and fill in |left|, |top|, |right|, and
    /// |bottom|. If |link_page| is invalid or if |link_index| does not
    /// correspond to a valid link, then return FALSE, and the out
    /// parameters remain unmodified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetRect), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFLink_GetRect(FPDF_PAGELINK link_page, int link_index, int rect_index, double left, double top, double right, double bottom);
    ///<summary>Fetch the start char index and char count for a link.</summary>
    ///<param name = "link_page">Handle returned by FPDFLink_LoadWebLinks.</param>
    ///<param name = "link_index">Zero-based index for the link.</param>
    ///<param name = "start_char_index">pointer to int receiving the start char index</param>
    ///<param name = "char_count">pointer to int receiving the char count</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    ///<returns>
    /// On success, return TRUE and fill in |start_char_index| and
    /// |char_count|. if |link_page| is invalid or if |link_index| does
    /// not correspond to a valid link, then return FALSE and the out
    /// parameters remain unmodified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFLink_GetTextRange), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFLink_GetTextRange(FPDF_PAGELINK link_page, int link_index, int start_char_index, int char_count);
    ///<summary>Release resources used by weblink feature.</summary>
    ///<param name = "link_page">Handle returned by FPDFLink_LoadWebLinks.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_text.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFLink_CloseWebLinks), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFLink_CloseWebLinks(FPDF_PAGELINK link_page);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_thumbnail.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetDecodedThumbnailData), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFPage_GetDecodedThumbnailData(FPDF_PAGE page, IntPtr buffer, uint buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_thumbnail.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetRawThumbnailData), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern uint FPDFPage_GetRawThumbnailData(FPDF_PAGE page, IntPtr buffer, uint buflen);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_thumbnail.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetThumbnailAsBitmap), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_BITMAP FPDFPage_GetThumbnailAsBitmap(FPDF_PAGE page);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_SetMediaBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFPage_SetMediaBox(FPDF_PAGE page, float left, float bottom, float right, float top);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_SetCropBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFPage_SetCropBox(FPDF_PAGE page, float left, float bottom, float right, float top);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_SetBleedBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFPage_SetBleedBox(FPDF_PAGE page, float left, float bottom, float right, float top);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_SetTrimBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFPage_SetTrimBox(FPDF_PAGE page, float left, float bottom, float right, float top);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_SetArtBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFPage_SetArtBox(FPDF_PAGE page, float left, float bottom, float right, float top);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetMediaBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPage_GetMediaBox(FPDF_PAGE page, float left, float bottom, float right, float top);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetCropBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPage_GetCropBox(FPDF_PAGE page, float left, float bottom, float right, float top);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetBleedBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPage_GetBleedBox(FPDF_PAGE page, float left, float bottom, float right, float top);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetTrimBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPage_GetTrimBox(FPDF_PAGE page, float left, float bottom, float right, float top);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_GetArtBox), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPage_GetArtBox(FPDF_PAGE page, float left, float bottom, float right, float top);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_TransFormWithClip), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFPage_TransFormWithClip(FPDF_PAGE page, FS_MATRIX matrix, FS_RECTF clipRect);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_TransformClipPath), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFPageObj_TransformClipPath(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPageObj_GetClipPath), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_CLIPPATH FPDFPageObj_GetClipPath(FPDF_PAGEOBJECT page_object);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFClipPath_CountPaths), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFClipPath_CountPaths(FPDF_CLIPPATH clip_path);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFClipPath_CountPathSegments), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern int FPDFClipPath_CountPathSegments(FPDF_CLIPPATH clip_path, int path_index);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFClipPath_GetPathSegment), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_PATHSEGMENT FPDFClipPath_GetPathSegment(FPDF_CLIPPATH clip_path, int path_index, int segment_index);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_CreateClipPath), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern FPDF_CLIPPATH FPDF_CreateClipPath(float left, float bottom, float right, float top);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDF_DestroyClipPath), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDF_DestroyClipPath(FPDF_CLIPPATH clipPath);
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_transformpage.h.</remarks>
    [DllImport(DllName, EntryPoint = nameof(FPDFPage_InsertClipPath), SetLastError = true), SuppressUnmanagedCodeSecurity]
    internal static extern IntPtr FPDFPage_InsertClipPath(FPDF_PAGE page, FPDF_CLIPPATH clipPath);
}