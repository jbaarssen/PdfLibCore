using System;
using System.Security;
using System.Runtime.InteropServices;
using PdfLibCore.Generated.Enums;
using PdfLibCore.Generated.Structs;
using PdfLibCore.Generated.Types;

/*
This file is part of PdfLibCore, a wrapper around the PDFium library for the .NET.
Inspired by the awesome work of PDFiumSharp by Tobias Meyer.

Copyright (C) 2023 J.C.A. Kokenberg & Jan Baarssen
License: Microsoft Reciprocal License (MS-RL)
*/

// AUTOGENERATED FILE - 10-05-2023 (01:50:33) - Utc
// DO NOT MODIFY

namespace PdfLibCore.Generated;
public static partial class PlatformInvoke
{
    ///<summary>Get total number of signatures in the document.</summary>
    ///<param name = "document">Handle to document. Returned by FPDF_LoadDocument().</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_signature.h.</remarks>
    ///<returns>Total number of signatures in the document on success, -1 on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetSignatureCount), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern int FPDF_GetSignatureCount(FPDF_DOCUMENT document);
    ///<summary>Get the Nth signature of the document.</summary>
    ///<param name = "document">Handle to document. Returned by FPDF_LoadDocument().</param>
    ///<param name = "index">Index into the array of signatures of the document.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_signature.h.</remarks>
    ///<returns>
    /// Returns the handle to the signature, or NULL on failure. The caller
    /// does not take ownership of the returned FPDF_SIGNATURE. Instead, it
    /// remains valid until FPDF_CloseDocument() is called for the document.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDF_GetSignatureObject), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern FPDF_SIGNATURE FPDF_GetSignatureObject(FPDF_DOCUMENT document, int index);
    ///<summary>Get the contents of a signature object.</summary>
    ///<param name = "signature">
    /// Handle to the signature object. Returned by
    /// FPDF_GetSignatureObject().
    ///</param>
    ///<param name = "buffer">The address of a buffer that receives the contents.</param>
    ///<param name = "length">The size, in bytes, of |buffer|.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_signature.h.</remarks>
    ///<returns>
    /// Returns the number of bytes in the contents on success, 0 on error.
    /// For public-key signatures, |buffer| is either a DER-encoded PKCS#1 binary or
    /// a DER-encoded PKCS#7 binary. If |length| is less than the returned length, or
    /// |buffer| is NULL, |buffer| will not be modified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFSignatureObj_GetContents), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDFSignatureObj_GetContents(FPDF_SIGNATURE signature, out IntPtr buffer, uint length);
    ///<summary>Get the byte range of a signature object.</summary>
    ///<param name = "signature">
    /// Handle to the signature object. Returned by
    /// FPDF_GetSignatureObject().
    ///</param>
    ///<param name = "buffer">
    /// The address of a buffer that receives the
    /// byte range.
    ///</param>
    ///<param name = "length">The size, in ints, of |buffer|.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_signature.h.</remarks>
    ///<returns>
    /// Returns the number of ints in the byte range on
    /// success, 0 on error.
    /// |buffer| is an array of pairs of integers (starting byte offset,
    /// length in bytes) that describes the exact byte range for the digest
    /// calculation. If |length| is less than the returned length, or
    /// |buffer| is NULL, |buffer| will not be modified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFSignatureObj_GetByteRange), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDFSignatureObj_GetByteRange(FPDF_SIGNATURE signature, out int buffer, uint length);
    ///<summary>Get the encoding of the value of a signature object.</summary>
    ///<param name = "signature">
    /// Handle to the signature object. Returned by
    /// FPDF_GetSignatureObject().
    ///</param>
    ///<param name = "buffer">The address of a buffer that receives the encoding.</param>
    ///<param name = "length">The size, in bytes, of |buffer|.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_signature.h.</remarks>
    ///<returns>
    /// Returns the number of bytes in the encoding name (including the
    /// trailing NUL character) on success, 0 on error.
    /// The |buffer| is always encoded in 7-bit ASCII. If |length| is less than the
    /// returned length, or |buffer| is NULL, |buffer| will not be modified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFSignatureObj_GetSubFilter), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDFSignatureObj_GetSubFilter(FPDF_SIGNATURE signature, out string buffer, uint length);
    ///<summary>Get the reason (comment) of the signature object.</summary>
    ///<param name = "signature">
    /// Handle to the signature object. Returned by
    /// FPDF_GetSignatureObject().
    ///</param>
    ///<param name = "buffer">The address of a buffer that receives the reason.</param>
    ///<param name = "length">The size, in bytes, of |buffer|.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_signature.h.</remarks>
    ///<returns>
    /// Returns the number of bytes in the reason on success, 0 on error.
    /// Regardless of the platform, the |buffer| is always in UTF-16LE encoding. The
    /// string is terminated by a UTF16 NUL character. If |length| is less than the
    /// returned length, or |buffer| is NULL, |buffer| will not be modified.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFSignatureObj_GetReason), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDFSignatureObj_GetReason(FPDF_SIGNATURE signature, out IntPtr buffer, uint length);
    ///<summary>Get the time of signing of a signature object.</summary>
    ///<param name = "signature">
    /// Handle to the signature object. Returned by
    /// FPDF_GetSignatureObject().
    ///</param>
    ///<param name = "buffer">The address of a buffer that receives the time.</param>
    ///<param name = "length">The size, in bytes, of |buffer|.</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_signature.h.</remarks>
    ///<returns>
    /// Returns the number of bytes in the encoding name (including the
    /// trailing NUL character) on success, 0 on error.
    /// The |buffer| is always encoded in 7-bit ASCII. If |length| is less than the
    /// returned length, or |buffer| is NULL, |buffer| will not be modified.
    /// The format of time is expected to be D:YYYYMMDDHHMMSS+XX'YY', i.e. it's
    /// percision is seconds, with timezone information. This value should be used
    /// only when the time of signing is not available in the (PKCS#7 binary)
    /// signature.
    ///</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFSignatureObj_GetTime), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDFSignatureObj_GetTime(FPDF_SIGNATURE signature, out string buffer, uint length);
    ///<summary>Get the DocMDP permission of a signature object.</summary>
    ///<param name = "signature">
    /// Handle to the signature object. Returned by
    /// FPDF_GetSignatureObject().
    ///</param>
    ///<remarks>For more information see: https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_signature.h.</remarks>
    ///<returns>Returns the permission (1, 2 or 3) on success, 0 on error.</returns>
    [DllImport(DllName, EntryPoint = nameof(FPDFSignatureObj_GetDocMDPPermission), SetLastError = true), SuppressUnmanagedCodeSecurity]
    public static extern uint FPDFSignatureObj_GetDocMDPPermission(FPDF_SIGNATURE signature);
}